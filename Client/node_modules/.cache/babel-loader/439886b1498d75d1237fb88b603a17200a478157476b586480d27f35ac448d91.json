{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\wordle-clone\\\\src\\\\components\\\\Grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport raw from '../assets/wordle-La.txt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  const [wordleList, setWordleList] = useState([]);\n  const [firstDone, setFirstDone] = useState(false);\n  const [secondDone, setSecondDone] = useState(false);\n  const [thirdDone, setThirdDone] = useState(false);\n  const [fourthDone, setFourthDone] = useState(false);\n  const [fifthDone, setFifthDone] = useState(false);\n  const [sixthDone, setSixthDone] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState({\n    first: '',\n    second: '',\n    third: '',\n    fourth: '',\n    fifth: '',\n    sixth: ''\n  });\n  const [dummyWords, setDummyWords] = useState({\n    first: '',\n    second: '',\n    third: '',\n    fourth: '',\n    fifth: '',\n    sixth: ''\n  });\n  useEffect(() => {\n    const fetchWords = async () => {\n      const response = await fetch(raw);\n      const text = await response.text();\n      const lines = text.split('\\n').slice(0, 2315);\n      setWordleList(lines);\n    };\n    fetchWords();\n  }, []);\n  useEffect(() => {\n    if (wordleList.length > 0) {\n      // setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\n      setCorrectWord(\"ELBOW\");\n      setLoading(false);\n    }\n  }, [wordleList]);\n  useEffect(() => {\n    setDummyWords({\n      first: correctWord\n    });\n  }, [correctWord]);\n  useEffect(() => {\n    const onPress = event => {\n      if (event.key === 'Backspace') {\n        if (!firstDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first.slice(0, prevGuess.first.length - 1)\n          }));\n        }\n      } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\n        if (!firstDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first + event.key.toUpperCase()\n          }));\n        }\n        if (secondDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            second: prevGuess.second + event.key.toUpperCase()\n          }));\n        }\n        if (thirdDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            third: prevGuess.third + event.key.toUpperCase()\n          }));\n        }\n        if (fourthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fourth: prevGuess.fourth + event.key.toUpperCase()\n          }));\n        }\n        if (fifthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fifth: prevGuess.fifth + event.key.toUpperCase()\n          }));\n        }\n        if (sixthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            sixth: prevGuess.sixth + event.key.toUpperCase()\n          }));\n        }\n      }\n    };\n\n    // Attach event listener\n    document.addEventListener('keydown', onPress);\n\n    // Cleanup function to remove event listener\n    return () => {\n      document.removeEventListener('keydown', onPress);\n    };\n  }, [firstDone, secondDone, thirdDone, fourthDone, fifthDone, sixthDone]); // Depend only on the completion status\n\n  const compareString = (str1, str2) => {\n    var indexMatch = '';\n    for (let i = 0; i < str1.length; i++) {\n      if (str1[i] == str2[i]) {\n        indexMatch += i;\n      }\n    }\n    return indexMatch;\n  };\n  useEffect(() => {\n    if (guesses.first.length == 5 && !firstDone) {\n      setFirstDone(true);\n    }\n    if (guesses.second.length == 5 && !secondDone) {\n      setSecondDone(true);\n    }\n    if (guesses.third.length == 5 && !thirdDone) {\n      setThirdDone(true);\n    }\n    if (guesses.fourth.length == 5 && !fourthDone) {\n      setFourthDone(true);\n    }\n    if (guesses.fifth.length == 5 && !fifthDone) {\n      setFifthDone(true);\n    }\n    if (guesses.sixth.length == 5 && !sixthDone) {\n      setSixthDone(true);\n    }\n  }, [guesses]);\n  const evalGuess = (dummyWord, letter, pos) => {\n    if (letter == correctWord[pos]) {\n      return 'green';\n    } else if (dummyWord.includes(letter)) {\n      return 'yellow';\n    } else {\n      return 'gray';\n    }\n  };\n  const [guessResults, setGuessResults] = useState({\n    first: [],\n    second: [],\n    third: [],\n    fourth: [],\n    fifth: [],\n    sixth: []\n  });\n  const firstRef = useRef(false);\n  const secondRef = useRef(false);\n  const thirdRef = useRef(false);\n  const fourthRef = useRef(false);\n  const fifthRef = useRef(false);\n  const sixthRef = useRef(false);\n  var cheatVar = correctWord;\n  const evaluteGuess = (res, ind) => {\n    if (guessResults.first) {\n      const newCheatVar = cheatVar;\n      cheatVar = cheatVar.replace(res, '');\n      return evalGuess(newCheatVar, res, ind); //check for green, yellow and gray\n    }\n  };\n  useEffect(() => {\n    if (firstDone && !firstRef.current) {\n      //player has made first guess\n      const colorGuess = guesses.first.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        first: [...prevResults.first, ...colorGuess]\n      }));\n      firstRef.current = true;\n    }\n    if (secondDone && !secondRef.current) {\n      //player has made first guess\n      const colorGuess = guesses.second.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        second: [...prevResults.second, ...colorGuess]\n      }));\n      secondRef.current = true;\n    }\n    if (thirdDone && !thirdRef.current) {\n      //player has made first guess\n      const colorGuess = guesses.third.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        third: [...prevResults.third, ...colorGuess]\n      }));\n      thirdRef.current = true;\n    }\n    if (fourthDone && !fourthRef.current) {\n      //player has made first guess\n      const colorGuess = guesses.fourth.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        fourth: [...prevResults.fourth, ...colorGuess]\n      }));\n      fourthRef.current = true;\n    }\n    if (fifthDone && !fifthRef.current) {\n      //player has made first guess\n      const colorGuess = guesses.fifth.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        fifth: [...prevResults.fifth, ...colorGuess]\n      }));\n      fifthRef.current = true;\n    }\n    if (sixthDone && !sixthRef.current) {\n      //player has made first guess\n      const colorGuess = guesses.sixth.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        sixth: [...prevResults.sixth, ...colorGuess]\n      }));\n      sixthRef.current = true;\n    }\n    // Repeat this pattern for the remaining guesses (third, fourth, etc.)\n  }, [firstDone, secondDone, thirdDone, fourthDone, fifthDone, sixthDone]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 16\n    }, this); // Show a loading indicator while data is being fetched\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mx-auto w-[500px]\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-5 w-[340px] mx-auto gap-2\",\n      children: [firstDone && firstRef.current ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.first.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][res] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), secondDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.second.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['second'][ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['second'][res] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), thirdDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.third.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses.third[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses.third[res] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), fourthDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.fourth.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses.fourth[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses.fourth[res] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), fifthDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.fifth.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses.fifth[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses.fifth[res] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), sixthDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.sixth.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses.sixth[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses.sixth[res] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 21\n        }, this))\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"klF9XkYNiRuEl+2sZd8gu+P0omE=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useEffect","useState","useRef","raw","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","_s","wordleList","setWordleList","firstDone","setFirstDone","secondDone","setSecondDone","thirdDone","setThirdDone","fourthDone","setFourthDone","fifthDone","setFifthDone","sixthDone","setSixthDone","loading","setLoading","correctWord","setCorrectWord","guesses","setGuesses","first","second","third","fourth","fifth","sixth","dummyWords","setDummyWords","fetchWords","response","fetch","text","lines","split","slice","length","onPress","event","key","prevGuess","match","toUpperCase","document","addEventListener","removeEventListener","compareString","str1","str2","indexMatch","i","evalGuess","dummyWord","letter","pos","includes","guessResults","setGuessResults","firstRef","secondRef","thirdRef","fourthRef","fifthRef","sixthRef","cheatVar","evaluteGuess","res","ind","newCheatVar","replace","current","colorGuess","map","prevResults","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/david/wordle-clone/src/components/Grid.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport raw from '../assets/wordle-La.txt'\r\n\r\nconst Grid = () => {\r\n\r\n    const [wordleList, setWordleList] = useState([]);\r\n    const [firstDone, setFirstDone] = useState(false);\r\n    const [secondDone, setSecondDone] = useState(false);\r\n    const [thirdDone, setThirdDone] = useState(false);\r\n    const [fourthDone, setFourthDone] = useState(false);\r\n    const [fifthDone, setFifthDone] = useState(false);\r\n    const [sixthDone, setSixthDone] = useState(false);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [correctWord, setCorrectWord] = useState('');\r\n\r\n    const[guesses, setGuesses] = useState({first: '', second: '', third: '', fourth: '', fifth: '', sixth: ''});\r\n    const [dummyWords, setDummyWords] = useState({first: '', second: '', third: '', fourth: '', fifth: '', sixth: ''});\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchWords = async () => { \r\n            const response = await fetch(raw);\r\n            const text = await response.text();\r\n            const lines = text.split('\\n').slice(0, 2315);\r\n            setWordleList(lines)\r\n        };\r\n        fetchWords();\r\n\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        if (wordleList.length > 0) {\r\n        // setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\r\n        setCorrectWord(\"ELBOW\")\r\n        setLoading(false);\r\n        }\r\n    }, [wordleList])\r\n\r\n    useEffect(() => {\r\n        setDummyWords({first: correctWord})\r\n    }, [correctWord])\r\n\r\n\r\n    useEffect(() => {\r\n        const onPress = (event) => {\r\n          if (event.key === 'Backspace') {\r\n            if (!firstDone) {\r\n              setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first.slice(0, prevGuess.first.length - 1))}))\r\n            } \r\n          } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\r\n            if (!firstDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first + event.key.toUpperCase())}))\r\n            }\r\n            if (secondDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, second: (prevGuess.second + event.key.toUpperCase())}))\r\n            } \r\n            if (thirdDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, third: (prevGuess.third + event.key.toUpperCase())}))\r\n            } \r\n            if (fourthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, fourth: (prevGuess.fourth + event.key.toUpperCase())}))\r\n            } \r\n            if (fifthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, fifth: (prevGuess.fifth + event.key.toUpperCase())}))\r\n            } \r\n            if (sixthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, sixth: (prevGuess.sixth + event.key.toUpperCase())}))\r\n            } \r\n          }\r\n        };\r\n    \r\n        // Attach event listener\r\n        document.addEventListener('keydown', onPress);\r\n    \r\n        // Cleanup function to remove event listener\r\n        return () => {\r\n          document.removeEventListener('keydown', onPress);\r\n        };\r\n      }, [firstDone, secondDone, thirdDone, fourthDone, fifthDone, sixthDone]); // Depend only on the completion status\r\n\r\n    \r\n\r\n    const compareString = (str1, str2) => {\r\n        var indexMatch = '';\r\n        for (let i = 0; i < str1.length; i++) {\r\n            if (str1[i] == str2[i]) {\r\n                indexMatch += i;\r\n            }\r\n        } return indexMatch;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (guesses.first.length == 5 && !firstDone) {\r\n            setFirstDone(true);\r\n        }\r\n        if (guesses.second.length == 5 && !secondDone) {\r\n            setSecondDone(true);\r\n        }\r\n        if (guesses.third.length == 5 && !thirdDone) {\r\n            setThirdDone(true);\r\n        }\r\n        if (guesses.fourth.length == 5 && !fourthDone) {\r\n            setFourthDone(true);\r\n        }\r\n        if (guesses.fifth.length == 5 && !fifthDone) {\r\n            setFifthDone(true);\r\n        }\r\n        if (guesses.sixth.length == 5 && !sixthDone) {\r\n            setSixthDone(true);\r\n        }\r\n    }, [guesses])\r\n\r\n    const evalGuess = (dummyWord, letter, pos) => {\r\n        if (letter == correctWord[pos]) {\r\n            return 'green';\r\n        } else if (dummyWord.includes(letter)) {\r\n            return 'yellow';\r\n        } else {\r\n            return 'gray';\r\n        }\r\n    }\r\n    \r\n    const [guessResults, setGuessResults] = useState({first: [], second: [], third: [], fourth: [], fifth: [], sixth: []})\r\n    const firstRef = useRef(false);\r\n    const secondRef = useRef(false);\r\n    const thirdRef = useRef(false);\r\n    const fourthRef = useRef(false);\r\n    const fifthRef = useRef(false);\r\n    const sixthRef = useRef(false);\r\n\r\n\r\n\r\n    var cheatVar = correctWord;\r\n\r\n    const evaluteGuess = (res, ind) => {\r\n        if (guessResults.first) {\r\n            const newCheatVar = cheatVar;\r\n            cheatVar = cheatVar.replace(res, '')\r\n            return evalGuess(newCheatVar, res, ind) //check for green, yellow and gray\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (firstDone && !firstRef.current) { //player has made first guess\r\n            const colorGuess = guesses.first.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                first: [...prevResults.first, ...colorGuess]\r\n            }));\r\n            firstRef.current = true;\r\n        }\r\n        if (secondDone && !secondRef.current) { //player has made first guess\r\n            const colorGuess = guesses.second.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                second: [...prevResults.second, ...colorGuess]\r\n            }));\r\n            secondRef.current = true;\r\n        }\r\n        if (thirdDone && !thirdRef.current) { //player has made first guess\r\n            const colorGuess = guesses.third.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                third: [...prevResults.third, ...colorGuess]\r\n            }));\r\n            thirdRef.current = true;\r\n        }\r\n        if (fourthDone && !fourthRef.current) { //player has made first guess\r\n            const colorGuess = guesses.fourth.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                fourth: [...prevResults.fourth, ...colorGuess]\r\n            }));\r\n            fourthRef.current = true;\r\n        }\r\n        if (fifthDone && !fifthRef.current) { //player has made first guess\r\n            const colorGuess = guesses.fifth.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                fifth: [...prevResults.fifth, ...colorGuess]\r\n            }));\r\n            fifthRef.current = true;\r\n        }\r\n        if (sixthDone && !sixthRef.current) { //player has made first guess\r\n            const colorGuess = guesses.sixth.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                sixth: [...prevResults.sixth, ...colorGuess]\r\n            }));\r\n            sixthRef.current = true;\r\n        }\r\n        // Repeat this pattern for the remaining guesses (third, fourth, etc.)\r\n    }, [firstDone, secondDone, thirdDone, fourthDone, fifthDone, sixthDone]);\r\n\r\n\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>; // Show a loading indicator while data is being fetched\r\n    } \r\n  return (\r\n    <div className='mx-auto w-[500px]'>\r\n        <div className='grid grid-cols-5 w-[340px] mx-auto gap-2'>\r\n\r\n            { (firstDone && firstRef.current) ? \r\n            <>\r\n                {guessResults.first.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses['first'][ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['first'][res] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n\r\n            { secondDone ? \r\n            <>\r\n                {guessResults.second.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses['second'][ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['second'][res] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n\r\n            { thirdDone ? \r\n            <>\r\n                {guessResults.third.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses.third[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses.third[res] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n            { fourthDone ? \r\n            <>\r\n                {guessResults.fourth.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses.fourth[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses.fourth[res] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n            { fifthDone ? \r\n            <>\r\n                {guessResults.fifth.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses.fifth[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses.fifth[res] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n            { sixthDone ? \r\n            <>\r\n                {guessResults.sixth.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses.sixth[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses.sixth[res] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n        </div>\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Grid"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}