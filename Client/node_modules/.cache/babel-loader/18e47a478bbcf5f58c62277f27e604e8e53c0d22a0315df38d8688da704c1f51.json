{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\wordle-clone\\\\Client\\\\src\\\\components\\\\Grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useContext } from 'react';\nimport raw from '../assets/wordle-La.txt';\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\nimport CloseIcon from '@mui/icons-material/Close';\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport ShareIcon from '@mui/icons-material/Share';\nimport './Grid.css';\nimport Statistics from './Statistics';\nimport axios from 'axios';\nimport Zoom from '@mui/material/Zoom';\nimport { ClickAwayListener } from '@mui/base/ClickAwayListener';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  const {\n    darkMode\n  } = useContext(KeyboardContext);\n  const {\n    colorBlind,\n    setColorBlind\n  } = useContext(KeyboardContext);\n  const {\n    profilePage,\n    showProfilePage\n  } = useContext(KeyboardContext);\n  const {\n    tutorial,\n    showTutorial\n  } = useContext(KeyboardContext);\n  const {\n    leaderBoard,\n    showLeaderBoard\n  } = useContext(KeyboardContext);\n  const {\n    settings,\n    showSettings\n  } = useContext(KeyboardContext);\n  const {\n    userMode,\n    setUserMode\n  } = useContext(KeyboardContext);\n  const {\n    userID,\n    setUserID\n  } = useContext(KeyboardContext);\n  const {\n    kbColor,\n    setKbColor\n  } = useContext(KeyboardContext);\n  const {\n    winPage,\n    setWinPage\n  } = useContext(KeyboardContext);\n  const {\n    guessWon,\n    setGuessWon\n  } = useContext(KeyboardContext);\n  const [winCompliment, setWinCompliment] = useState(false);\n  const {\n    win,\n    setWin\n  } = useContext(KeyboardContext);\n  const {\n    answer,\n    showAnswer\n  } = useContext(KeyboardContext);\n  const {\n    notEnough,\n    setNotEnough\n  } = useContext(KeyboardContext);\n  const {\n    wrongWord,\n    setWrongWord\n  } = useContext(KeyboardContext);\n  const {\n    wordleList,\n    setWordleList\n  } = useContext(KeyboardContext);\n  const {\n    doneHash,\n    setDoneHash\n  } = useContext(KeyboardContext);\n  const {\n    canEnterHash,\n    setCanEnterHash\n  } = useContext(KeyboardContext);\n  const [guessResults, setGuessResults] = useState(() => {\n    const existingguessResults = JSON.parse(localStorage.getItem('guessResults'));\n    return existingguessResults || {\n      first: [],\n      second: [],\n      third: [],\n      fourth: [],\n      fifth: [],\n      sixth: []\n    };\n  });\n  const refHash = useRef({\n    first: false,\n    second: false,\n    third: false,\n    fourth: false,\n    fifth: false,\n    sixth: false\n  });\n  const [loading, setLoading] = useState(true);\n  const [correctWord, setCorrectWord] = useState(() => {\n    const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord'));\n    return existingCorrectWord || '';\n  });\n  const {\n    guesses,\n    setGuesses\n  } = useContext(KeyboardContext);\n  const {\n    clickDisabledLeaderBoard,\n    setClickDisabledLeaderBoard\n  } = useContext(KeyboardContext);\n  const {\n    clickDisabledProfile,\n    setClickDisabledProfile\n  } = useContext(KeyboardContext);\n  const {\n    guestMode,\n    setGuestMode\n  } = useContext(KeyboardContext);\n  const {\n    guessLength,\n    setGuessLength\n  } = useContext(KeyboardContext);\n  const [loss, setLoss] = useState(() => {\n    const existingLoss = JSON.parse(localStorage.getItem('loss'));\n    return existingLoss || false;\n  });\n  useEffect(() => {\n    //loads wordle list\n    const fetchWords = async () => {\n      const response = await fetch(raw);\n      const text = await response.text();\n      const lines = text.split('\\r\\n').slice(0, 2315);\n      setWordleList(lines);\n    };\n    fetchWords();\n  }, []);\n  useEffect(() => {\n    //chooses random correct word from wordle list\n    if (wordleList.length > 0 && !correctWord) {\n      setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\n      // setCorrectWord('BLIMP')\n      // console.log(wordleList);\n      setLoading(false);\n    }\n  }, [wordleList]);\n  useEffect(() => {\n    // prints correctWord\n    if (correctWord) console.log('The Correct Word is ' + correctWord);\n    const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord')) || '';\n    if (JSON.stringify(existingCorrectWord) !== JSON.stringify(correctWord)) localStorage.setItem('correctWord', JSON.stringify(correctWord));\n  }, [correctWord]);\n  useEffect(() => {\n    //Register key press and save to state, del too\n    const onPress = event => {\n      if (event.key === 'Backspace') {\n        if (!doneHash.firstDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first.slice(0, prevGuess.first.length - 1)\n          }));\n        } else if (!doneHash.secondDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            second: prevGuess.second.slice(0, prevGuess.second.length - 1)\n          }));\n        } else if (!doneHash.thirdDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            third: prevGuess.third.slice(0, prevGuess.third.length - 1)\n          }));\n        } else if (!doneHash.fourthDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fourth: prevGuess.fourth.slice(0, prevGuess.fourth.length - 1)\n          }));\n        } else if (!doneHash.fifthDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fifth: prevGuess.fifth.slice(0, prevGuess.fifth.length - 1)\n          }));\n        } else if (!doneHash.sixthDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            sixth: prevGuess.sixth.slice(0, prevGuess.sixth.length - 1)\n          }));\n        }\n      } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\n        if (!doneHash.firstDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          // console.log(guessLength);\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first + event.key.toUpperCase()\n          }));\n        } else if (!doneHash.secondDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            second: prevGuess.second + event.key.toUpperCase()\n          }));\n        } else if (!doneHash.thirdDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            third: prevGuess.third + event.key.toUpperCase()\n          }));\n        } else if (!doneHash.fourthDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fourth: prevGuess.fourth + event.key.toUpperCase()\n          }));\n        } else if (!doneHash.fifthDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fifth: prevGuess.fifth + event.key.toUpperCase()\n          }));\n        } else if (!doneHash.sixthDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            sixth: prevGuess.sixth + event.key.toUpperCase()\n          }));\n        }\n      }\n    };\n    if (!win) {\n      // Attach event listener\n      document.addEventListener('keydown', onPress);\n\n      // Cleanup function to remove event listener\n      return () => {\n        document.removeEventListener('keydown', onPress);\n      };\n    }\n  }, [win, guessLength, doneHash]); // Depend only on the completion status\n\n  useEffect(() => {\n    // 'Enter' Key Functionality\n    const onPress = event => {\n      if (event.key === 'Enter') {\n        if (!doneHash.firstDone) {\n          if (canEnterHash.firstCanEnter) {\n            if (wordleList.includes(guesses.first.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                firstDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else if (!doneHash.secondDone) {\n          if (canEnterHash.secondCanEnter) {\n            if (wordleList.includes(guesses.second.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                secondDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else if (!doneHash.thirdDone) {\n          if (canEnterHash.thirdCanEnter) {\n            if (wordleList.includes(guesses.third.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                thirdDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else if (!doneHash.fourthDone) {\n          if (canEnterHash.fourthCanEnter) {\n            if (wordleList.includes(guesses.fourth.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                fourthDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else if (!doneHash.fifthDone) {\n          if (canEnterHash.fifthCanEnter) {\n            if (wordleList.includes(guesses.fifth.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                fifthDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else if (!doneHash.sixthDone) {\n          if (canEnterHash.sixthCanEnter) {\n            if (wordleList.includes(guesses.sixth.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                sixthDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        }\n      }\n    };\n    if (!win) {\n      document.addEventListener('keydown', onPress);\n      return () => {\n        document.removeEventListener('keydown', onPress);\n      };\n    }\n  }, [win, doneHash, canEnterHash]);\n  const compareString = (str1, str2) => {\n    // compare guess to correctword, return arr of index of green ( ex '135' so first third and fifth are green)\n    var indexMatch = [];\n    for (let i = 0; i < str1.length; i++) {\n      if (str1[i] == str2[i]) {\n        indexMatch.push(i);\n      }\n    }\n    return indexMatch;\n  };\n  useEffect(() => {\n    // evaluates whether user can press enter as a valid guess, length 5\n    // console.log(guesses.first)\n    if (!doneHash.firstDone) {\n      if (guesses.first.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        firstCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        firstCanEnter: false\n      }));\n    } else if (!doneHash.secondDone) {\n      if (guesses.second.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        secondCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        secondCanEnter: false\n      }));\n    } else if (!doneHash.thirdDone) {\n      if (guesses.third.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        thirdCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        thirdCanEnter: false\n      }));\n    } else if (!doneHash.fourthDone) {\n      if (guesses.fourth.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        fourthCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        fourthCanEnter: false\n      }));\n    } else if (!doneHash.fifthDone) {\n      if (guesses.fifth.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        fifthCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        fifthCanEnter: false\n      }));\n    } else if (!doneHash.sixthDone) {\n      if (guesses.sixth.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        sixthCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        sixthCanEnter: false\n      }));\n    }\n  }, [guesses]);\n  const greenLetter = (dummyWord, guessedWord) => {\n    //looks for green first\n    const greenIndex = compareString(correctWord, guessedWord); // arry of green index\n    var offset = 0;\n    for (let i = 0; i < greenIndex.length; i++) {\n      dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\n      // console.log(dummyWord)\n      offset++;\n    }\n    return dummyWord;\n  };\n  const evalGuess = (dummyWord, letter, pos) => {\n    //assign letter green, yellow, or gray\n    if (letter == correctWord[pos]) {\n      return 'green';\n    } else if (dummyWord.includes(letter)) {\n      return 'yellow';\n    } else {\n      return 'gray';\n    }\n  };\n  var cheatVar;\n  const evaluteGuess = (res, ind) => {\n    //helper func for evaluating guess\n    if (guessResults.first) {\n      const newCheatVar = cheatVar;\n      cheatVar = cheatVar.replace(res, '');\n      return evalGuess(newCheatVar, res, ind); //check for green, yellow and gray\n    }\n  };\n  const guessRow = useRef(1); // keep track of variable between useEffect renders\n\n  useEffect(() => {\n    // ref\n    const existingGuessRow = JSON.parse(localStorage.getItem('currentRow'));\n    if (existingGuessRow) guessRow.current = existingGuessRow;\n  }, []);\n  useEffect(() => {\n    console.log(doneHash);\n  }, []);\n  const firstTime = useRef(false);\n  useEffect(() => {\n    // evaluates guess, sets when user wins or loses\n    if (!firstTime.current) {\n      //skip on mount\n      firstTime.current = true;\n      return;\n    }\n    const lastTrueKey = Object.entries(doneHash).reduce((acc, [key, value]) => {\n      return value ? key : acc;\n    }, 0);\n\n    // Object.entries(doneHash).map(([ key, value ]) => {\n\n    const place = lastTrueKey.split('Done')[0]; // remove \"Done\" from \"firstDone\" to get 'first'; use for accessing hashmap\n    if (lastTrueKey !== 0 && !refHash.current[place]) {\n      //player has made first guess\n\n      cheatVar = greenLetter(correctWord, guesses[place]);\n      const colorGuess = guesses[place].split('').map((res, ind) =>\n      // gets color mapping for each letter guess\n      evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        [place]: [...prevResults[place], ...colorGuess]\n      }));\n      // console.log(colorGuess)\n      // console.log(guesses.first)\n      let newKbColor = guesses[place].split('').reduce((acc, res, ind) => {\n        //removes duplicates to map to keyboard (ex. plump) only one color for p.\n        if (acc[res] == 'green' || acc[res] == 'yellow') {\n\n          // green and yellow get priority over gray so don't overwrite. \n          // (ex blimp and guess is booby, first b is green so don't overwrite with second b which is gray.)\n          // (ex blimp and guess is poppy, first p is yellow so don't overwrite with second or third p which is gray.)\n        } else acc[res] = colorGuess[ind];\n        return acc;\n      }, {});\n      // console.log(newKbColor)\n      setKbColor(prevResults => [...prevResults, {\n        ...newKbColor\n      }]);\n      const set = new Set(Object.values(newKbColor));\n      const first = [...set][0];\n      if (set.size == 1 && first == 'green') {\n        setWin(true);\n        localStorage.setItem('win', JSON.stringify(true));\n        setGuessWon(guessRow.current);\n        localStorage.setItem('guessWon', JSON.stringify(guessRow.current));\n        return;\n      } else if (place == \"sixth\") {\n        showAnswer(true);\n        setLoss(true);\n        return;\n      }\n      guessRow.current += 1;\n      localStorage.setItem('currentRow', JSON.stringify(guessRow.current)); // just display\n\n      refHash.current[place] = true;\n    }\n    // })\n  }, [doneHash]);\n  useEffect(() => {\n    localStorage.setItem('answer', JSON.stringify(answer));\n  }, [answer]);\n  useEffect(() => {\n    localStorage.setItem('loss', JSON.stringify(loss));\n  }, [loss]);\n  useEffect(() => {\n    const existingDoneHash = JSON.parse(localStorage.getItem('doneHash')) || {\n      firstDone: false,\n      secondDone: false,\n      thirdDone: false,\n      fourthDone: false,\n      fifthDone: false,\n      sixthDone: false\n    };\n    if (JSON.stringify(existingDoneHash) !== JSON.stringify(doneHash)) localStorage.setItem('doneHash', JSON.stringify(doneHash));\n  }, [doneHash]);\n  useEffect(() => {\n    const existingguessResults = JSON.parse(localStorage.getItem('guessResults')) || {\n      first: [],\n      second: [],\n      third: [],\n      fourth: [],\n      fifth: [],\n      sixth: []\n    };\n    if (JSON.stringify(existingguessResults) !== JSON.stringify(guessResults)) localStorage.setItem('guessResults', JSON.stringify(guessResults));\n    const existingguesses = JSON.parse(localStorage.getItem('guesses')) || {\n      first: '',\n      second: '',\n      third: '',\n      fourth: '',\n      fifth: '',\n      sixth: ''\n    };\n    if (JSON.stringify(existingguesses) !== JSON.stringify(guesses)) localStorage.setItem('guesses', JSON.stringify(guesses));\n    console.log(guessResults);\n  }, [guessResults]);\n  useEffect(() => {\n    const existingKbColor = JSON.parse(localStorage.getItem('kbColor')) || [];\n    if (JSON.stringify(existingKbColor) !== JSON.stringify(kbColor)) localStorage.setItem('kbColor', JSON.stringify(kbColor));\n  }, [kbColor]);\n  const updated = useContext(KeyboardContext); // Solves: user can't refresh to gain infinite wins\n  useEffect(() => {\n    // ref\n    const existingUpdated = JSON.parse(localStorage.getItem('updatedStats'));\n    if (existingUpdated) updated.current = existingUpdated;\n  }, []);\n  useEffect(() => {\n    // update stats after game finish\n    if (win ^ answer && !updated.current) {\n      axios.post('http://localhost:8081/updateStats', {\n        ...userID,\n        win: win,\n        guessWon: guessWon\n      }).then(res => {\n        console.log(res.data.message);\n        updated.current = true;\n        localStorage.setItem('updatedStats', JSON.stringify(updated.current));\n      }).catch(err => console.log(err));\n    }\n  }, [win, answer]);\n  useEffect(() => {\n    // 1 sec delay after win before stats is shown\n    if (win) {\n      setWinCompliment(true);\n      setTimeout(() => {\n        /* Code to run after 4 seconds */\n        // alert('wow you have brain')\n        setWinPage(true);\n      }, 1000);\n    }\n  }, [win]);\n  if (winCompliment) {\n    // show win compliment and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setWinCompliment(false);\n    }, 5000);\n  }\n  if (notEnough) {\n    // show not enoguh letters prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setNotEnough(false);\n    }, 5000);\n  }\n  if (wrongWord) {\n    // show wrong word prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setWrongWord(false);\n    }, 5000);\n  }\n  if (clickDisabledLeaderBoard) {\n    // show disabled leadeboard prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setClickDisabledLeaderBoard(false);\n    }, 2000);\n  }\n  if (clickDisabledProfile) {\n    // show disabled profile prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setClickDisabledProfile(false);\n    }, 2000);\n  }\n  useEffect(() => {\n    if (loss) {\n      // 1 sec delay after loss before stats is shown\n      // setLoss(false);\n      setTimeout(function () {\n        setWinPage(true);\n      }, 1000);\n    }\n  }, [loss]);\n  function whichCompliment() {\n    // determines which compliment to give based on how many guesses player took\n    const firstTrueIndex = Object.entries(doneHash).findIndex(([key, value]) => !value);\n    // console.log(doneHash);\n    // console.log(firstTrueIndex);\n    if (firstTrueIndex != -1) {\n      return firstTrueIndex;\n    } else return 6;\n  }\n  const compliments = [\n  // compliment list\n  \"\", \"Genius\", \"Magnificent\", \"Impressive\", \"Splendid\", \"Great\", \"Phew\"];\n  const {\n    delay,\n    setDelay\n  } = useContext(KeyboardContext);\n  useEffect(() => {\n    if (!winPage) {\n      setTimeout(function () {\n        setDelay(false);\n      }, 1000);\n    }\n  }, [winPage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `mx-auto w-[500px] opacity-100 mb-[110px] ${darkMode ? 'bg-[#121213] text-white' : 'bg-white text-black'} z-0`,\n    children: [guestMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-[60px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-green-600 text-2xl rounded-md p-1 font-bold tracking-widest\",\n        children: \"Guest Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 95\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 23\n    }, this), userMode && !tutorial && !leaderBoard && !profilePage && !settings && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-[60px] left-0 flex justify-center w-full z-0\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: ` ${darkMode ? 'text-gray-200' : 'text-gray-500'} text-2xl rounded-md p-1 font-bold tracking-widest cursor-default`,\n        children: userID.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 159\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 83\n    }, this), winCompliment && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: compliments[whichCompliment()] || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 113\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 27\n    }, this), notEnough && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Not enough letters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 109\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 23\n    }, this), wrongWord && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Not in word list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 109\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 23\n    }, this), clickDisabledLeaderBoard && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Login to access leaderboards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 124\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 549,\n      columnNumber: 38\n    }, this), clickDisabledProfile && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Login to access profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 120\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 34\n    }, this), (winPage || delay) && /*#__PURE__*/_jsxDEV(Zoom, {\n      in: winPage,\n      timeout: 500,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-[250px] w-[500px] h-fit rounded-md shadow-xl z-20\",\n        children: /*#__PURE__*/_jsxDEV(Statistics, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 561,\n      columnNumber: 9\n    }, this), winPage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `absolute top-0 left-0 w-screen h-[930px] ${darkMode ? 'bg-black/50' : 'bg-white/50'}  z-10`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 21\n    }, this), answer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: correctWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 93\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-5 w-[340px] mx-auto gap-2\",\n      children:\n      //displays grid, simplified immensly\n      Object.entries(doneHash).map(([key, value]) =>\n      /*#__PURE__*/\n      // maps how many rows\n      _jsxDEV(\"div\", {\n        className: \"flex col-span-5 gap-2\",\n        children: value ?\n        /*#__PURE__*/\n        //through debuggin there is a time delay between which makes it so value is true but what is displayed is empty div because guessResults is not populated yet\n        _jsxDEV(_Fragment, {\n          children: [\"   \", guessResults[key.split('Done')[0]] && guessResults[key.split('Done')[0]].length > 0 ? guessResults[key.split('Done')[0]].map((res, ind) =>\n          /*#__PURE__*/\n          // maps how many columns (user input)\n          _jsxDEV(\"button\", {\n            className: `border-2 cursor-default ${res == 'green' ? colorBlind ? 'CBgreen' : 'green' : res == 'yellow' ? colorBlind ? 'CByellow' : 'yellow' : darkMode ? 'DMgray' : 'gray'} \n                                    flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white`,\n            children: guesses[key.split('Done')[0]][ind] || ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 33\n          }, this)) : [0, 1, 2, 3, 4].map(res =>\n          // maps how many columns (empty input)\n          guesses[key.split('Done')[0]][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n            children: guesses[key.split('Done')[0]][res]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [0, 1, 2, 3, 4].map(res =>\n          // maps how many columns (empty input)\n          guesses[key.split('Done')[0]][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border-2 border-[#565758] flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n            children: guesses[key.split('Done')[0]][res]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `border-2 ${darkMode && 'border-[#3a3a3c]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 29\n          }, this))\n        }, void 0, false)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 537,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"Nb+FAL0rzBy74eoqfu532rs2KBc=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useContext","raw","KeyboardContext","CloseIcon","ReplayIcon","ShareIcon","Statistics","axios","Zoom","ClickAwayListener","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","_s","darkMode","colorBlind","setColorBlind","profilePage","showProfilePage","tutorial","showTutorial","leaderBoard","showLeaderBoard","settings","showSettings","userMode","setUserMode","userID","setUserID","kbColor","setKbColor","winPage","setWinPage","guessWon","setGuessWon","winCompliment","setWinCompliment","win","setWin","answer","showAnswer","notEnough","setNotEnough","wrongWord","setWrongWord","wordleList","setWordleList","doneHash","setDoneHash","canEnterHash","setCanEnterHash","guessResults","setGuessResults","existingguessResults","JSON","parse","localStorage","getItem","first","second","third","fourth","fifth","sixth","refHash","loading","setLoading","correctWord","setCorrectWord","existingCorrectWord","guesses","setGuesses","clickDisabledLeaderBoard","setClickDisabledLeaderBoard","clickDisabledProfile","setClickDisabledProfile","guestMode","setGuestMode","guessLength","setGuessLength","loss","setLoss","existingLoss","fetchWords","response","fetch","text","lines","split","slice","length","Math","floor","random","toUpperCase","console","log","stringify","setItem","onPress","event","key","firstDone","prevGuessLen","prevGuess","secondDone","thirdDone","fourthDone","fifthDone","sixthDone","match","document","addEventListener","removeEventListener","firstCanEnter","includes","toLowerCase","prevDone","secondCanEnter","thirdCanEnter","fourthCanEnter","fifthCanEnter","sixthCanEnter","compareString","str1","str2","indexMatch","i","push","prevCanEnter","greenLetter","dummyWord","guessedWord","greenIndex","offset","parseInt","evalGuess","letter","pos","cheatVar","evaluteGuess","res","ind","newCheatVar","replace","guessRow","existingGuessRow","current","firstTime","lastTrueKey","Object","entries","reduce","acc","value","place","colorGuess","map","prevResults","newKbColor","set","Set","values","size","existingDoneHash","existingguesses","existingKbColor","updated","existingUpdated","post","then","data","message","catch","err","setTimeout","getElementById","id","whichCompliment","firstTrueIndex","findIndex","compliments","delay","setDelay","className","children","fileName","_jsxFileName","lineNumber","columnNumber","username","in","timeout","_c","$RefreshReg$"],"sources":["C:/Users/david/wordle-clone/Client/src/components/Grid.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useContext } from 'react'\r\nimport raw from '../assets/wordle-La.txt'\r\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport ReplayIcon from '@mui/icons-material/Replay';\r\nimport ShareIcon from '@mui/icons-material/Share';\r\nimport './Grid.css'\r\nimport Statistics from './Statistics';\r\nimport axios from 'axios';\r\nimport Zoom from '@mui/material/Zoom';\r\nimport { ClickAwayListener } from '@mui/base/ClickAwayListener';\r\n\r\n\r\n\r\nconst Grid = () => {\r\n    \r\n    const {darkMode} = useContext(KeyboardContext);\r\n    const {colorBlind, setColorBlind} = useContext(KeyboardContext);\r\n    const {profilePage, showProfilePage} = useContext(KeyboardContext);\r\n    const {tutorial, showTutorial} = useContext(KeyboardContext);\r\n    const {leaderBoard, showLeaderBoard} = useContext(KeyboardContext);\r\n    const {settings, showSettings} = useContext(KeyboardContext);\r\n    const {userMode, setUserMode} = useContext(KeyboardContext);\r\n    const {userID, setUserID} = useContext(KeyboardContext);\r\n    const {kbColor, setKbColor} = useContext(KeyboardContext);\r\n    const {winPage, setWinPage} = useContext(KeyboardContext);\r\n    const {guessWon, setGuessWon} = useContext(KeyboardContext);\r\n    const [winCompliment, setWinCompliment] = useState(false);\r\n    const {win, setWin} = useContext(KeyboardContext);\r\n    const {answer, showAnswer} = useContext(KeyboardContext);\r\n    const {notEnough, setNotEnough} = useContext(KeyboardContext);\r\n    const {wrongWord, setWrongWord} = useContext(KeyboardContext);\r\n    const {wordleList, setWordleList} = useContext(KeyboardContext);\r\n    const {doneHash, setDoneHash} = useContext(KeyboardContext);\r\n    const {canEnterHash, setCanEnterHash} = useContext(KeyboardContext);\r\n    const [guessResults, setGuessResults] = useState(() => {\r\n        const existingguessResults = JSON.parse(localStorage.getItem('guessResults'));\r\n        return existingguessResults || {\r\n            first: [], \r\n            second: [], \r\n            third: [], \r\n            fourth: [], \r\n            fifth: [], \r\n            sixth: []\r\n        };\r\n    });\r\n\r\n    const refHash = useRef({first: false, second: false, third: false, fourth: false, fifth: false, sixth: false})\r\n    const [loading, setLoading] = useState(true);\r\n    const [correctWord, setCorrectWord] = useState(() => {\r\n        const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord'));\r\n        return existingCorrectWord || '';\r\n    });\r\n    const {guesses, setGuesses} = useContext(KeyboardContext);\r\n    const {clickDisabledLeaderBoard, setClickDisabledLeaderBoard} = useContext(KeyboardContext);\r\n    const {clickDisabledProfile, setClickDisabledProfile} = useContext(KeyboardContext);\r\n    const {guestMode, setGuestMode} = useContext(KeyboardContext);\r\n    const {guessLength, setGuessLength} = useContext(KeyboardContext);\r\n    const [loss, setLoss] = useState(() => {\r\n        const existingLoss = JSON.parse(localStorage.getItem('loss'));\r\n        return existingLoss || false;\r\n    });\r\n\r\n\r\n\r\n    useEffect(() => { //loads wordle list\r\n        const fetchWords = async () => { \r\n            const response = await fetch(raw);\r\n            const text = await response.text();\r\n            const lines = text.split('\\r\\n').slice(0, 2315);\r\n            setWordleList(lines)\r\n        };\r\n        fetchWords();\r\n    }, []);\r\n    \r\n    useEffect(() => { //chooses random correct word from wordle list\r\n        if (wordleList.length > 0 && !correctWord) {\r\n        setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\r\n        // setCorrectWord('BLIMP')\r\n        // console.log(wordleList);\r\n        setLoading(false);\r\n        }\r\n    }, [wordleList])\r\n\r\n    useEffect(() => { // prints correctWord\r\n        if( correctWord )\r\n            console.log('The Correct Word is ' + correctWord)\r\n            const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord')) || '';\r\n            if (JSON.stringify(existingCorrectWord) !== JSON.stringify(correctWord)) localStorage.setItem('correctWord', JSON.stringify(correctWord));\r\n    }, [correctWord])\r\n\r\n\r\n    useEffect(() => { //Register key press and save to state, del too\r\n        const onPress = (event) => {\r\n            if (event.key === 'Backspace') {\r\n            if (!doneHash.firstDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first.slice(0, prevGuess.first.length - 1))}))\r\n            } \r\n            else if (!doneHash.secondDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, second: (prevGuess.second.slice(0, prevGuess.second.length - 1))}))\r\n            } \r\n            else if (!doneHash.thirdDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, third: (prevGuess.third.slice(0, prevGuess.third.length - 1))}))\r\n            } \r\n            else if (!doneHash.fourthDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, fourth: (prevGuess.fourth.slice(0, prevGuess.fourth.length - 1))}))\r\n            } \r\n            else if (!doneHash.fifthDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, fifth: (prevGuess.fifth.slice(0, prevGuess.fifth.length - 1))}))\r\n            } \r\n            else if (!doneHash.sixthDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, sixth: (prevGuess.sixth.slice(0, prevGuess.sixth.length - 1))}))\r\n            } \r\n            } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\r\n            if (!doneHash.firstDone && guessLength < 5) {\r\n\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                // console.log(guessLength);\r\n                setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first + event.key.toUpperCase())}))\r\n            }\r\n            else if (!doneHash.secondDone && guessLength < 5) {\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, second: (prevGuess.second + event.key.toUpperCase())}))\r\n            } \r\n            else if (!doneHash.thirdDone && guessLength < 5) {\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, third: (prevGuess.third + event.key.toUpperCase())}))\r\n            } \r\n            else if (!doneHash.fourthDone && guessLength < 5) {\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, fourth: (prevGuess.fourth + event.key.toUpperCase())}))\r\n            } \r\n            else if (!doneHash.fifthDone && guessLength < 5) {\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, fifth: (prevGuess.fifth + event.key.toUpperCase())}))\r\n            } \r\n            else if (!doneHash.sixthDone && guessLength < 5) {\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, sixth: (prevGuess.sixth + event.key.toUpperCase())}))\r\n            }\r\n            } \r\n        };\r\n        if(!win) {\r\n            // Attach event listener\r\n            document.addEventListener('keydown', onPress);\r\n        \r\n            // Cleanup function to remove event listener\r\n            return () => {\r\n            document.removeEventListener('keydown', onPress);\r\n            };\r\n        }\r\n    }, [win, guessLength, doneHash]); // Depend only on the completion status\r\n\r\n    useEffect(() => { // 'Enter' Key Functionality\r\n        const onPress = (event) => {\r\n            if (event.key === 'Enter') {\r\n                if (!doneHash.firstDone) {\r\n                    if (canEnterHash.firstCanEnter) {\r\n                        if (wordleList.includes(guesses.first.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, firstDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n                else if (!doneHash.secondDone) {\r\n                    if (canEnterHash.secondCanEnter) {\r\n                        if (wordleList.includes(guesses.second.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, secondDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n                else if (!doneHash.thirdDone) {\r\n                    if (canEnterHash.thirdCanEnter) {\r\n                        if (wordleList.includes(guesses.third.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, thirdDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n                else if (!doneHash.fourthDone) {\r\n                    if (canEnterHash.fourthCanEnter) {\r\n                        if (wordleList.includes(guesses.fourth.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, fourthDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n                else if (!doneHash.fifthDone) {\r\n                    if (canEnterHash.fifthCanEnter) {\r\n                        if (wordleList.includes(guesses.fifth.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, fifthDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n                else if (!doneHash.sixthDone) {\r\n                    if (canEnterHash.sixthCanEnter) {\r\n                        if (wordleList.includes(guesses.sixth.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, sixthDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n            }\r\n        }\r\n        if (!win) {\r\n            document.addEventListener('keydown', onPress);\r\n            return () => {\r\n            document.removeEventListener('keydown', onPress);\r\n            };\r\n        }\r\n    },[win, doneHash, canEnterHash])\r\n    \r\n    const compareString = (str1, str2) => { // compare guess to correctword, return arr of index of green ( ex '135' so first third and fifth are green)\r\n        var indexMatch = [];\r\n        for (let i = 0; i < str1.length; i++) {\r\n            if (str1[i] == str2[i]) {\r\n                indexMatch.push(i);\r\n            }\r\n        } return indexMatch;\r\n    }\r\n    \r\n    useEffect(() => { // evaluates whether user can press enter as a valid guess, length 5\r\n        // console.log(guesses.first)\r\n        if (!doneHash.firstDone) {\r\n            if (guesses.first.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, firstCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, firstCanEnter: false}));\r\n        }\r\n        else if (!doneHash.secondDone) {\r\n            if (guesses.second.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, secondCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, secondCanEnter: false}));\r\n        }\r\n        else if (!doneHash.thirdDone) {\r\n            if (guesses.third.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, thirdCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, thirdCanEnter: false}));\r\n        }\r\n        else if (!doneHash.fourthDone) {\r\n            if (guesses.fourth.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, fourthCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, fourthCanEnter: false}));\r\n        }\r\n        else if (!doneHash.fifthDone) {\r\n            if (guesses.fifth.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, fifthCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, fifthCanEnter: false}));\r\n        }\r\n        else if (!doneHash.sixthDone) {\r\n            if (guesses.sixth.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, sixthCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, sixthCanEnter: false}));\r\n        }\r\n    }, [guesses])\r\n\r\n    const greenLetter = (dummyWord, guessedWord) => { //looks for green first\r\n        const greenIndex = compareString(correctWord, guessedWord); // arry of green index\r\n        var offset = 0;\r\n        for (let i = 0; i < greenIndex.length; i++) {\r\n            dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\r\n            // console.log(dummyWord)\r\n            offset++;\r\n        }\r\n        return dummyWord;\r\n    }\r\n\r\n    const evalGuess = (dummyWord, letter, pos) => { //assign letter green, yellow, or gray\r\n        if (letter == correctWord[pos]) {\r\n            return 'green';\r\n        } else if (dummyWord.includes(letter)) {\r\n            return 'yellow';\r\n        } else {\r\n            return 'gray';\r\n        }\r\n    }\r\n\r\n    var cheatVar;\r\n\r\n    const evaluteGuess = (res, ind) => { //helper func for evaluating guess\r\n        if (guessResults.first) {\r\n            const newCheatVar = cheatVar;\r\n            cheatVar = cheatVar.replace(res, '')\r\n            return evalGuess(newCheatVar, res, ind) //check for green, yellow and gray\r\n        }\r\n    }\r\n\r\n    const guessRow = useRef(1); // keep track of variable between useEffect renders\r\n\r\n    useEffect(() => { // ref\r\n        const existingGuessRow = JSON.parse(localStorage.getItem('currentRow'));\r\n        if (existingGuessRow) guessRow.current = existingGuessRow;\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(doneHash)\r\n    }, [])\r\n    \r\n\r\n    const firstTime = useRef(false);\r\n    useEffect(() => { // evaluates guess, sets when user wins or loses\r\n        if (!firstTime.current) { //skip on mount\r\n            firstTime.current = true;\r\n            return;\r\n        }\r\n        const lastTrueKey = Object.entries(doneHash).reduce((acc, [key, value]) => {\r\n            return value ? key : acc;\r\n        }, 0);\r\n\r\n        // Object.entries(doneHash).map(([ key, value ]) => {\r\n            \r\n            const place = lastTrueKey.split('Done')[0] // remove \"Done\" from \"firstDone\" to get 'first'; use for accessing hashmap\r\n            if ( lastTrueKey !== 0 && !refHash.current[place]) { //player has made first guess\r\n                \r\n                cheatVar = greenLetter(correctWord, guesses[place])\r\n                const colorGuess = guesses[place].split('').map((res, ind) => ( // gets color mapping for each letter guess\r\n                    evaluteGuess(res, ind)\r\n                ))\r\n                setGuessResults(prevResults => ({\r\n                    ...prevResults,\r\n                    [place] : [...prevResults[place], ...colorGuess]\r\n                }));\r\n                // console.log(colorGuess)\r\n                // console.log(guesses.first)\r\n                let newKbColor = guesses[place].split('').reduce((acc, res, ind) => { //removes duplicates to map to keyboard (ex. plump) only one color for p.\r\n                    if ( acc[res] == 'green' || acc[res] == 'yellow') {\r\n                        \r\n                            // green and yellow get priority over gray so don't overwrite. \r\n                            // (ex blimp and guess is booby, first b is green so don't overwrite with second b which is gray.)\r\n                            // (ex blimp and guess is poppy, first p is yellow so don't overwrite with second or third p which is gray.)\r\n                        \r\n                    } else \r\n                    acc[res] = colorGuess[ind];\r\n                    return acc;\r\n                }, {});\r\n                // console.log(newKbColor)\r\n                setKbColor(prevResults => [\r\n                    ...prevResults,\r\n                    { ...newKbColor }\r\n                ])\r\n                const set = new Set(Object.values(newKbColor))\r\n                const first = [...set][0]\r\n                if (set.size == 1 && first == 'green') {\r\n                    setWin(true);\r\n                    localStorage.setItem('win', JSON.stringify(true))\r\n                    setGuessWon(guessRow.current);\r\n                    localStorage.setItem('guessWon', JSON.stringify( guessRow.current))\r\n                    return;\r\n                } else if ( place == \"sixth\" ){\r\n                    showAnswer(true);\r\n                    setLoss(true);\r\n                    return;\r\n                }\r\n                guessRow.current += 1;\r\n                localStorage.setItem('currentRow',JSON.stringify( guessRow.current)) // just display\r\n\r\n                refHash.current[place] = true;\r\n            }\r\n        // })\r\n       \r\n    }, [doneHash]);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('answer', JSON.stringify(answer))\r\n    }, [answer])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('loss', JSON.stringify(loss))\r\n    }, [loss])\r\n\r\n\r\n    useEffect(() => {\r\n        const existingDoneHash = JSON.parse(localStorage.getItem('doneHash')) || {\r\n            firstDone: false, \r\n            secondDone: false, \r\n            thirdDone: false, \r\n            fourthDone: false, \r\n            fifthDone: false, \r\n            sixthDone: false\r\n        };\r\n        if (JSON.stringify(existingDoneHash) !== JSON.stringify(doneHash)) localStorage.setItem('doneHash', JSON.stringify(doneHash));\r\n    }, [doneHash])\r\n\r\n    useEffect(() => {\r\n        const existingguessResults = JSON.parse(localStorage.getItem('guessResults')) || {\r\n            first: [], \r\n            second: [], \r\n            third: [], \r\n            fourth: [], \r\n            fifth: [], \r\n            sixth: []\r\n        };\r\n        if (JSON.stringify(existingguessResults) !== JSON.stringify(guessResults)) localStorage.setItem('guessResults', JSON.stringify(guessResults));\r\n        \r\n        const existingguesses = JSON.parse(localStorage.getItem('guesses')) || {\r\n            first: '', \r\n            second: '', \r\n            third: '', \r\n            fourth: '', \r\n            fifth: '', \r\n            sixth: ''\r\n        };\r\n        if (JSON.stringify(existingguesses) !== JSON.stringify(guesses)) localStorage.setItem('guesses', JSON.stringify(guesses));\r\n\r\n        console.log(guessResults)\r\n        \r\n    }, [guessResults])\r\n\r\n    useEffect(() => {\r\n        const existingKbColor = JSON.parse(localStorage.getItem('kbColor')) || [];\r\n        if (JSON.stringify(existingKbColor) !== JSON.stringify(kbColor)) localStorage.setItem('kbColor', JSON.stringify(kbColor));\r\n        \r\n    }, [kbColor])\r\n\r\n    const updated = useContext(KeyboardContext); // Solves: user can't refresh to gain infinite wins\r\n    useEffect(() => { // ref\r\n        const existingUpdated = JSON.parse(localStorage.getItem('updatedStats'));\r\n        if (existingUpdated) updated.current = existingUpdated;\r\n    }, [])\r\n    useEffect(() => { // update stats after game finish\r\n        if (( win ^ answer) && !updated.current) {\r\n            axios.post('http://localhost:8081/updateStats', {...userID, win: win, guessWon: guessWon})\r\n            .then(res => {\r\n                console.log(res.data.message)\r\n                updated.current = true;\r\n                localStorage.setItem('updatedStats', JSON.stringify(updated.current))\r\n            })\r\n            .catch(err => console.log(err));\r\n        }\r\n    }, [win, answer])\r\n\r\n    useEffect(() => { // 1 sec delay after win before stats is shown\r\n        if (win) {\r\n            setWinCompliment(true);\r\n            setTimeout(() => {\r\n                /* Code to run after 4 seconds */\r\n                // alert('wow you have brain')\r\n                setWinPage(true);\r\n            }, 1000)\r\n        }\r\n    }, [win])\r\n\r\n    if(winCompliment) { // show win compliment and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setWinCompliment(false);\r\n            }, 5000);\r\n    }\r\n\r\n    if(notEnough) { // show not enoguh letters prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setNotEnough(false);\r\n\r\n            }, 5000);\r\n\r\n    }\r\n\r\n    if (wrongWord) { // show wrong word prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setWrongWord(false);\r\n            }, 5000);\r\n    }\r\n\r\n    if (clickDisabledLeaderBoard) { // show disabled leadeboard prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setClickDisabledLeaderBoard(false);\r\n            }, 2000);\r\n    }\r\n\r\n    if (clickDisabledProfile) { // show disabled profile prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setClickDisabledProfile(false);\r\n            }, 2000);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (loss) { // 1 sec delay after loss before stats is shown\r\n            // setLoss(false);\r\n            setTimeout(function() {\r\n                setWinPage(true);\r\n            }, 1000);\r\n            \r\n        }\r\n    }, [loss])\r\n    \r\n\r\n    function whichCompliment() { // determines which compliment to give based on how many guesses player took\r\n        const firstTrueIndex = Object.entries(doneHash).findIndex(([key, value]) => !value);\r\n        // console.log(doneHash);\r\n        // console.log(firstTrueIndex);\r\n        if (firstTrueIndex != -1) {\r\n            return firstTrueIndex;\r\n        } else return 6;\r\n    }\r\n\r\n    const compliments = [ // compliment list\r\n        \"\",               \r\n        \"Genius\",        \r\n        \"Magnificent\",   \r\n        \"Impressive\",    \r\n        \"Splendid\",     \r\n        \"Great\",        \r\n        \"Phew\"          \r\n    ];\r\n\r\n    const {delay, setDelay} = useContext(KeyboardContext);\r\n    \r\n    useEffect(() => {\r\n        if (!winPage) {\r\n            setTimeout(function() {\r\n                setDelay(false);\r\n                }, 1000);\r\n        }\r\n    }, [winPage])\r\n\r\n    \r\n    \r\n\r\n  return (\r\n    <div className={`mx-auto w-[500px] opacity-100 mb-[110px] ${darkMode ? 'bg-[#121213] text-white' : 'bg-white text-black'} z-0`}>\r\n\r\n        {guestMode && <div className='absolute top-[60px] left-0 flex justify-center w-full'> <span className='text-green-600 text-2xl rounded-md p-1 font-bold tracking-widest'>Guest Mode</span> </div>}\r\n\r\n        {userMode && (!tutorial && !leaderBoard && !profilePage && !settings ) && <div className='absolute top-[60px] left-0 flex justify-center w-full z-0'> <button className={` ${darkMode ?'text-gray-200' : 'text-gray-500' } text-2xl rounded-md p-1 font-bold tracking-widest cursor-default`}>{userID.username}</button> </div>}\r\n\r\n        {winCompliment && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>{compliments[whichCompliment()] || ''}</span> </div>}\r\n\r\n        {notEnough && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Not enough letters</span> </div>}\r\n\r\n        {wrongWord && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Not in word list</span> </div>}\r\n\r\n        {clickDisabledLeaderBoard && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Login to access leaderboards</span> </div>}\r\n\r\n        {clickDisabledProfile && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Login to access profile</span> </div>}\r\n\r\n                \r\n        {/* {winPage && <div className=''> <Statistics /> </div>\r\n        } */}\r\n    {/* {winPage || delay &&  */}\r\n\r\n    {/* <ClickAwayListener onClickAway={handleClickAway}> */}\r\n\r\n        {(winPage || delay )&& \r\n        <Zoom in={winPage} timeout={500}>\r\n            <div className='absolute top-[250px] w-[500px] h-fit rounded-md shadow-xl z-20' >\r\n                <Statistics /> \r\n            </div>\r\n        </Zoom>\r\n        }\r\n\r\n\r\n                {/* {winPage && \r\n                <>  \r\n                    <div className='absolute top-[250px] w-[500px] h-fit rounded-md shadow-xl bg-white z-20' >\r\n                        <Statistics /> \r\n                    </div>\r\n                    <div className='absolute top-0 left-0 w-screen h-[1000px] bg-white/50 z-10'>\r\n                     </div>\r\n                </>\r\n                } */}\r\n\r\n        {/* </ClickAwayListener> */}\r\n\r\n    {/* } */}\r\n\r\n        {winPage && <div className={`absolute top-0 left-0 w-screen h-[930px] ${darkMode ? 'bg-black/50' : 'bg-white/50'}  z-10`}>\r\n            </div> }\r\n\r\n        {answer && <div className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>{correctWord}</span> </div>}\r\n\r\n        <div className='grid grid-cols-5 w-[340px] mx-auto gap-2'>\r\n\r\n            { //displays grid, simplified immensly\r\n            Object.entries(doneHash).map(([key, value]) => ( // maps how many rows\r\n                <div key={key}className='flex col-span-5 gap-2'>\r\n                    {value ? //through debuggin there is a time delay between which makes it so value is true but what is displayed is empty div because guessResults is not populated yet\r\n                    <>   {/* // The div the player guessed in would become 0 because while value == true, guessResults state hadn't updated and so it essentially rendered an empty div which cause the first div to shrink to h-0 and thus only the 2,3,4,5,6 divs rendered, thats why it looked like the bottom div disappeared.*/}\r\n                        {guessResults[key.split('Done')[0]] && guessResults[key.split('Done')[0]].length > 0 ?\r\n                            (guessResults[key.split('Done')[0]].map((res, ind) => ( // maps how many columns (user input)\r\n                                <button className= { `border-2 cursor-default ${\r\n                                    res == 'green' ? ( colorBlind ? 'CBgreen'  : 'green' ) :  \r\n                                    res == 'yellow' ? ( colorBlind ? 'CByellow' : 'yellow' ) : \r\n                                    ( darkMode ? 'DMgray' : 'gray' ) } \r\n                                    flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white` }>\r\n                                    {guesses[key.split('Done')[0]][ind] || ''}\r\n                                </button>\r\n                            )))  : [0,1,2,3,4].map((res) => ( // maps how many columns (empty input)\r\n                                guesses[key.split('Done')[0]][res]\r\n                                ? \r\n                                <div  className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                                    {guesses[key.split('Done')[0]][res]}\r\n                                </div>\r\n                                : \r\n                                <div  className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                                </div>\r\n                            \r\n                            ))\r\n                            }\r\n                    </>\r\n                    :   \r\n                    <>\r\n                        {[0,1,2,3,4].map((res) => ( // maps how many columns (empty input)\r\n                            guesses[key.split('Done')[0]][res]\r\n                            ? \r\n                            <div  className='border-2 border-[#565758] flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                                {guesses[key.split('Done')[0]][res]}\r\n                            </div>\r\n                            : \r\n                            <div  className={`border-2 ${darkMode && 'border-[#3a3a3c]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`}>\r\n                            </div>\r\n                        \r\n                        ))}\r\n                    </>\r\n                    }\r\n                </div>\r\n            ))\r\n        }\r\n        \r\n        </div>\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Grid"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,UAAU,QAAQ,OAAO;AACtE,OAAOC,GAAG,MAAM,yBAAyB;AACzC,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAO,YAAY;AACnB,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,oBAAoB;AACrC,SAASC,iBAAiB,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAIhE,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEf,MAAM;IAACC;EAAQ,CAAC,GAAGhB,UAAU,CAACE,eAAe,CAAC;EAC9C,MAAM;IAACe,UAAU;IAAEC;EAAa,CAAC,GAAGlB,UAAU,CAACE,eAAe,CAAC;EAC/D,MAAM;IAACiB,WAAW;IAAEC;EAAe,CAAC,GAAGpB,UAAU,CAACE,eAAe,CAAC;EAClE,MAAM;IAACmB,QAAQ;IAAEC;EAAY,CAAC,GAAGtB,UAAU,CAACE,eAAe,CAAC;EAC5D,MAAM;IAACqB,WAAW;IAAEC;EAAe,CAAC,GAAGxB,UAAU,CAACE,eAAe,CAAC;EAClE,MAAM;IAACuB,QAAQ;IAAEC;EAAY,CAAC,GAAG1B,UAAU,CAACE,eAAe,CAAC;EAC5D,MAAM;IAACyB,QAAQ;IAAEC;EAAW,CAAC,GAAG5B,UAAU,CAACE,eAAe,CAAC;EAC3D,MAAM;IAAC2B,MAAM;IAAEC;EAAS,CAAC,GAAG9B,UAAU,CAACE,eAAe,CAAC;EACvD,MAAM;IAAC6B,OAAO;IAAEC;EAAU,CAAC,GAAGhC,UAAU,CAACE,eAAe,CAAC;EACzD,MAAM;IAAC+B,OAAO;IAAEC;EAAU,CAAC,GAAGlC,UAAU,CAACE,eAAe,CAAC;EACzD,MAAM;IAACiC,QAAQ;IAAEC;EAAW,CAAC,GAAGpC,UAAU,CAACE,eAAe,CAAC;EAC3D,MAAM,CAACmC,aAAa,EAAEC,gBAAgB,CAAC,GAAGxC,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM;IAACyC,GAAG;IAAEC;EAAM,CAAC,GAAGxC,UAAU,CAACE,eAAe,CAAC;EACjD,MAAM;IAACuC,MAAM;IAAEC;EAAU,CAAC,GAAG1C,UAAU,CAACE,eAAe,CAAC;EACxD,MAAM;IAACyC,SAAS;IAAEC;EAAY,CAAC,GAAG5C,UAAU,CAACE,eAAe,CAAC;EAC7D,MAAM;IAAC2C,SAAS;IAAEC;EAAY,CAAC,GAAG9C,UAAU,CAACE,eAAe,CAAC;EAC7D,MAAM;IAAC6C,UAAU;IAAEC;EAAa,CAAC,GAAGhD,UAAU,CAACE,eAAe,CAAC;EAC/D,MAAM;IAAC+C,QAAQ;IAAEC;EAAW,CAAC,GAAGlD,UAAU,CAACE,eAAe,CAAC;EAC3D,MAAM;IAACiD,YAAY;IAAEC;EAAe,CAAC,GAAGpD,UAAU,CAACE,eAAe,CAAC;EACnE,MAAM,CAACmD,YAAY,EAAEC,eAAe,CAAC,GAAGxD,QAAQ,CAAC,MAAM;IACnD,MAAMyD,oBAAoB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC7E,OAAOJ,oBAAoB,IAAI;MAC3BK,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACX,CAAC;EACL,CAAC,CAAC;EAEF,MAAMC,OAAO,GAAGnE,MAAM,CAAC;IAAC6D,KAAK,EAAE,KAAK;IAAEC,MAAM,EAAE,KAAK;IAAEC,KAAK,EAAE,KAAK;IAAEC,MAAM,EAAE,KAAK;IAAEC,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;EAC9G,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGtE,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACuE,WAAW,EAAEC,cAAc,CAAC,GAAGxE,QAAQ,CAAC,MAAM;IACjD,MAAMyE,mBAAmB,GAAGf,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC3E,OAAOY,mBAAmB,IAAI,EAAE;EACpC,CAAC,CAAC;EACF,MAAM;IAACC,OAAO;IAAEC;EAAU,CAAC,GAAGzE,UAAU,CAACE,eAAe,CAAC;EACzD,MAAM;IAACwE,wBAAwB;IAAEC;EAA2B,CAAC,GAAG3E,UAAU,CAACE,eAAe,CAAC;EAC3F,MAAM;IAAC0E,oBAAoB;IAAEC;EAAuB,CAAC,GAAG7E,UAAU,CAACE,eAAe,CAAC;EACnF,MAAM;IAAC4E,SAAS;IAAEC;EAAY,CAAC,GAAG/E,UAAU,CAACE,eAAe,CAAC;EAC7D,MAAM;IAAC8E,WAAW;IAAEC;EAAc,CAAC,GAAGjF,UAAU,CAACE,eAAe,CAAC;EACjE,MAAM,CAACgF,IAAI,EAAEC,OAAO,CAAC,GAAGrF,QAAQ,CAAC,MAAM;IACnC,MAAMsF,YAAY,GAAG5B,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC7D,OAAOyB,YAAY,IAAI,KAAK;EAChC,CAAC,CAAC;EAIFvF,SAAS,CAAC,MAAM;IAAE;IACd,MAAMwF,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACtF,GAAG,CAAC;MACjC,MAAMuF,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,MAAM,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;MAC/C3C,aAAa,CAACyC,KAAK,CAAC;IACxB,CAAC;IACDJ,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAENxF,SAAS,CAAC,MAAM;IAAE;IACd,IAAIkD,UAAU,CAAC6C,MAAM,GAAG,CAAC,IAAI,CAACvB,WAAW,EAAE;MAC3CC,cAAc,CAACvB,UAAU,CAAC8C,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;MAC1E;MACA;MACA5B,UAAU,CAAC,KAAK,CAAC;IACjB;EACJ,CAAC,EAAE,CAACrB,UAAU,CAAC,CAAC;EAEhBlD,SAAS,CAAC,MAAM;IAAE;IACd,IAAIwE,WAAW,EACX4B,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAG7B,WAAW,CAAC;IACjD,MAAME,mBAAmB,GAAGf,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE;IACjF,IAAIH,IAAI,CAAC2C,SAAS,CAAC5B,mBAAmB,CAAC,KAAKf,IAAI,CAAC2C,SAAS,CAAC9B,WAAW,CAAC,EAAEX,YAAY,CAAC0C,OAAO,CAAC,aAAa,EAAE5C,IAAI,CAAC2C,SAAS,CAAC9B,WAAW,CAAC,CAAC;EACjJ,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAGjBxE,SAAS,CAAC,MAAM;IAAE;IACd,MAAMwG,OAAO,GAAIC,KAAK,IAAK;MACvB,IAAIA,KAAK,CAACC,GAAG,KAAK,WAAW,EAAE;QAC/B,IAAI,CAACtD,QAAQ,CAACuD,SAAS,IAAIxB,WAAW,GAAG,CAAC,EAAE;UACxCC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE9C,KAAK,EAAG8C,SAAS,CAAC9C,KAAK,CAAC+B,KAAK,CAAC,CAAC,EAAEe,SAAS,CAAC9C,KAAK,CAACgC,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QAC9G,CAAC,MACI,IAAI,CAAC3C,QAAQ,CAAC0D,UAAU,IAAI3B,WAAW,GAAG,CAAC,EAAE;UAC9CC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE7C,MAAM,EAAG6C,SAAS,CAAC7C,MAAM,CAAC8B,KAAK,CAAC,CAAC,EAAEe,SAAS,CAAC7C,MAAM,CAAC+B,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QACjH,CAAC,MACI,IAAI,CAAC3C,QAAQ,CAAC2D,SAAS,IAAI5B,WAAW,GAAG,CAAC,EAAE;UAC7CC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE5C,KAAK,EAAG4C,SAAS,CAAC5C,KAAK,CAAC6B,KAAK,CAAC,CAAC,EAAEe,SAAS,CAAC5C,KAAK,CAAC8B,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QAC9G,CAAC,MACI,IAAI,CAAC3C,QAAQ,CAAC4D,UAAU,IAAI7B,WAAW,GAAG,CAAC,EAAE;UAC9CC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE3C,MAAM,EAAG2C,SAAS,CAAC3C,MAAM,CAAC4B,KAAK,CAAC,CAAC,EAAEe,SAAS,CAAC3C,MAAM,CAAC6B,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QACjH,CAAC,MACI,IAAI,CAAC3C,QAAQ,CAAC6D,SAAS,IAAI9B,WAAW,GAAG,CAAC,EAAE;UAC7CC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE1C,KAAK,EAAG0C,SAAS,CAAC1C,KAAK,CAAC2B,KAAK,CAAC,CAAC,EAAEe,SAAS,CAAC1C,KAAK,CAAC4B,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QAC9G,CAAC,MACI,IAAI,CAAC3C,QAAQ,CAAC8D,SAAS,IAAI/B,WAAW,GAAG,CAAC,EAAE;UAC7CC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAEzC,KAAK,EAAGyC,SAAS,CAACzC,KAAK,CAAC0B,KAAK,CAAC,CAAC,EAAEe,SAAS,CAACzC,KAAK,CAAC2B,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QAC9G;MACA,CAAC,MAAM,IAAIU,KAAK,CAACC,GAAG,CAACS,KAAK,CAAC,UAAU,CAAC,IAAIV,KAAK,CAACC,GAAG,CAACX,MAAM,KAAK,CAAC,EAAE;QAClE,IAAI,CAAC3C,QAAQ,CAACuD,SAAS,IAAIxB,WAAW,GAAG,CAAC,EAAE;UAExCC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACA;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE9C,KAAK,EAAG8C,SAAS,CAAC9C,KAAK,GAAG0C,KAAK,CAACC,GAAG,CAACP,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACnG,CAAC,MACI,IAAI,CAAC/C,QAAQ,CAAC0D,UAAU,IAAI3B,WAAW,GAAG,CAAC,EAAE;UAC9CC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE7C,MAAM,EAAG6C,SAAS,CAAC7C,MAAM,GAAGyC,KAAK,CAACC,GAAG,CAACP,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACrG,CAAC,MACI,IAAI,CAAC/C,QAAQ,CAAC2D,SAAS,IAAI5B,WAAW,GAAG,CAAC,EAAE;UAC7CC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE5C,KAAK,EAAG4C,SAAS,CAAC5C,KAAK,GAAGwC,KAAK,CAACC,GAAG,CAACP,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACnG,CAAC,MACI,IAAI,CAAC/C,QAAQ,CAAC4D,UAAU,IAAI7B,WAAW,GAAG,CAAC,EAAE;UAC9CC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE3C,MAAM,EAAG2C,SAAS,CAAC3C,MAAM,GAAGuC,KAAK,CAACC,GAAG,CAACP,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACrG,CAAC,MACI,IAAI,CAAC/C,QAAQ,CAAC6D,SAAS,IAAI9B,WAAW,GAAG,CAAC,EAAE;UAC7CC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE1C,KAAK,EAAG0C,SAAS,CAAC1C,KAAK,GAAGsC,KAAK,CAACC,GAAG,CAACP,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACnG,CAAC,MACI,IAAI,CAAC/C,QAAQ,CAAC8D,SAAS,IAAI/B,WAAW,GAAG,CAAC,EAAE;UAC7CC,cAAc,CAACwB,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;UAChD;UACAhC,UAAU,CAAEiC,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAEzC,KAAK,EAAGyC,SAAS,CAACzC,KAAK,GAAGqC,KAAK,CAACC,GAAG,CAACP,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACnG;MACA;IACJ,CAAC;IACD,IAAG,CAACzD,GAAG,EAAE;MACL;MACA0E,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEb,OAAO,CAAC;;MAE7C;MACA,OAAO,MAAM;QACbY,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEd,OAAO,CAAC;MAChD,CAAC;IACL;EACJ,CAAC,EAAE,CAAC9D,GAAG,EAAEyC,WAAW,EAAE/B,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAElCpD,SAAS,CAAC,MAAM;IAAE;IACd,MAAMwG,OAAO,GAAIC,KAAK,IAAK;MACvB,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;QACvB,IAAI,CAACtD,QAAQ,CAACuD,SAAS,EAAE;UACrB,IAAIrD,YAAY,CAACiE,aAAa,EAAE;YAC5B,IAAIrE,UAAU,CAACsE,QAAQ,CAAC7C,OAAO,CAACZ,KAAK,CAAC0D,WAAW,CAAC,CAAC,CAAC,EAAE;cAClDpE,WAAW,CAACqE,QAAQ,KAAK;gBAAE,GAAGA,QAAQ;gBAAEf,SAAS,EAAE;cAAI,CAAC,CAAC,CAAC;cAC1DvB,cAAc,CAAC,CAAC,CAAC;YACrB,CAAC,MAAMnC,YAAY,CAAC,IAAI,CAAC;UAC7B,CAAC,MAAMF,YAAY,CAAC,IAAI,CAAC;QAC7B,CAAC,MACI,IAAI,CAACK,QAAQ,CAAC0D,UAAU,EAAE;UAC3B,IAAIxD,YAAY,CAACqE,cAAc,EAAE;YAC7B,IAAIzE,UAAU,CAACsE,QAAQ,CAAC7C,OAAO,CAACX,MAAM,CAACyD,WAAW,CAAC,CAAC,CAAC,EAAE;cACnDpE,WAAW,CAACqE,QAAQ,KAAK;gBAAE,GAAGA,QAAQ;gBAAEZ,UAAU,EAAE;cAAI,CAAC,CAAC,CAAC;cAC3D1B,cAAc,CAAC,CAAC,CAAC;YACrB,CAAC,MAAMnC,YAAY,CAAC,IAAI,CAAC;UAC7B,CAAC,MAAMF,YAAY,CAAC,IAAI,CAAC;QAC7B,CAAC,MACI,IAAI,CAACK,QAAQ,CAAC2D,SAAS,EAAE;UAC1B,IAAIzD,YAAY,CAACsE,aAAa,EAAE;YAC5B,IAAI1E,UAAU,CAACsE,QAAQ,CAAC7C,OAAO,CAACV,KAAK,CAACwD,WAAW,CAAC,CAAC,CAAC,EAAE;cAClDpE,WAAW,CAACqE,QAAQ,KAAK;gBAAE,GAAGA,QAAQ;gBAAEX,SAAS,EAAE;cAAI,CAAC,CAAC,CAAC;cAC1D3B,cAAc,CAAC,CAAC,CAAC;YACrB,CAAC,MAAMnC,YAAY,CAAC,IAAI,CAAC;UAC7B,CAAC,MAAMF,YAAY,CAAC,IAAI,CAAC;QAC7B,CAAC,MACI,IAAI,CAACK,QAAQ,CAAC4D,UAAU,EAAE;UAC3B,IAAI1D,YAAY,CAACuE,cAAc,EAAE;YAC7B,IAAI3E,UAAU,CAACsE,QAAQ,CAAC7C,OAAO,CAACT,MAAM,CAACuD,WAAW,CAAC,CAAC,CAAC,EAAE;cACnDpE,WAAW,CAACqE,QAAQ,KAAK;gBAAE,GAAGA,QAAQ;gBAAEV,UAAU,EAAE;cAAI,CAAC,CAAC,CAAC;cAC3D5B,cAAc,CAAC,CAAC,CAAC;YACrB,CAAC,MAAMnC,YAAY,CAAC,IAAI,CAAC;UAC7B,CAAC,MAAMF,YAAY,CAAC,IAAI,CAAC;QAC7B,CAAC,MACI,IAAI,CAACK,QAAQ,CAAC6D,SAAS,EAAE;UAC1B,IAAI3D,YAAY,CAACwE,aAAa,EAAE;YAC5B,IAAI5E,UAAU,CAACsE,QAAQ,CAAC7C,OAAO,CAACR,KAAK,CAACsD,WAAW,CAAC,CAAC,CAAC,EAAE;cAClDpE,WAAW,CAACqE,QAAQ,KAAK;gBAAE,GAAGA,QAAQ;gBAAET,SAAS,EAAE;cAAI,CAAC,CAAC,CAAC;cAC1D7B,cAAc,CAAC,CAAC,CAAC;YACrB,CAAC,MAAMnC,YAAY,CAAC,IAAI,CAAC;UAC7B,CAAC,MAAMF,YAAY,CAAC,IAAI,CAAC;QAC7B,CAAC,MACI,IAAI,CAACK,QAAQ,CAAC8D,SAAS,EAAE;UAC1B,IAAI5D,YAAY,CAACyE,aAAa,EAAE;YAC5B,IAAI7E,UAAU,CAACsE,QAAQ,CAAC7C,OAAO,CAACP,KAAK,CAACqD,WAAW,CAAC,CAAC,CAAC,EAAE;cAClDpE,WAAW,CAACqE,QAAQ,KAAK;gBAAE,GAAGA,QAAQ;gBAAER,SAAS,EAAE;cAAI,CAAC,CAAC,CAAC;cAC1D9B,cAAc,CAAC,CAAC,CAAC;YACrB,CAAC,MAAMnC,YAAY,CAAC,IAAI,CAAC;UAC7B,CAAC,MAAMF,YAAY,CAAC,IAAI,CAAC;QAC7B;MACJ;IACJ,CAAC;IACD,IAAI,CAACL,GAAG,EAAE;MACN0E,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEb,OAAO,CAAC;MAC7C,OAAO,MAAM;QACbY,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEd,OAAO,CAAC;MAChD,CAAC;IACL;EACJ,CAAC,EAAC,CAAC9D,GAAG,EAAEU,QAAQ,EAAEE,YAAY,CAAC,CAAC;EAEhC,MAAM0E,aAAa,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;IAAE;IACpC,IAAIC,UAAU,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAAClC,MAAM,EAAEqC,CAAC,EAAE,EAAE;MAClC,IAAIH,IAAI,CAACG,CAAC,CAAC,IAAIF,IAAI,CAACE,CAAC,CAAC,EAAE;QACpBD,UAAU,CAACE,IAAI,CAACD,CAAC,CAAC;MACtB;IACJ;IAAE,OAAOD,UAAU;EACvB,CAAC;EAEDnI,SAAS,CAAC,MAAM;IAAE;IACd;IACA,IAAI,CAACoD,QAAQ,CAACuD,SAAS,EAAE;MACrB,IAAIhC,OAAO,CAACZ,KAAK,CAACgC,MAAM,IAAI,CAAC,EAAExC,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAEf,aAAa,EAAE;MAAI,CAAC,CAAC,CAAC,CAAC,KACrGhE,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAEf,aAAa,EAAE;MAAK,CAAC,CAAC,CAAC;IACpF,CAAC,MACI,IAAI,CAACnE,QAAQ,CAAC0D,UAAU,EAAE;MAC3B,IAAInC,OAAO,CAACX,MAAM,CAAC+B,MAAM,IAAI,CAAC,EAAExC,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAEX,cAAc,EAAE;MAAI,CAAC,CAAC,CAAC,CAAC,KACvGpE,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAEX,cAAc,EAAE;MAAK,CAAC,CAAC,CAAC;IACrF,CAAC,MACI,IAAI,CAACvE,QAAQ,CAAC2D,SAAS,EAAE;MAC1B,IAAIpC,OAAO,CAACV,KAAK,CAAC8B,MAAM,IAAI,CAAC,EAAExC,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAEV,aAAa,EAAE;MAAI,CAAC,CAAC,CAAC,CAAC,KACrGrE,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAEV,aAAa,EAAE;MAAK,CAAC,CAAC,CAAC;IACpF,CAAC,MACI,IAAI,CAACxE,QAAQ,CAAC4D,UAAU,EAAE;MAC3B,IAAIrC,OAAO,CAACT,MAAM,CAAC6B,MAAM,IAAI,CAAC,EAAExC,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAET,cAAc,EAAE;MAAI,CAAC,CAAC,CAAC,CAAC,KACvGtE,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAET,cAAc,EAAE;MAAK,CAAC,CAAC,CAAC;IACrF,CAAC,MACI,IAAI,CAACzE,QAAQ,CAAC6D,SAAS,EAAE;MAC1B,IAAItC,OAAO,CAACR,KAAK,CAAC4B,MAAM,IAAI,CAAC,EAAExC,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAER,aAAa,EAAE;MAAI,CAAC,CAAC,CAAC,CAAC,KACrGvE,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAER,aAAa,EAAE;MAAK,CAAC,CAAC,CAAC;IACpF,CAAC,MACI,IAAI,CAAC1E,QAAQ,CAAC8D,SAAS,EAAE;MAC1B,IAAIvC,OAAO,CAACP,KAAK,CAAC2B,MAAM,IAAI,CAAC,EAAExC,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAEP,aAAa,EAAE;MAAI,CAAC,CAAC,CAAC,CAAC,KACrGxE,eAAe,CAAC+E,YAAY,KAAK;QAAE,GAAGA,YAAY;QAAEP,aAAa,EAAE;MAAK,CAAC,CAAC,CAAC;IACpF;EACJ,CAAC,EAAE,CAACpD,OAAO,CAAC,CAAC;EAEb,MAAM4D,WAAW,GAAGA,CAACC,SAAS,EAAEC,WAAW,KAAK;IAAE;IAC9C,MAAMC,UAAU,GAAGV,aAAa,CAACxD,WAAW,EAAEiE,WAAW,CAAC,CAAC,CAAC;IAC5D,IAAIE,MAAM,GAAG,CAAC;IACd,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,UAAU,CAAC3C,MAAM,EAAEqC,CAAC,EAAE,EAAE;MACxCI,SAAS,GAAGA,SAAS,CAAC1C,KAAK,CAAC,CAAC,EAAE,CAAC8C,QAAQ,CAACF,UAAU,CAACN,CAAC,CAAC,CAAC,GAAGO,MAAM,CAAC,CAAC,GAAGH,SAAS,CAAC1C,KAAK,CAAC8C,QAAQ,CAACF,UAAU,CAACN,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGO,MAAM,CAAC;MAC1H;MACAA,MAAM,EAAE;IACZ;IACA,OAAOH,SAAS;EACpB,CAAC;EAED,MAAMK,SAAS,GAAGA,CAACL,SAAS,EAAEM,MAAM,EAAEC,GAAG,KAAK;IAAE;IAC5C,IAAID,MAAM,IAAItE,WAAW,CAACuE,GAAG,CAAC,EAAE;MAC5B,OAAO,OAAO;IAClB,CAAC,MAAM,IAAIP,SAAS,CAAChB,QAAQ,CAACsB,MAAM,CAAC,EAAE;MACnC,OAAO,QAAQ;IACnB,CAAC,MAAM;MACH,OAAO,MAAM;IACjB;EACJ,CAAC;EAED,IAAIE,QAAQ;EAEZ,MAAMC,YAAY,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAAE;IACjC,IAAI3F,YAAY,CAACO,KAAK,EAAE;MACpB,MAAMqF,WAAW,GAAGJ,QAAQ;MAC5BA,QAAQ,GAAGA,QAAQ,CAACK,OAAO,CAACH,GAAG,EAAE,EAAE,CAAC;MACpC,OAAOL,SAAS,CAACO,WAAW,EAAEF,GAAG,EAAEC,GAAG,CAAC,EAAC;IAC5C;EACJ,CAAC;EAED,MAAMG,QAAQ,GAAGpJ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE5BF,SAAS,CAAC,MAAM;IAAE;IACd,MAAMuJ,gBAAgB,GAAG5F,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;IACvE,IAAIyF,gBAAgB,EAAED,QAAQ,CAACE,OAAO,GAAGD,gBAAgB;EAC7D,CAAC,EAAE,EAAE,CAAC;EAENvJ,SAAS,CAAC,MAAM;IACZoG,OAAO,CAACC,GAAG,CAACjD,QAAQ,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMqG,SAAS,GAAGvJ,MAAM,CAAC,KAAK,CAAC;EAC/BF,SAAS,CAAC,MAAM;IAAE;IACd,IAAI,CAACyJ,SAAS,CAACD,OAAO,EAAE;MAAE;MACtBC,SAAS,CAACD,OAAO,GAAG,IAAI;MACxB;IACJ;IACA,MAAME,WAAW,GAAGC,MAAM,CAACC,OAAO,CAACxG,QAAQ,CAAC,CAACyG,MAAM,CAAC,CAACC,GAAG,EAAE,CAACpD,GAAG,EAAEqD,KAAK,CAAC,KAAK;MACvE,OAAOA,KAAK,GAAGrD,GAAG,GAAGoD,GAAG;IAC5B,CAAC,EAAE,CAAC,CAAC;;IAEL;;IAEI,MAAME,KAAK,GAAGN,WAAW,CAAC7D,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAC;IAC3C,IAAK6D,WAAW,KAAK,CAAC,IAAI,CAACrF,OAAO,CAACmF,OAAO,CAACQ,KAAK,CAAC,EAAE;MAAE;;MAEjDhB,QAAQ,GAAGT,WAAW,CAAC/D,WAAW,EAAEG,OAAO,CAACqF,KAAK,CAAC,CAAC;MACnD,MAAMC,UAAU,GAAGtF,OAAO,CAACqF,KAAK,CAAC,CAACnE,KAAK,CAAC,EAAE,CAAC,CAACqE,GAAG,CAAC,CAAChB,GAAG,EAAEC,GAAG;MAAO;MAC5DF,YAAY,CAACC,GAAG,EAAEC,GAAG,CACxB,CAAC;MACF1F,eAAe,CAAC0G,WAAW,KAAK;QAC5B,GAAGA,WAAW;QACd,CAACH,KAAK,GAAI,CAAC,GAAGG,WAAW,CAACH,KAAK,CAAC,EAAE,GAAGC,UAAU;MACnD,CAAC,CAAC,CAAC;MACH;MACA;MACA,IAAIG,UAAU,GAAGzF,OAAO,CAACqF,KAAK,CAAC,CAACnE,KAAK,CAAC,EAAE,CAAC,CAACgE,MAAM,CAAC,CAACC,GAAG,EAAEZ,GAAG,EAAEC,GAAG,KAAK;QAAE;QAClE,IAAKW,GAAG,CAACZ,GAAG,CAAC,IAAI,OAAO,IAAIY,GAAG,CAACZ,GAAG,CAAC,IAAI,QAAQ,EAAE;;UAE1C;UACA;UACA;QAAA,CAEP,MACDY,GAAG,CAACZ,GAAG,CAAC,GAAGe,UAAU,CAACd,GAAG,CAAC;QAC1B,OAAOW,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;MACN;MACA3H,UAAU,CAACgI,WAAW,IAAI,CACtB,GAAGA,WAAW,EACd;QAAE,GAAGC;MAAW,CAAC,CACpB,CAAC;MACF,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACX,MAAM,CAACY,MAAM,CAACH,UAAU,CAAC,CAAC;MAC9C,MAAMrG,KAAK,GAAG,CAAC,GAAGsG,GAAG,CAAC,CAAC,CAAC,CAAC;MACzB,IAAIA,GAAG,CAACG,IAAI,IAAI,CAAC,IAAIzG,KAAK,IAAI,OAAO,EAAE;QACnCpB,MAAM,CAAC,IAAI,CAAC;QACZkB,YAAY,CAAC0C,OAAO,CAAC,KAAK,EAAE5C,IAAI,CAAC2C,SAAS,CAAC,IAAI,CAAC,CAAC;QACjD/D,WAAW,CAAC+G,QAAQ,CAACE,OAAO,CAAC;QAC7B3F,YAAY,CAAC0C,OAAO,CAAC,UAAU,EAAE5C,IAAI,CAAC2C,SAAS,CAAEgD,QAAQ,CAACE,OAAO,CAAC,CAAC;QACnE;MACJ,CAAC,MAAM,IAAKQ,KAAK,IAAI,OAAO,EAAE;QAC1BnH,UAAU,CAAC,IAAI,CAAC;QAChByC,OAAO,CAAC,IAAI,CAAC;QACb;MACJ;MACAgE,QAAQ,CAACE,OAAO,IAAI,CAAC;MACrB3F,YAAY,CAAC0C,OAAO,CAAC,YAAY,EAAC5C,IAAI,CAAC2C,SAAS,CAAEgD,QAAQ,CAACE,OAAO,CAAC,CAAC,EAAC;;MAErEnF,OAAO,CAACmF,OAAO,CAACQ,KAAK,CAAC,GAAG,IAAI;IACjC;IACJ;EAEJ,CAAC,EAAE,CAAC5G,QAAQ,CAAC,CAAC;EAEdpD,SAAS,CAAC,MAAM;IACZ6D,YAAY,CAAC0C,OAAO,CAAC,QAAQ,EAAE5C,IAAI,CAAC2C,SAAS,CAAC1D,MAAM,CAAC,CAAC;EAC1D,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ5C,SAAS,CAAC,MAAM;IACZ6D,YAAY,CAAC0C,OAAO,CAAC,MAAM,EAAE5C,IAAI,CAAC2C,SAAS,CAACjB,IAAI,CAAC,CAAC;EACtD,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAGVrF,SAAS,CAAC,MAAM;IACZ,MAAMyK,gBAAgB,GAAG9G,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI;MACrE6C,SAAS,EAAE,KAAK;MAChBG,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,KAAK;MAChBC,SAAS,EAAE;IACf,CAAC;IACD,IAAIvD,IAAI,CAAC2C,SAAS,CAACmE,gBAAgB,CAAC,KAAK9G,IAAI,CAAC2C,SAAS,CAAClD,QAAQ,CAAC,EAAES,YAAY,CAAC0C,OAAO,CAAC,UAAU,EAAE5C,IAAI,CAAC2C,SAAS,CAAClD,QAAQ,CAAC,CAAC;EACjI,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEdpD,SAAS,CAAC,MAAM;IACZ,MAAM0D,oBAAoB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI;MAC7EC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACX,CAAC;IACD,IAAIT,IAAI,CAAC2C,SAAS,CAAC5C,oBAAoB,CAAC,KAAKC,IAAI,CAAC2C,SAAS,CAAC9C,YAAY,CAAC,EAAEK,YAAY,CAAC0C,OAAO,CAAC,cAAc,EAAE5C,IAAI,CAAC2C,SAAS,CAAC9C,YAAY,CAAC,CAAC;IAE7I,MAAMkH,eAAe,GAAG/G,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI;MACnEC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACX,CAAC;IACD,IAAIT,IAAI,CAAC2C,SAAS,CAACoE,eAAe,CAAC,KAAK/G,IAAI,CAAC2C,SAAS,CAAC3B,OAAO,CAAC,EAAEd,YAAY,CAAC0C,OAAO,CAAC,SAAS,EAAE5C,IAAI,CAAC2C,SAAS,CAAC3B,OAAO,CAAC,CAAC;IAEzHyB,OAAO,CAACC,GAAG,CAAC7C,YAAY,CAAC;EAE7B,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElBxD,SAAS,CAAC,MAAM;IACZ,MAAM2K,eAAe,GAAGhH,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE;IACzE,IAAIH,IAAI,CAAC2C,SAAS,CAACqE,eAAe,CAAC,KAAKhH,IAAI,CAAC2C,SAAS,CAACpE,OAAO,CAAC,EAAE2B,YAAY,CAAC0C,OAAO,CAAC,SAAS,EAAE5C,IAAI,CAAC2C,SAAS,CAACpE,OAAO,CAAC,CAAC;EAE7H,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,MAAM0I,OAAO,GAAGzK,UAAU,CAACE,eAAe,CAAC,CAAC,CAAC;EAC7CL,SAAS,CAAC,MAAM;IAAE;IACd,MAAM6K,eAAe,GAAGlH,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC;IACxE,IAAI+G,eAAe,EAAED,OAAO,CAACpB,OAAO,GAAGqB,eAAe;EAC1D,CAAC,EAAE,EAAE,CAAC;EACN7K,SAAS,CAAC,MAAM;IAAE;IACd,IAAM0C,GAAG,GAAGE,MAAM,IAAK,CAACgI,OAAO,CAACpB,OAAO,EAAE;MACrC9I,KAAK,CAACoK,IAAI,CAAC,mCAAmC,EAAE;QAAC,GAAG9I,MAAM;QAAEU,GAAG,EAAEA,GAAG;QAAEJ,QAAQ,EAAEA;MAAQ,CAAC,CAAC,CACzFyI,IAAI,CAAC7B,GAAG,IAAI;QACT9C,OAAO,CAACC,GAAG,CAAC6C,GAAG,CAAC8B,IAAI,CAACC,OAAO,CAAC;QAC7BL,OAAO,CAACpB,OAAO,GAAG,IAAI;QACtB3F,YAAY,CAAC0C,OAAO,CAAC,cAAc,EAAE5C,IAAI,CAAC2C,SAAS,CAACsE,OAAO,CAACpB,OAAO,CAAC,CAAC;MACzE,CAAC,CAAC,CACD0B,KAAK,CAACC,GAAG,IAAI/E,OAAO,CAACC,GAAG,CAAC8E,GAAG,CAAC,CAAC;IACnC;EACJ,CAAC,EAAE,CAACzI,GAAG,EAAEE,MAAM,CAAC,CAAC;EAEjB5C,SAAS,CAAC,MAAM;IAAE;IACd,IAAI0C,GAAG,EAAE;MACLD,gBAAgB,CAAC,IAAI,CAAC;MACtB2I,UAAU,CAAC,MAAM;QACb;QACA;QACA/I,UAAU,CAAC,IAAI,CAAC;MACpB,CAAC,EAAE,IAAI,CAAC;IACZ;EACJ,CAAC,EAAE,CAACK,GAAG,CAAC,CAAC;EAET,IAAGF,aAAa,EAAE;IAAE;IAChB4I,UAAU,CAAC,YAAW;MAClBhE,QAAQ,CAACiE,cAAc,CAAC,SAAS,CAAC,KAAKjE,QAAQ,CAACiE,cAAc,CAAC,SAAS,CAAC,CAACC,EAAE,GAAG,KAAK,CAAC;MACrF7I,gBAAgB,CAAC,KAAK,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC;EAChB;EAEA,IAAGK,SAAS,EAAE;IAAE;IACZsI,UAAU,CAAC,YAAW;MAClBhE,QAAQ,CAACiE,cAAc,CAAC,SAAS,CAAC,KAAKjE,QAAQ,CAACiE,cAAc,CAAC,SAAS,CAAC,CAACC,EAAE,GAAG,KAAK,CAAC;MACrFvI,YAAY,CAAC,KAAK,CAAC;IAEnB,CAAC,EAAE,IAAI,CAAC;EAEhB;EAEA,IAAIC,SAAS,EAAE;IAAE;IACboI,UAAU,CAAC,YAAW;MAClBhE,QAAQ,CAACiE,cAAc,CAAC,SAAS,CAAC,KAAKjE,QAAQ,CAACiE,cAAc,CAAC,SAAS,CAAC,CAACC,EAAE,GAAG,KAAK,CAAC;MACrFrI,YAAY,CAAC,KAAK,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC;EAChB;EAEA,IAAI4B,wBAAwB,EAAE;IAAE;IAC5BuG,UAAU,CAAC,YAAW;MAClBhE,QAAQ,CAACiE,cAAc,CAAC,SAAS,CAAC,KAAKjE,QAAQ,CAACiE,cAAc,CAAC,SAAS,CAAC,CAACC,EAAE,GAAG,KAAK,CAAC;MACrFxG,2BAA2B,CAAC,KAAK,CAAC;IAClC,CAAC,EAAE,IAAI,CAAC;EAChB;EAEA,IAAIC,oBAAoB,EAAE;IAAE;IACxBqG,UAAU,CAAC,YAAW;MAClBhE,QAAQ,CAACiE,cAAc,CAAC,SAAS,CAAC,KAAKjE,QAAQ,CAACiE,cAAc,CAAC,SAAS,CAAC,CAACC,EAAE,GAAG,KAAK,CAAC;MACrFtG,uBAAuB,CAAC,KAAK,CAAC;IAC9B,CAAC,EAAE,IAAI,CAAC;EAChB;EAEAhF,SAAS,CAAC,MAAM;IACZ,IAAIqF,IAAI,EAAE;MAAE;MACR;MACA+F,UAAU,CAAC,YAAW;QAClB/I,UAAU,CAAC,IAAI,CAAC;MACpB,CAAC,EAAE,IAAI,CAAC;IAEZ;EACJ,CAAC,EAAE,CAACgD,IAAI,CAAC,CAAC;EAGV,SAASkG,eAAeA,CAAA,EAAG;IAAE;IACzB,MAAMC,cAAc,GAAG7B,MAAM,CAACC,OAAO,CAACxG,QAAQ,CAAC,CAACqI,SAAS,CAAC,CAAC,CAAC/E,GAAG,EAAEqD,KAAK,CAAC,KAAK,CAACA,KAAK,CAAC;IACnF;IACA;IACA,IAAIyB,cAAc,IAAI,CAAC,CAAC,EAAE;MACtB,OAAOA,cAAc;IACzB,CAAC,MAAM,OAAO,CAAC;EACnB;EAEA,MAAME,WAAW,GAAG;EAAE;EAClB,EAAE,EACF,QAAQ,EACR,aAAa,EACb,YAAY,EACZ,UAAU,EACV,OAAO,EACP,MAAM,CACT;EAED,MAAM;IAACC,KAAK;IAAEC;EAAQ,CAAC,GAAGzL,UAAU,CAACE,eAAe,CAAC;EAErDL,SAAS,CAAC,MAAM;IACZ,IAAI,CAACoC,OAAO,EAAE;MACVgJ,UAAU,CAAC,YAAW;QAClBQ,QAAQ,CAAC,KAAK,CAAC;MACf,CAAC,EAAE,IAAI,CAAC;IAChB;EACJ,CAAC,EAAE,CAACxJ,OAAO,CAAC,CAAC;EAKf,oBACEtB,OAAA;IAAK+K,SAAS,EAAE,4CAA4C1K,QAAQ,GAAG,yBAAyB,GAAG,qBAAqB,MAAO;IAAA2K,QAAA,GAE1H7G,SAAS,iBAAInE,OAAA;MAAK+K,SAAS,EAAC,uDAAuD;MAAAC,QAAA,GAAC,GAAC,eAAAhL,OAAA;QAAM+K,SAAS,EAAC,kEAAkE;QAAAC,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAEhMpK,QAAQ,IAAK,CAACN,QAAQ,IAAI,CAACE,WAAW,IAAI,CAACJ,WAAW,IAAI,CAACM,QAAU,iBAAId,OAAA;MAAK+K,SAAS,EAAC,2DAA2D;MAAAC,QAAA,GAAC,GAAC,eAAAhL,OAAA;QAAQ+K,SAAS,EAAE,IAAI1K,QAAQ,GAAE,eAAe,GAAG,eAAe,mEAAqE;QAAA2K,QAAA,EAAE9J,MAAM,CAACmK;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAE9T1J,aAAa,iBAAI1B,OAAA;MAAKwK,EAAE,EAAC,SAAS;MAACO,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAAhL,OAAA;QAAM+K,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAEJ,WAAW,CAACH,eAAe,CAAC,CAAC,CAAC,IAAI;MAAE;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAE3OpJ,SAAS,iBAAIhC,OAAA;MAAKwK,EAAE,EAAC,SAAS;MAACO,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAAhL,OAAA;QAAM+K,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAC;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAEnNlJ,SAAS,iBAAIlC,OAAA;MAAKwK,EAAE,EAAC,SAAS;MAACO,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAAhL,OAAA;QAAM+K,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAEjNrH,wBAAwB,iBAAI/D,OAAA;MAAKwK,EAAE,EAAC,SAAS;MAACO,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAAhL,OAAA;QAAM+K,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAC;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAE5OnH,oBAAoB,iBAAIjE,OAAA;MAAKwK,EAAE,EAAC,SAAS;MAACO,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAAhL,OAAA;QAAM+K,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EASnO,CAAC9J,OAAO,IAAIuJ,KAAK,kBAClB7K,OAAA,CAACH,IAAI;MAACyL,EAAE,EAAEhK,OAAQ;MAACiK,OAAO,EAAE,GAAI;MAAAP,QAAA,eAC5BhL,OAAA;QAAK+K,SAAS,EAAC,gEAAgE;QAAAC,QAAA,eAC3EhL,OAAA,CAACL,UAAU;UAAAsL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,EAkBN9J,OAAO,iBAAItB,OAAA;MAAK+K,SAAS,EAAE,4CAA4C1K,QAAQ,GAAG,aAAa,GAAG,aAAa;IAAS;MAAA4K,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChH,CAAC,EAETtJ,MAAM,iBAAI9B,OAAA;MAAK+K,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAAhL,OAAA;QAAM+K,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAEtH;MAAW;QAAAuH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAE/LpL,OAAA;MAAK+K,SAAS,EAAC,0CAA0C;MAAAC,QAAA;MAEnD;MACFnC,MAAM,CAACC,OAAO,CAACxG,QAAQ,CAAC,CAAC8G,GAAG,CAAC,CAAC,CAACxD,GAAG,EAAEqD,KAAK,CAAC;MAAA;MAAO;MAC7CjJ,OAAA;QAAc+K,SAAS,EAAC,uBAAuB;QAAAC,QAAA,EAC1C/B,KAAK;QAAA;QAAG;QACTjJ,OAAA,CAAAE,SAAA;UAAA8K,QAAA,GAAE,KAAG,EACAtI,YAAY,CAACkD,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAIrC,YAAY,CAACkD,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAACE,MAAM,GAAG,CAAC,GAC/EvC,YAAY,CAACkD,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAACqE,GAAG,CAAC,CAAChB,GAAG,EAAEC,GAAG;UAAA;UAAO;UACpDrI,OAAA;YAAQ+K,SAAS,EAAI,2BACjB3C,GAAG,IAAI,OAAO,GAAK9H,UAAU,GAAG,SAAS,GAAI,OAAO,GACpD8H,GAAG,IAAI,QAAQ,GAAK9H,UAAU,GAAG,UAAU,GAAG,QAAQ,GACpDD,QAAQ,GAAG,QAAQ,GAAG,MAAQ;AACpE,+HAAiI;YAAA2K,QAAA,EAC5FnH,OAAO,CAAC+B,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAACsD,GAAG,CAAC,IAAI;UAAE;YAAA4C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC,CACX,CAAC,GAAK,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAChC,GAAG,CAAEhB,GAAG;UAAO;UAC9BvE,OAAO,CAAC+B,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAACqD,GAAG,CAAC,gBAElCpI,OAAA;YAAM+K,SAAS,EAAC,0GAA0G;YAAAC,QAAA,EACrHnH,OAAO,CAAC+B,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAACqD,GAAG;UAAC;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClC,CAAC,gBAENpL,OAAA;YAAM+K,SAAS,EAAC;UAA0G;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrH,CAER,CAAC;QAAA,eAER,CAAC,gBAEHpL,OAAA,CAAAE,SAAA;UAAA8K,QAAA,EACK,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC5B,GAAG,CAAEhB,GAAG;UAAO;UACxBvE,OAAO,CAAC+B,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAACqD,GAAG,CAAC,gBAElCpI,OAAA;YAAM+K,SAAS,EAAC,2GAA2G;YAAAC,QAAA,EACtHnH,OAAO,CAAC+B,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAACqD,GAAG;UAAC;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClC,CAAC,gBAENpL,OAAA;YAAM+K,SAAS,EAAE,YAAY1K,QAAQ,IAAI,kBAAkB;UAAmF;YAAA4K,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzI,CAER;QAAC,gBACJ;MAAC,GAtCGxF,GAAG;QAAAqF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAwCR,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAEV,CAAC;AAAAhL,EAAA,CAjnBKD,IAAI;AAAAqL,EAAA,GAAJrL,IAAI;AAmnBV,eAAeA,IAAI;AAAA,IAAAqL,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}