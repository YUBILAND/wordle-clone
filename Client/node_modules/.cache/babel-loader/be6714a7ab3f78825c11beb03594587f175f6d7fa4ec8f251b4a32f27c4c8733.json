{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\wordle-clone\\\\Client\\\\src\\\\components\\\\Grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useContext } from 'react';\nimport raw from '../assets/wordle-La.txt';\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\nimport CloseIcon from '@mui/icons-material/Close';\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport ShareIcon from '@mui/icons-material/Share';\nimport './Grid.css';\nimport Statistics from './Statistics';\nimport axios from 'axios';\nimport Zoom from '@mui/material/Zoom';\nimport { ClickAwayListener } from '@mui/base/ClickAwayListener';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  const {\n    darkMode\n  } = useContext(KeyboardContext);\n  const {\n    colorBlind,\n    setColorBlind\n  } = useContext(KeyboardContext);\n  const {\n    profilePage,\n    showProfilePage\n  } = useContext(KeyboardContext);\n  const {\n    tutorial,\n    showTutorial\n  } = useContext(KeyboardContext);\n  const {\n    leaderBoard,\n    showLeaderBoard\n  } = useContext(KeyboardContext);\n  const {\n    settings,\n    showSettings\n  } = useContext(KeyboardContext);\n  const {\n    userMode,\n    setUserMode\n  } = useContext(KeyboardContext);\n  const {\n    userID,\n    setUserID\n  } = useContext(KeyboardContext);\n  const {\n    kbColor,\n    setKbColor\n  } = useContext(KeyboardContext);\n  const {\n    winPage,\n    setWinPage\n  } = useContext(KeyboardContext);\n  const {\n    guessWon,\n    setGuessWon\n  } = useContext(KeyboardContext);\n  const [winCompliment, setWinCompliment] = useState(false);\n  const {\n    win,\n    setWin\n  } = useContext(KeyboardContext);\n  const {\n    answer,\n    showAnswer\n  } = useContext(KeyboardContext);\n  const {\n    notEnough,\n    setNotEnough\n  } = useContext(KeyboardContext);\n  const {\n    wrongWord,\n    setWrongWord\n  } = useContext(KeyboardContext);\n  const {\n    wordleList,\n    setWordleList\n  } = useContext(KeyboardContext);\n  const {\n    doneHash,\n    setDoneHash\n  } = useContext(KeyboardContext);\n  const {\n    canEnterHash,\n    setCanEnterHash\n  } = useContext(KeyboardContext);\n  const [guessResults, setGuessResults] = useState(() => {\n    const existingguessResults = JSON.parse(localStorage.getItem('guessResults'));\n    return existingguessResults || {\n      first: [],\n      second: [],\n      third: [],\n      fourth: [],\n      fifth: [],\n      sixth: []\n    };\n  });\n  const refHash = useRef({\n    first: false,\n    second: false,\n    third: false,\n    fourth: false,\n    fifth: false,\n    sixth: false\n  });\n  const [loading, setLoading] = useState(true);\n  const [correctWord, setCorrectWord] = useState(() => {\n    const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord'));\n    return existingCorrectWord || '';\n  });\n  const {\n    guesses,\n    setGuesses\n  } = useContext(KeyboardContext);\n  const {\n    clickDisabledLeaderBoard,\n    setClickDisabledLeaderBoard\n  } = useContext(KeyboardContext);\n  const {\n    clickDisabledProfile,\n    setClickDisabledProfile\n  } = useContext(KeyboardContext);\n  const {\n    guestMode,\n    setGuestMode\n  } = useContext(KeyboardContext);\n  const {\n    guessLength,\n    setGuessLength\n  } = useContext(KeyboardContext);\n  const [loss, setLoss] = useState(() => {\n    const existingLoss = JSON.parse(localStorage.getItem('loss'));\n    return existingLoss || false;\n  });\n  useEffect(() => {\n    //loads wordle list\n    const fetchWords = async () => {\n      const response = await fetch(raw);\n      const text = await response.text();\n      const lines = text.split('\\r\\n').slice(0, 2315);\n      setWordleList(lines);\n    };\n    fetchWords();\n  }, []);\n  useEffect(() => {\n    //chooses random correct word from wordle list\n    if (wordleList.length > 0 && !correctWord) {\n      setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\n      setLoading(false);\n    }\n  }, [wordleList]);\n  useEffect(() => {\n    // prints correctWord\n    if (correctWord) console.log('The Correct Word is ' + correctWord);\n    const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord')) || '';\n    if (JSON.stringify(existingCorrectWord) !== JSON.stringify(correctWord)) localStorage.setItem('correctWord', JSON.stringify(correctWord));\n  }, [correctWord]);\n  useEffect(() => {\n    //Register key press and save to state, del too\n    const onPress = event => {\n      if (event.key === 'Backspace') {\n        Object.entries(doneHash).some(([key, val]) => {\n          if (!val && guessLength > 0) {\n            const firstDonetoFirst = key.split('Done')[0];\n            ;\n            setGuessLength(prevGuessLen => prevGuessLen - 1);\n            setGuesses(prevGuess => ({\n              ...prevGuess,\n              [firstDonetoFirst]: prevGuess[firstDonetoFirst].slice(0, prevGuess[firstDonetoFirst].length - 1)\n            }));\n            return true;\n          }\n          return false;\n        });\n      } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\n        Object.entries(doneHash).some(([key, val]) => {\n          if (!val && guessLength < 5) {\n            const firstDonetoFirst = key.split('Done')[0];\n            ;\n            setGuessLength(prevGuessLen => prevGuessLen + 1);\n            setGuesses(prevGuess => ({\n              ...prevGuess,\n              [firstDonetoFirst]: prevGuess[firstDonetoFirst] + event.key.toUpperCase()\n            }));\n            return true;\n          }\n          return false;\n        });\n      }\n    };\n    if (!win) {\n      // Attach event listener\n      document.addEventListener('keydown', onPress);\n\n      // Cleanup function to remove event listener\n      return () => {\n        document.removeEventListener('keydown', onPress);\n      };\n    }\n  }, [win, guessLength, doneHash]); // Depend only on the completion status\n\n  const {\n    enterPressed,\n    setEnterPressed\n  } = useContext(KeyboardContext);\n  const {\n    removeStyle,\n    setRemoveStyle\n  } = useContext(KeyboardContext);\n  useEffect(() => {\n    // 'Enter' Key Functionality\n    const onPress = event => {\n      if (event.key === 'Enter') {\n        Object.entries(doneHash).some(([key, val]) => {\n          if (!val) {\n            const firstDonetoFirstCanEnter = key.split('Done')[0] + 'CanEnter'; // changes firstDone to firstCanEnter\n            if (canEnterHash[firstDonetoFirstCanEnter]) {\n              const firstDonetoFirst = key.split('Done')[0]; // changes firstDone to first\n              if (wordleList.includes(guesses[firstDonetoFirst].toLowerCase())) {\n                setEnterPressed(true);\n                setRemoveStyle(false);\n                setDoneHash(prevDone => ({\n                  ...prevDone,\n                  [key]: true\n                }));\n                setGuessLength(0);\n              } else setWrongWord(true);\n            } else setNotEnough(true);\n            return true;\n          }\n          return false;\n        });\n      }\n    };\n    if (!win) {\n      document.addEventListener('keydown', onPress);\n      return () => {\n        document.removeEventListener('keydown', onPress);\n      };\n    }\n  }, [win, doneHash, canEnterHash]);\n  const compareString = (str1, str2) => {\n    // compare guess to correctword, return arr of index of green ( ex '135' so first third and fifth are green)\n    var indexMatch = [];\n    for (let i = 0; i < str1.length; i++) {\n      if (str1[i] == str2[i]) {\n        indexMatch.push(i);\n      }\n    }\n    return indexMatch;\n  };\n  useEffect(() => {\n    // evaluates whether user can press enter as a valid guess, length 5\n    Object.entries(doneHash).some(([key, val]) => {\n      if (!val) {\n        const firstDonetoFirst = key.split('Done')[0]; // 'firstDone' to 'first'\n        const firstDonetoFirstCanEnter = key.split('Done')[0] + 'CanEnter'; // 'firstDone' to 'firstCanEnter'\n        if (guesses[firstDonetoFirst].length == 5) setCanEnterHash(prevCanEnter => ({\n          ...prevCanEnter,\n          [firstDonetoFirstCanEnter]: true\n        }));else setCanEnterHash(prevCanEnter => ({\n          ...prevCanEnter,\n          [firstDonetoFirstCanEnter]: false\n        }));\n        return true;\n      }\n      return false;\n    });\n  }, [guesses]);\n  const greenLetter = (dummyWord, guessedWord) => {\n    //looks for green first\n    const greenIndex = compareString(correctWord, guessedWord); // arry of green index\n    var offset = 0;\n    for (let i = 0; i < greenIndex.length; i++) {\n      dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\n      // console.log(dummyWord)\n      offset++;\n    }\n    return dummyWord;\n  };\n  const evalGuess = (dummyWord, letter, pos) => {\n    //assign letter green, yellow, or gray\n    if (letter == correctWord[pos]) {\n      return 'green';\n    } else if (dummyWord.includes(letter)) {\n      return 'yellow';\n    } else {\n      return 'gray';\n    }\n  };\n  var cheatVar;\n  const evaluteGuess = (res, ind) => {\n    //helper func for evaluating guess\n    if (guessResults.first) {\n      const newCheatVar = cheatVar;\n      cheatVar = cheatVar.replace(res, '');\n      return evalGuess(newCheatVar, res, ind); //check for green, yellow and gray\n    }\n  };\n  const guessRow = useRef(1); // keep track of variable between useEffect renders\n\n  useEffect(() => {\n    // ref\n    const existingGuessRow = JSON.parse(localStorage.getItem('currentRow'));\n    if (existingGuessRow) guessRow.current = existingGuessRow;\n  }, []);\n  const [guessesLoaded, setGuessesLoaded] = useState(false);\n  const firstTime = useRef(true);\n  useEffect(() => {\n    // evaluates guess, sets when user wins or loses\n    if (firstTime.current) {\n      //skip on mount\n      firstTime.current = false;\n      return;\n    }\n    if (!enterPressed) {\n      //skip on mount Solves? doubling the grid from 5 to 10 because of saving changes, if enter not pressed don't run this code again\n      return;\n    }\n    if (!guessesLoaded) setGuessesLoaded(true);\n    const lastTrueKey = Object.entries(doneHash).reduce((acc, [key, value]) => {\n      return value ? key : acc;\n    }, 0);\n    const firstDonetoFirst = lastTrueKey.split('Done')[0]; // remove \"Done\" from \"firstDone\" to get 'first'; use for accessing hashmap\n    if (lastTrueKey !== 0 && !refHash.current[firstDonetoFirst]) {\n      //player has made first guess\n\n      cheatVar = greenLetter(correctWord, guesses[firstDonetoFirst]);\n      const colorGuess = guesses[firstDonetoFirst].split('').map((res, ind) =>\n      // gets color mapping for each letter guess\n      evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        [firstDonetoFirst]: [...prevResults[firstDonetoFirst], ...colorGuess]\n      }));\n      let newKbColor = guesses[firstDonetoFirst].split('').reduce((acc, res, ind) => {\n        //removes duplicates to map to keyboard (ex. plump) only one color for p.\n        if (acc[res] == 'green' || acc[res] == 'yellow') {\n\n          // green and yellow get priority over gray so don't overwrite. \n          // (ex blimp and guess is booby, first b is green so don't overwrite with second b which is gray.)\n          // (ex blimp and guess is poppy, first p is yellow so don't overwrite with second or third p which is gray.)\n        } else acc[res] = colorGuess[ind];\n        return acc;\n      }, {});\n      setKbColor(prevResults => [...prevResults, {\n        ...newKbColor\n      }]);\n      const set = new Set(Object.values(newKbColor));\n      const first = [...set][0];\n      if (set.size == 1 && first == 'green') {\n        setWin(true);\n        localStorage.setItem('win', JSON.stringify(true));\n        setGuessWon(guessRow.current);\n        localStorage.setItem('guessWon', JSON.stringify(guessRow.current));\n        return;\n      } else if (firstDonetoFirst == \"sixth\") {\n        showAnswer(true);\n        localStorage.setItem('answer', JSON.stringify(answer));\n        setLoss(true);\n        localStorage.setItem('loss', JSON.stringify(loss));\n        return;\n      }\n      guessRow.current += 1;\n      localStorage.setItem('currentRow', JSON.stringify(guessRow.current)); // just display\n      refHash.current[firstDonetoFirst] = true;\n    }\n  }, [doneHash]);\n  useEffect(() => {\n    const existingDoneHash = JSON.parse(localStorage.getItem('doneHash')) || {\n      firstDone: false,\n      secondDone: false,\n      thirdDone: false,\n      fourthDone: false,\n      fifthDone: false,\n      sixthDone: false\n    };\n    if (JSON.stringify(existingDoneHash) !== JSON.stringify(doneHash)) localStorage.setItem('doneHash', JSON.stringify(doneHash));\n  }, [doneHash]);\n  useEffect(() => {\n    const existingguessResults = JSON.parse(localStorage.getItem('guessResults')) || {\n      first: [],\n      second: [],\n      third: [],\n      fourth: [],\n      fifth: [],\n      sixth: []\n    };\n    if (JSON.stringify(existingguessResults) !== JSON.stringify(guessResults)) localStorage.setItem('guessResults', JSON.stringify(guessResults));\n    const existingguesses = JSON.parse(localStorage.getItem('guesses')) || {\n      first: '',\n      second: '',\n      third: '',\n      fourth: '',\n      fifth: '',\n      sixth: ''\n    };\n    if (JSON.stringify(existingguesses) !== JSON.stringify(guesses)) localStorage.setItem('guesses', JSON.stringify(guesses));\n    console.log(guessResults);\n  }, [guessResults]);\n  useEffect(() => {\n    const existingKbColor = JSON.parse(localStorage.getItem('kbColor')) || [];\n    if (JSON.stringify(existingKbColor) !== JSON.stringify(kbColor)) localStorage.setItem('kbColor', JSON.stringify(kbColor));\n  }, [kbColor]);\n  const updated = useContext(KeyboardContext); // Solves: user can't refresh to gain infinite wins\n  useEffect(() => {\n    // ref\n    const existingUpdated = JSON.parse(localStorage.getItem('updatedStats'));\n    if (existingUpdated) updated.current = existingUpdated;\n  }, []);\n  useEffect(() => {\n    // update stats after game finish\n    if (win ^ answer && !updated.current) {\n      axios.post('http://localhost:8081/updateStats', {\n        ...userID,\n        win: win,\n        guessWon: guessWon\n      }).then(res => {\n        console.log(res.data.message);\n        updated.current = true;\n        localStorage.setItem('updatedStats', JSON.stringify(updated.current));\n      }).catch(err => console.log(err));\n    }\n  }, [win, answer]);\n  useEffect(() => {\n    // 1 sec delay after win before stats is shown\n    if (win) {\n      setWinCompliment(true);\n      setTimeout(() => {\n        setWinPage(true);\n      }, 1000);\n    }\n  }, [win]);\n  if (winCompliment) {\n    // show win compliment and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setWinCompliment(false);\n    }, 5000);\n  }\n  if (notEnough) {\n    // show not enoguh letters prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setNotEnough(false);\n    }, 5000);\n  }\n  if (wrongWord) {\n    // show wrong word prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setWrongWord(false);\n    }, 5000);\n  }\n  if (clickDisabledLeaderBoard) {\n    // show disabled leadeboard prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setClickDisabledLeaderBoard(false);\n    }, 2000);\n  }\n  if (clickDisabledProfile) {\n    // show disabled profile prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setClickDisabledProfile(false);\n    }, 2000);\n  }\n  useEffect(() => {\n    if (loss) {\n      // 1 sec delay after loss before stats is shown\n      setTimeout(function () {\n        setWinPage(true);\n      }, 1000);\n    }\n  }, [loss]);\n  function whichCompliment() {\n    // determines which compliment to give based on how many guesses player took\n    const firstTrueIndex = Object.entries(doneHash).findIndex(([key, value]) => !value);\n    if (firstTrueIndex != -1) {\n      return firstTrueIndex;\n    } else return 6;\n  }\n  const compliments = [\n  // compliment list\n  \"\", \"Genius\", \"Magnificent\", \"Impressive\", \"Splendid\", \"Great\", \"Phew\"];\n  const {\n    delay,\n    setDelay\n  } = useContext(KeyboardContext);\n  useEffect(() => {\n    if (!winPage) {\n      setTimeout(function () {\n        setDelay(false);\n      }, 1000);\n    }\n  }, [winPage]);\n  function handleAnimationStart() {\n    setTimeout(() => {\n      setRemoveStyle(true);\n    }, 400);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `mx-auto w-[500px] opacity-100 mb-[110px] ${darkMode ? 'bg-[#121213] text-white' : 'bg-white text-black'} z-0`,\n    children: [guestMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-[60px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-green-600 text-2xl rounded-md p-1 font-bold tracking-widest\",\n        children: \"Guest Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 95\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 23\n    }, this), userMode && !tutorial && !leaderBoard && !profilePage && !settings && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-[60px] left-0 flex justify-center w-full z-0\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: ` ${darkMode ? 'text-gray-200' : 'text-gray-500'} text-2xl rounded-md p-1 font-bold tracking-widest cursor-default`,\n        children: userID.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 159\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 83\n    }, this), winCompliment && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: compliments[whichCompliment()] || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 113\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 27\n    }, this), notEnough && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Not enough letters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 109\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 23\n    }, this), wrongWord && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Not in word list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 109\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 23\n    }, this), clickDisabledLeaderBoard && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Login to access leaderboards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 124\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 38\n    }, this), clickDisabledProfile && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Login to access profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 120\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 34\n    }, this), (winPage || delay) && /*#__PURE__*/_jsxDEV(Zoom, {\n      in: winPage,\n      timeout: 500,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-[250px] w-[500px] h-fit rounded-md shadow-xl z-20\",\n        children: /*#__PURE__*/_jsxDEV(Statistics, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 9\n    }, this), winPage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `absolute top-0 left-0 w-screen h-[930px] ${darkMode ? 'bg-black/50' : 'bg-white/50'}  z-10`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 21\n    }, this), answer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: correctWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 93\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 20\n    }, this), console.log(\"HERE\"), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-5 w-[340px] mx-auto gap-2\",\n      children:\n      //displays grid, simplified immensly\n      Object.entries(doneHash).map(([key, value]) => {\n        // maps how many rows\n\n        const lastTrueKey = Object.entries(doneHash).reduce((acc, [key, value]) => {\n          return value ? key : acc;\n        }, 0);\n        const firstDonetoFirst = key.split('Done')[0];\n        return (\n          /*#__PURE__*/\n          // on mount here\n          _jsxDEV(\"div\", {\n            className: \"flex col-span-5 gap-2\",\n            children: value && !guessesLoaded || guessesLoaded && key === lastTrueKey ?\n            /*#__PURE__*/\n            // on first refresh need animation, on user guess need row animation\n            _jsxDEV(_Fragment, {\n              children: guessResults[firstDonetoFirst] && guessResults[firstDonetoFirst].length > 0 ? guessResults[firstDonetoFirst].map((res, ind) => {\n                // maps how many columns (user input)\n                const delay = ind * 100;\n                const style1 = {\n                  animationDelay: `${delay}ms`\n                };\n                const style2 = removeStyle ? {} : {\n                  backgroundColor: 'transparent',\n                  color: 'transparent',\n                  borderColor: darkMode ? '#3a3a3c' : '#d1d5db'\n                };\n                return /*#__PURE__*/_jsxDEV(\"button\", {\n                  style: {\n                    ...style1,\n                    ...style2\n                  },\n                  onAnimationStart: handleAnimationStart,\n                  className: `flip border-2 cursor-default ${res == 'green' ? colorBlind ? 'CBgreen' : 'green' : res == 'yellow' ? colorBlind ? 'CByellow' : 'yellow' : darkMode ? 'DMgray' : 'gray'} \n                                            flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white`,\n                  children: guesses[firstDonetoFirst][ind] || ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 515,\n                  columnNumber: 41\n                }, this);\n              }) : [0, 1, 2, 3, 4].map(res =>\n              // maps how many columns (empty input)\n              guesses[firstDonetoFirst][res] ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cursor-default border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n                children: guesses[firstDonetoFirst][res]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 526,\n                columnNumber: 37\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cursor-default border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 37\n              }, this))\n            }, void 0, false) : guessesLoaded && key !== lastTrueKey && value ?\n            /*#__PURE__*/\n            // previous guesses, after making guess they should have no animation\n            _jsxDEV(_Fragment, {\n              children: guessResults[firstDonetoFirst] && guessResults[firstDonetoFirst].length > 0 ? guessResults[firstDonetoFirst].map((res, ind) =>\n              /*#__PURE__*/\n              // maps how many columns (user input)\n              _jsxDEV(\"button\", {\n                className: `border-2 cursor-default ${res == 'green' ? colorBlind ? 'CBgreen' : 'green' : res == 'yellow' ? colorBlind ? 'CByellow' : 'yellow' : darkMode ? 'DMgray' : 'gray'} \n                                            flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white`,\n                children: guesses[firstDonetoFirst][ind] || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 41\n              }, this)) : [0, 1, 2, 3, 4].map(res =>\n              // maps how many columns (empty input)\n              guesses[firstDonetoFirst][res] ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cursor-default border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n                children: guesses[firstDonetoFirst][res]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cursor-default border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 41\n              }, this))\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [0, 1, 2, 3, 4].map(res =>\n              // maps how many columns (empty input)\n              guesses[firstDonetoFirst][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"border-2 border-[#565758] flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n                children: guesses[firstDonetoFirst][res]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `border-2 ${darkMode && 'border-[#3a3a3c]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 575,\n                columnNumber: 33\n              }, this))\n            }, void 0, false)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 21\n          }, this)\n        );\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 436,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"nADba20ql/pGMwl1EhwzidBGxco=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useContext","raw","KeyboardContext","CloseIcon","ReplayIcon","ShareIcon","Statistics","axios","Zoom","ClickAwayListener","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","_s","darkMode","colorBlind","setColorBlind","profilePage","showProfilePage","tutorial","showTutorial","leaderBoard","showLeaderBoard","settings","showSettings","userMode","setUserMode","userID","setUserID","kbColor","setKbColor","winPage","setWinPage","guessWon","setGuessWon","winCompliment","setWinCompliment","win","setWin","answer","showAnswer","notEnough","setNotEnough","wrongWord","setWrongWord","wordleList","setWordleList","doneHash","setDoneHash","canEnterHash","setCanEnterHash","guessResults","setGuessResults","existingguessResults","JSON","parse","localStorage","getItem","first","second","third","fourth","fifth","sixth","refHash","loading","setLoading","correctWord","setCorrectWord","existingCorrectWord","guesses","setGuesses","clickDisabledLeaderBoard","setClickDisabledLeaderBoard","clickDisabledProfile","setClickDisabledProfile","guestMode","setGuestMode","guessLength","setGuessLength","loss","setLoss","existingLoss","fetchWords","response","fetch","text","lines","split","slice","length","Math","floor","random","toUpperCase","console","log","stringify","setItem","onPress","event","key","Object","entries","some","val","firstDonetoFirst","prevGuessLen","prevGuess","match","document","addEventListener","removeEventListener","enterPressed","setEnterPressed","removeStyle","setRemoveStyle","firstDonetoFirstCanEnter","includes","toLowerCase","prevDone","compareString","str1","str2","indexMatch","i","push","prevCanEnter","greenLetter","dummyWord","guessedWord","greenIndex","offset","parseInt","evalGuess","letter","pos","cheatVar","evaluteGuess","res","ind","newCheatVar","replace","guessRow","existingGuessRow","current","guessesLoaded","setGuessesLoaded","firstTime","lastTrueKey","reduce","acc","value","colorGuess","map","prevResults","newKbColor","set","Set","values","size","existingDoneHash","firstDone","secondDone","thirdDone","fourthDone","fifthDone","sixthDone","existingguesses","existingKbColor","updated","existingUpdated","post","then","data","message","catch","err","setTimeout","getElementById","id","whichCompliment","firstTrueIndex","findIndex","compliments","delay","setDelay","handleAnimationStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","username","in","timeout","style1","animationDelay","style2","backgroundColor","color","borderColor","style","onAnimationStart","_c","$RefreshReg$"],"sources":["C:/Users/david/wordle-clone/Client/src/components/Grid.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useContext } from 'react'\r\nimport raw from '../assets/wordle-La.txt'\r\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport ReplayIcon from '@mui/icons-material/Replay';\r\nimport ShareIcon from '@mui/icons-material/Share';\r\nimport './Grid.css'\r\nimport Statistics from './Statistics';\r\nimport axios from 'axios';\r\nimport Zoom from '@mui/material/Zoom';\r\nimport { ClickAwayListener } from '@mui/base/ClickAwayListener';\r\n\r\n\r\n\r\nconst Grid = () => {\r\n    \r\n    const {darkMode} = useContext(KeyboardContext);\r\n    const {colorBlind, setColorBlind} = useContext(KeyboardContext);\r\n    const {profilePage, showProfilePage} = useContext(KeyboardContext);\r\n    const {tutorial, showTutorial} = useContext(KeyboardContext);\r\n    const {leaderBoard, showLeaderBoard} = useContext(KeyboardContext);\r\n    const {settings, showSettings} = useContext(KeyboardContext);\r\n    const {userMode, setUserMode} = useContext(KeyboardContext);\r\n    const {userID, setUserID} = useContext(KeyboardContext);\r\n    const {kbColor, setKbColor} = useContext(KeyboardContext);\r\n    const {winPage, setWinPage} = useContext(KeyboardContext);\r\n    const {guessWon, setGuessWon} = useContext(KeyboardContext);\r\n    const [winCompliment, setWinCompliment] = useState(false);\r\n    const {win, setWin} = useContext(KeyboardContext);\r\n    const {answer, showAnswer} = useContext(KeyboardContext);\r\n    const {notEnough, setNotEnough} = useContext(KeyboardContext);\r\n    const {wrongWord, setWrongWord} = useContext(KeyboardContext);\r\n    const {wordleList, setWordleList} = useContext(KeyboardContext);\r\n    const {doneHash, setDoneHash} = useContext(KeyboardContext);\r\n    const {canEnterHash, setCanEnterHash} = useContext(KeyboardContext);\r\n    const [guessResults, setGuessResults] = useState(() => {\r\n        const existingguessResults = JSON.parse(localStorage.getItem('guessResults'));\r\n        return existingguessResults || {\r\n            first: [], \r\n            second: [], \r\n            third: [], \r\n            fourth: [], \r\n            fifth: [], \r\n            sixth: []\r\n        };\r\n    });\r\n\r\n    const refHash = useRef({first: false, second: false, third: false, fourth: false, fifth: false, sixth: false})\r\n    const [loading, setLoading] = useState(true);\r\n    const [correctWord, setCorrectWord] = useState(() => {\r\n        const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord'));\r\n        return existingCorrectWord || '';\r\n    });\r\n    const {guesses, setGuesses} = useContext(KeyboardContext);\r\n    const {clickDisabledLeaderBoard, setClickDisabledLeaderBoard} = useContext(KeyboardContext);\r\n    const {clickDisabledProfile, setClickDisabledProfile} = useContext(KeyboardContext);\r\n    const {guestMode, setGuestMode} = useContext(KeyboardContext);\r\n    const {guessLength, setGuessLength} = useContext(KeyboardContext);\r\n    const [loss, setLoss] = useState(() => {\r\n        const existingLoss = JSON.parse(localStorage.getItem('loss'));\r\n        return existingLoss || false;\r\n    });\r\n\r\n    useEffect(() => { //loads wordle list\r\n        const fetchWords = async () => { \r\n            const response = await fetch(raw);\r\n            const text = await response.text();\r\n            const lines = text.split('\\r\\n').slice(0, 2315);\r\n            setWordleList(lines)\r\n        };\r\n        fetchWords();\r\n    }, []);\r\n    \r\n    useEffect(() => { //chooses random correct word from wordle list\r\n        if (wordleList.length > 0 && !correctWord) {\r\n        setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\r\n        setLoading(false);\r\n        }\r\n    }, [wordleList])\r\n\r\n    useEffect(() => { // prints correctWord\r\n        if( correctWord )\r\n            console.log('The Correct Word is ' + correctWord)\r\n            const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord')) || '';\r\n            if (JSON.stringify(existingCorrectWord) !== JSON.stringify(correctWord)) localStorage.setItem('correctWord', JSON.stringify(correctWord));\r\n    }, [correctWord])\r\n\r\n    useEffect(() => { //Register key press and save to state, del too\r\n        const onPress = (event) => {\r\n            if (event.key === 'Backspace') {\r\n                Object.entries(doneHash).some(([key,val]) => {\r\n                    if (!val && guessLength > 0) {\r\n                        const firstDonetoFirst = key.split('Done')[0];;\r\n                        setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                        setGuesses( prevGuess => ({ ...prevGuess, [firstDonetoFirst]: (prevGuess[firstDonetoFirst].slice(0, prevGuess[firstDonetoFirst].length - 1))}))\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                })\r\n            } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\r\n                Object.entries(doneHash).some(([key,val]) => {\r\n                    if (!val && guessLength < 5) {\r\n                        const firstDonetoFirst = key.split('Done')[0];;\r\n                        setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                        setGuesses( prevGuess => ({ ...prevGuess, [firstDonetoFirst]: (prevGuess[firstDonetoFirst] + event.key.toUpperCase())}))\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                })\r\n            } \r\n        };\r\n        if(!win) {\r\n            // Attach event listener\r\n            document.addEventListener('keydown', onPress);\r\n        \r\n            // Cleanup function to remove event listener\r\n            return () => {\r\n            document.removeEventListener('keydown', onPress);\r\n            };\r\n        }\r\n    }, [win, guessLength, doneHash]); // Depend only on the completion status\r\n\r\n    const {enterPressed, setEnterPressed} = useContext(KeyboardContext);\r\n    const {removeStyle, setRemoveStyle} = useContext(KeyboardContext);\r\n\r\n    useEffect(() => { // 'Enter' Key Functionality\r\n        const onPress = (event) => {\r\n            if (event.key === 'Enter') {\r\n                Object.entries(doneHash).some(([key, val]) => {\r\n                    if (!val) {\r\n                        const firstDonetoFirstCanEnter = key.split('Done')[0] + 'CanEnter' // changes firstDone to firstCanEnter\r\n                        if (canEnterHash[firstDonetoFirstCanEnter]) {\r\n                            const firstDonetoFirst = key.split('Done')[0]  // changes firstDone to first\r\n                            if (wordleList.includes(guesses[firstDonetoFirst].toLowerCase())) {\r\n                                setEnterPressed(true);\r\n                                setRemoveStyle(false);\r\n                                setDoneHash(prevDone => ({ ...prevDone, [key]: true}));\r\n                                setGuessLength(0);\r\n                            } else setWrongWord(true); \r\n\r\n                        } else setNotEnough(true);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                })\r\n            }\r\n        }\r\n\r\n        if (!win) {\r\n            document.addEventListener('keydown', onPress);\r\n            return () => {\r\n            document.removeEventListener('keydown', onPress);\r\n            };\r\n        }\r\n    },[win, doneHash, canEnterHash])\r\n    \r\n    const compareString = (str1, str2) => { // compare guess to correctword, return arr of index of green ( ex '135' so first third and fifth are green)\r\n        var indexMatch = [];\r\n        for (let i = 0; i < str1.length; i++) {\r\n            if (str1[i] == str2[i]) {\r\n                indexMatch.push(i);\r\n            }\r\n        } return indexMatch;\r\n    }\r\n    \r\n    useEffect(() => { // evaluates whether user can press enter as a valid guess, length 5\r\n        Object.entries(doneHash).some(([key, val]) => {\r\n            if (!val) {\r\n                const firstDonetoFirst = key.split('Done')[0] // 'firstDone' to 'first'\r\n                const firstDonetoFirstCanEnter = key.split('Done')[0] + 'CanEnter' // 'firstDone' to 'firstCanEnter'\r\n                if (guesses[firstDonetoFirst].length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, [firstDonetoFirstCanEnter]: true}));\r\n                else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, [firstDonetoFirstCanEnter]: false}));\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n    }, [guesses])\r\n\r\n    const greenLetter = (dummyWord, guessedWord) => { //looks for green first\r\n        const greenIndex = compareString(correctWord, guessedWord); // arry of green index\r\n        var offset = 0;\r\n        for (let i = 0; i < greenIndex.length; i++) {\r\n            dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\r\n            // console.log(dummyWord)\r\n            offset++;\r\n        }\r\n        return dummyWord;\r\n    }\r\n\r\n    const evalGuess = (dummyWord, letter, pos) => { //assign letter green, yellow, or gray\r\n        if (letter == correctWord[pos]) {\r\n            return 'green';\r\n        } else if (dummyWord.includes(letter)) {\r\n            return 'yellow';\r\n        } else {\r\n            return 'gray';\r\n        }\r\n    }\r\n\r\n    var cheatVar;\r\n\r\n    const evaluteGuess = (res, ind) => { //helper func for evaluating guess\r\n        if (guessResults.first) {\r\n            const newCheatVar = cheatVar;\r\n            cheatVar = cheatVar.replace(res, '')\r\n            return evalGuess(newCheatVar, res, ind) //check for green, yellow and gray\r\n        }\r\n    }\r\n\r\n    const guessRow = useRef(1); // keep track of variable between useEffect renders\r\n\r\n    useEffect(() => { // ref\r\n        const existingGuessRow = JSON.parse(localStorage.getItem('currentRow'));\r\n        if (existingGuessRow) guessRow.current = existingGuessRow;\r\n    }, [])\r\n    \r\n    const [guessesLoaded, setGuessesLoaded] = useState(false);\r\n\r\n    const firstTime = useRef(true);\r\n    useEffect(() => { // evaluates guess, sets when user wins or loses\r\n        if (firstTime.current) { //skip on mount\r\n            firstTime.current = false;\r\n            return;\r\n        }\r\n        if (!enterPressed) { //skip on mount Solves? doubling the grid from 5 to 10 because of saving changes, if enter not pressed don't run this code again\r\n            return;\r\n        }\r\n\r\n        if (!guessesLoaded) setGuessesLoaded(true);\r\n\r\n\r\n\r\n\r\n        const lastTrueKey = Object.entries(doneHash).reduce((acc, [key, value]) => {\r\n            return value ? key : acc;\r\n        }, 0);\r\n            \r\n            const firstDonetoFirst = lastTrueKey.split('Done')[0]; // remove \"Done\" from \"firstDone\" to get 'first'; use for accessing hashmap\r\n            if ( lastTrueKey !== 0 && !refHash.current[firstDonetoFirst]) { //player has made first guess\r\n                \r\n                cheatVar = greenLetter(correctWord, guesses[firstDonetoFirst])\r\n                const colorGuess = guesses[firstDonetoFirst].split('').map((res, ind) => ( // gets color mapping for each letter guess\r\n                    evaluteGuess(res, ind)\r\n                ))\r\n                setGuessResults(prevResults => ({\r\n                    ...prevResults,\r\n                    [firstDonetoFirst] : [...prevResults[firstDonetoFirst], ...colorGuess]\r\n                }));\r\n                let newKbColor = guesses[firstDonetoFirst].split('').reduce((acc, res, ind) => { //removes duplicates to map to keyboard (ex. plump) only one color for p.\r\n                    if ( acc[res] == 'green' || acc[res] == 'yellow') {\r\n                        \r\n                            // green and yellow get priority over gray so don't overwrite. \r\n                            // (ex blimp and guess is booby, first b is green so don't overwrite with second b which is gray.)\r\n                            // (ex blimp and guess is poppy, first p is yellow so don't overwrite with second or third p which is gray.)\r\n                        \r\n                    } else \r\n                    acc[res] = colorGuess[ind];\r\n                    return acc;\r\n                }, {});\r\n                setKbColor(prevResults => [\r\n                    ...prevResults,\r\n                    { ...newKbColor }\r\n                ])\r\n                const set = new Set(Object.values(newKbColor))\r\n                const first = [...set][0]\r\n                if (set.size == 1 && first == 'green') {\r\n                    setWin(true);\r\n                    localStorage.setItem('win', JSON.stringify(true))\r\n                    setGuessWon(guessRow.current);\r\n                    localStorage.setItem('guessWon', JSON.stringify( guessRow.current))\r\n                    return;\r\n                } else if ( firstDonetoFirst == \"sixth\" ){\r\n                    showAnswer(true);\r\n                    localStorage.setItem('answer', JSON.stringify(answer))\r\n                    setLoss(true);\r\n                    localStorage.setItem('loss', JSON.stringify(loss))\r\n                    return;\r\n                }\r\n                guessRow.current += 1;\r\n                localStorage.setItem('currentRow',JSON.stringify( guessRow.current)) // just display\r\n                refHash.current[firstDonetoFirst] = true;\r\n            }\r\n    }, [doneHash]);\r\n\r\n    useEffect(() => {\r\n        const existingDoneHash = JSON.parse(localStorage.getItem('doneHash')) || {\r\n            firstDone: false, \r\n            secondDone: false, \r\n            thirdDone: false, \r\n            fourthDone: false, \r\n            fifthDone: false, \r\n            sixthDone: false\r\n        };\r\n        if (JSON.stringify(existingDoneHash) !== JSON.stringify(doneHash)) localStorage.setItem('doneHash', JSON.stringify(doneHash));\r\n    }, [doneHash])\r\n\r\n    useEffect(() => {\r\n        const existingguessResults = JSON.parse(localStorage.getItem('guessResults')) || {\r\n            first: [], \r\n            second: [], \r\n            third: [], \r\n            fourth: [], \r\n            fifth: [], \r\n            sixth: []\r\n        };\r\n        if (JSON.stringify(existingguessResults) !== JSON.stringify(guessResults)) localStorage.setItem('guessResults', JSON.stringify(guessResults));\r\n        \r\n        const existingguesses = JSON.parse(localStorage.getItem('guesses')) || {\r\n            first: '', \r\n            second: '', \r\n            third: '', \r\n            fourth: '', \r\n            fifth: '', \r\n            sixth: ''\r\n        };\r\n        if (JSON.stringify(existingguesses) !== JSON.stringify(guesses)) localStorage.setItem('guesses', JSON.stringify(guesses));\r\n\r\n        console.log(guessResults)\r\n        \r\n    }, [guessResults])\r\n\r\n    useEffect(() => {\r\n        const existingKbColor = JSON.parse(localStorage.getItem('kbColor')) || [];\r\n        if (JSON.stringify(existingKbColor) !== JSON.stringify(kbColor)) localStorage.setItem('kbColor', JSON.stringify(kbColor));\r\n        \r\n    }, [kbColor])\r\n\r\n    const updated = useContext(KeyboardContext); // Solves: user can't refresh to gain infinite wins\r\n    useEffect(() => { // ref\r\n        const existingUpdated = JSON.parse(localStorage.getItem('updatedStats'));\r\n        if (existingUpdated) updated.current = existingUpdated;\r\n    }, [])\r\n    useEffect(() => { // update stats after game finish\r\n        if (( win ^ answer) && !updated.current) {\r\n            axios.post('http://localhost:8081/updateStats', {...userID, win: win, guessWon: guessWon})\r\n            .then(res => {\r\n                console.log(res.data.message)\r\n                updated.current = true;\r\n                localStorage.setItem('updatedStats', JSON.stringify(updated.current))\r\n            })\r\n            .catch(err => console.log(err));\r\n        }\r\n    }, [win, answer])\r\n\r\n    useEffect(() => { // 1 sec delay after win before stats is shown\r\n        if (win) {\r\n            setWinCompliment(true);\r\n            setTimeout(() => {\r\n                setWinPage(true);\r\n            }, 1000)\r\n        }\r\n    }, [win])\r\n\r\n    if(winCompliment) { // show win compliment and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setWinCompliment(false);\r\n            }, 5000);\r\n    }\r\n\r\n    if(notEnough) { // show not enoguh letters prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setNotEnough(false);\r\n\r\n            }, 5000);\r\n\r\n    }\r\n\r\n    if (wrongWord) { // show wrong word prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setWrongWord(false);\r\n            }, 5000);\r\n    }\r\n\r\n    if (clickDisabledLeaderBoard) { // show disabled leadeboard prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setClickDisabledLeaderBoard(false);\r\n            }, 2000);\r\n    }\r\n\r\n    if (clickDisabledProfile) { // show disabled profile prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setClickDisabledProfile(false);\r\n            }, 2000);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (loss) { // 1 sec delay after loss before stats is shown\r\n            setTimeout(function() {\r\n                setWinPage(true);\r\n            }, 1000);\r\n        }\r\n    }, [loss])\r\n    \r\n    function whichCompliment() { // determines which compliment to give based on how many guesses player took\r\n        const firstTrueIndex = Object.entries(doneHash).findIndex(([key, value]) => !value);\r\n        if (firstTrueIndex != -1) {\r\n            return firstTrueIndex;\r\n        } else return 6;\r\n    }\r\n\r\n    const compliments = [ // compliment list\r\n        \"\",               \r\n        \"Genius\",        \r\n        \"Magnificent\",   \r\n        \"Impressive\",    \r\n        \"Splendid\",     \r\n        \"Great\",        \r\n        \"Phew\"          \r\n    ];\r\n\r\n    const {delay, setDelay} = useContext(KeyboardContext);\r\n    \r\n    useEffect(() => {\r\n        if (!winPage) {\r\n            setTimeout(function() {\r\n                setDelay(false);\r\n                }, 1000);\r\n        }\r\n    }, [winPage])\r\n\r\n    function handleAnimationStart() {\r\n        setTimeout(() => {\r\n            setRemoveStyle(true);\r\n        }, 400)\r\n    }\r\n    \r\n    \r\n\r\n  return (\r\n\r\n    <div className={`mx-auto w-[500px] opacity-100 mb-[110px] ${darkMode ? 'bg-[#121213] text-white' : 'bg-white text-black'} z-0`}>\r\n\r\n        {guestMode && <div className='absolute top-[60px] left-0 flex justify-center w-full'> <span className='text-green-600 text-2xl rounded-md p-1 font-bold tracking-widest'>Guest Mode</span> </div>}\r\n\r\n        {userMode && (!tutorial && !leaderBoard && !profilePage && !settings ) && <div className='absolute top-[60px] left-0 flex justify-center w-full z-0'> <button className={` ${darkMode ?'text-gray-200' : 'text-gray-500' } text-2xl rounded-md p-1 font-bold tracking-widest cursor-default`}>{userID.username}</button> </div>}\r\n\r\n        {winCompliment && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>{compliments[whichCompliment()] || ''}</span> </div>}\r\n\r\n        {notEnough && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Not enough letters</span> </div>}\r\n\r\n        {wrongWord && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Not in word list</span> </div>}\r\n\r\n        {clickDisabledLeaderBoard && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Login to access leaderboards</span> </div>}\r\n\r\n        {clickDisabledProfile && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Login to access profile</span> </div>}\r\n\r\n                \r\n        {/* {winPage && <div className=''> <Statistics /> </div>\r\n        } */}\r\n    {/* {winPage || delay &&  */}\r\n\r\n    {/* <ClickAwayListener onClickAway={handleClickAway}> */}\r\n\r\n        {(winPage || delay )&& \r\n        <Zoom in={winPage} timeout={500}>\r\n            <div className='absolute top-[250px] w-[500px] h-fit rounded-md shadow-xl z-20' >\r\n                <Statistics /> \r\n            </div>\r\n        </Zoom>\r\n        }\r\n\r\n\r\n                {/* {winPage && \r\n                <>  \r\n                    <div className='absolute top-[250px] w-[500px] h-fit rounded-md shadow-xl bg-white z-20' >\r\n                        <Statistics /> \r\n                    </div>\r\n                    <div className='absolute top-0 left-0 w-screen h-[1000px] bg-white/50 z-10'>\r\n                     </div>\r\n                </>\r\n                } */}\r\n\r\n        {/* </ClickAwayListener> */}\r\n\r\n    {/* } */}\r\n\r\n        {winPage && <div className={`absolute top-0 left-0 w-screen h-[930px] ${darkMode ? 'bg-black/50' : 'bg-white/50'}  z-10`}>\r\n            </div> }\r\n\r\n        {answer && <div className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>{correctWord}</span> </div>}\r\n\r\n{console.log(\"HERE\")}\r\n        <div className='grid grid-cols-5 w-[340px] mx-auto gap-2'>\r\n\r\n            { //displays grid, simplified immensly\r\n            Object.entries(doneHash).map(([key, value]) => { // maps how many rows\r\n\r\n                const lastTrueKey = Object.entries(doneHash).reduce((acc, [key, value]) => {\r\n                    return value ? key : acc;\r\n                }, 0);\r\n\r\n                const firstDonetoFirst = key.split('Done')[0];\r\n\r\n\r\n                return ( \r\n                    // on mount here\r\n                    <div key={key}className='flex col-span-5 gap-2'>\r\n                        \r\n                    { \r\n                        ((value && !guessesLoaded) || (guessesLoaded && key === lastTrueKey)) ?  // on first refresh need animation, on user guess need row animation\r\n                        <>\r\n                            {guessResults[firstDonetoFirst] && guessResults[firstDonetoFirst].length > 0 ?\r\n                                (guessResults[firstDonetoFirst].map((res, ind) => { // maps how many columns (user input)\r\n                                    const delay = ind * 100;\r\n                                    const style1 = {\r\n                                        animationDelay: `${delay}ms`,\r\n                                    };\r\n                                    const style2 = removeStyle ? {} : { backgroundColor: 'transparent', color: 'transparent', borderColor: (darkMode ? '#3a3a3c' : '#d1d5db')}\r\n                                    return (\r\n                                        <button style={{ ...style1 , ...style2}} onAnimationStart={handleAnimationStart} className= { `flip border-2 cursor-default ${\r\n                                            res == 'green' ? ( colorBlind ? 'CBgreen'  : 'green' ) :  \r\n                                            res == 'yellow' ? ( colorBlind ? 'CByellow' : 'yellow' ) : \r\n                                            ( darkMode ? 'DMgray' : 'gray' ) } \r\n                                            flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white` }>\r\n                                            {guesses[firstDonetoFirst][ind] || ''}\r\n                                        </button>\r\n                                    )\r\n                                }))  : [0,1,2,3,4].map((res) => ( // maps how many columns (empty input)\r\n                                    guesses[firstDonetoFirst][res]\r\n                                    ? \r\n                                    <button className='cursor-default border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                                        {guesses[firstDonetoFirst][res]}\r\n                                    </button>\r\n                                    : \r\n                                    <button className='cursor-default border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                                    </button>\r\n                                \r\n                                ))\r\n                            }\r\n                        </>\r\n                        :   \r\n\r\n                        (guessesLoaded && (key !== lastTrueKey) && value) ? // previous guesses, after making guess they should have no animation\r\n                            <>\r\n                                {guessResults[firstDonetoFirst] && guessResults[firstDonetoFirst].length > 0 ?\r\n                                    (guessResults[firstDonetoFirst].map((res, ind) => ( // maps how many columns (user input)\r\n                                        \r\n                                        <button className= { `border-2 cursor-default ${\r\n                                            res == 'green' ? ( colorBlind ? 'CBgreen'  : 'green' ) :  \r\n                                            res == 'yellow' ? ( colorBlind ? 'CByellow' : 'yellow' ) : \r\n                                            ( darkMode ? 'DMgray' : 'gray' ) } \r\n                                            flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white` }>\r\n                                            {guesses[firstDonetoFirst][ind] || ''}\r\n                                        </button>\r\n                                        \r\n                                    )))  : [0,1,2,3,4].map((res) => ( // maps how many columns (empty input)\r\n                                        guesses[firstDonetoFirst][res]\r\n                                        ? \r\n                                        <button className='cursor-default border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                                            {guesses[firstDonetoFirst][res]}\r\n                                        </button>\r\n                                        : \r\n                                        <button className='cursor-default border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                                        </button>\r\n                                    \r\n                                    ))\r\n                                }\r\n                            </>\r\n\r\n                        :\r\n\r\n                        <>\r\n                            {[0,1,2,3,4].map((res) => ( // maps how many columns (empty input)\r\n                                guesses[firstDonetoFirst][res]\r\n                                ? \r\n                                <div  className='border-2 border-[#565758] flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                                    {guesses[firstDonetoFirst][res]}\r\n                                </div>\r\n                                : \r\n                                <div  className={`border-2 ${darkMode && 'border-[#3a3a3c]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`}>\r\n                                </div>\r\n                            \r\n                            ))}\r\n                        </>\r\n                        }\r\n                    </div>\r\n                )\r\n            })\r\n        }\r\n        \r\n        </div>\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Grid"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,UAAU,QAAQ,OAAO;AACtE,OAAOC,GAAG,MAAM,yBAAyB;AACzC,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAO,YAAY;AACnB,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,oBAAoB;AACrC,SAASC,iBAAiB,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAIhE,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEf,MAAM;IAACC;EAAQ,CAAC,GAAGhB,UAAU,CAACE,eAAe,CAAC;EAC9C,MAAM;IAACe,UAAU;IAAEC;EAAa,CAAC,GAAGlB,UAAU,CAACE,eAAe,CAAC;EAC/D,MAAM;IAACiB,WAAW;IAAEC;EAAe,CAAC,GAAGpB,UAAU,CAACE,eAAe,CAAC;EAClE,MAAM;IAACmB,QAAQ;IAAEC;EAAY,CAAC,GAAGtB,UAAU,CAACE,eAAe,CAAC;EAC5D,MAAM;IAACqB,WAAW;IAAEC;EAAe,CAAC,GAAGxB,UAAU,CAACE,eAAe,CAAC;EAClE,MAAM;IAACuB,QAAQ;IAAEC;EAAY,CAAC,GAAG1B,UAAU,CAACE,eAAe,CAAC;EAC5D,MAAM;IAACyB,QAAQ;IAAEC;EAAW,CAAC,GAAG5B,UAAU,CAACE,eAAe,CAAC;EAC3D,MAAM;IAAC2B,MAAM;IAAEC;EAAS,CAAC,GAAG9B,UAAU,CAACE,eAAe,CAAC;EACvD,MAAM;IAAC6B,OAAO;IAAEC;EAAU,CAAC,GAAGhC,UAAU,CAACE,eAAe,CAAC;EACzD,MAAM;IAAC+B,OAAO;IAAEC;EAAU,CAAC,GAAGlC,UAAU,CAACE,eAAe,CAAC;EACzD,MAAM;IAACiC,QAAQ;IAAEC;EAAW,CAAC,GAAGpC,UAAU,CAACE,eAAe,CAAC;EAC3D,MAAM,CAACmC,aAAa,EAAEC,gBAAgB,CAAC,GAAGxC,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM;IAACyC,GAAG;IAAEC;EAAM,CAAC,GAAGxC,UAAU,CAACE,eAAe,CAAC;EACjD,MAAM;IAACuC,MAAM;IAAEC;EAAU,CAAC,GAAG1C,UAAU,CAACE,eAAe,CAAC;EACxD,MAAM;IAACyC,SAAS;IAAEC;EAAY,CAAC,GAAG5C,UAAU,CAACE,eAAe,CAAC;EAC7D,MAAM;IAAC2C,SAAS;IAAEC;EAAY,CAAC,GAAG9C,UAAU,CAACE,eAAe,CAAC;EAC7D,MAAM;IAAC6C,UAAU;IAAEC;EAAa,CAAC,GAAGhD,UAAU,CAACE,eAAe,CAAC;EAC/D,MAAM;IAAC+C,QAAQ;IAAEC;EAAW,CAAC,GAAGlD,UAAU,CAACE,eAAe,CAAC;EAC3D,MAAM;IAACiD,YAAY;IAAEC;EAAe,CAAC,GAAGpD,UAAU,CAACE,eAAe,CAAC;EACnE,MAAM,CAACmD,YAAY,EAAEC,eAAe,CAAC,GAAGxD,QAAQ,CAAC,MAAM;IACnD,MAAMyD,oBAAoB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC7E,OAAOJ,oBAAoB,IAAI;MAC3BK,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACX,CAAC;EACL,CAAC,CAAC;EAEF,MAAMC,OAAO,GAAGnE,MAAM,CAAC;IAAC6D,KAAK,EAAE,KAAK;IAAEC,MAAM,EAAE,KAAK;IAAEC,KAAK,EAAE,KAAK;IAAEC,MAAM,EAAE,KAAK;IAAEC,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;EAC9G,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGtE,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACuE,WAAW,EAAEC,cAAc,CAAC,GAAGxE,QAAQ,CAAC,MAAM;IACjD,MAAMyE,mBAAmB,GAAGf,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC3E,OAAOY,mBAAmB,IAAI,EAAE;EACpC,CAAC,CAAC;EACF,MAAM;IAACC,OAAO;IAAEC;EAAU,CAAC,GAAGzE,UAAU,CAACE,eAAe,CAAC;EACzD,MAAM;IAACwE,wBAAwB;IAAEC;EAA2B,CAAC,GAAG3E,UAAU,CAACE,eAAe,CAAC;EAC3F,MAAM;IAAC0E,oBAAoB;IAAEC;EAAuB,CAAC,GAAG7E,UAAU,CAACE,eAAe,CAAC;EACnF,MAAM;IAAC4E,SAAS;IAAEC;EAAY,CAAC,GAAG/E,UAAU,CAACE,eAAe,CAAC;EAC7D,MAAM;IAAC8E,WAAW;IAAEC;EAAc,CAAC,GAAGjF,UAAU,CAACE,eAAe,CAAC;EACjE,MAAM,CAACgF,IAAI,EAAEC,OAAO,CAAC,GAAGrF,QAAQ,CAAC,MAAM;IACnC,MAAMsF,YAAY,GAAG5B,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC7D,OAAOyB,YAAY,IAAI,KAAK;EAChC,CAAC,CAAC;EAEFvF,SAAS,CAAC,MAAM;IAAE;IACd,MAAMwF,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACtF,GAAG,CAAC;MACjC,MAAMuF,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,MAAM,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;MAC/C3C,aAAa,CAACyC,KAAK,CAAC;IACxB,CAAC;IACDJ,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAENxF,SAAS,CAAC,MAAM;IAAE;IACd,IAAIkD,UAAU,CAAC6C,MAAM,GAAG,CAAC,IAAI,CAACvB,WAAW,EAAE;MAC3CC,cAAc,CAACvB,UAAU,CAAC8C,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;MAC1E5B,UAAU,CAAC,KAAK,CAAC;IACjB;EACJ,CAAC,EAAE,CAACrB,UAAU,CAAC,CAAC;EAEhBlD,SAAS,CAAC,MAAM;IAAE;IACd,IAAIwE,WAAW,EACX4B,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAAG7B,WAAW,CAAC;IACjD,MAAME,mBAAmB,GAAGf,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE;IACjF,IAAIH,IAAI,CAAC2C,SAAS,CAAC5B,mBAAmB,CAAC,KAAKf,IAAI,CAAC2C,SAAS,CAAC9B,WAAW,CAAC,EAAEX,YAAY,CAAC0C,OAAO,CAAC,aAAa,EAAE5C,IAAI,CAAC2C,SAAS,CAAC9B,WAAW,CAAC,CAAC;EACjJ,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjBxE,SAAS,CAAC,MAAM;IAAE;IACd,MAAMwG,OAAO,GAAIC,KAAK,IAAK;MACvB,IAAIA,KAAK,CAACC,GAAG,KAAK,WAAW,EAAE;QAC3BC,MAAM,CAACC,OAAO,CAACxD,QAAQ,CAAC,CAACyD,IAAI,CAAC,CAAC,CAACH,GAAG,EAACI,GAAG,CAAC,KAAK;UACzC,IAAI,CAACA,GAAG,IAAI3B,WAAW,GAAG,CAAC,EAAE;YACzB,MAAM4B,gBAAgB,GAAGL,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAAC;YAC9CT,cAAc,CAAC4B,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;YAChDpC,UAAU,CAAEqC,SAAS,KAAK;cAAE,GAAGA,SAAS;cAAE,CAACF,gBAAgB,GAAIE,SAAS,CAACF,gBAAgB,CAAC,CAACjB,KAAK,CAAC,CAAC,EAAEmB,SAAS,CAACF,gBAAgB,CAAC,CAAChB,MAAM,GAAG,CAAC;YAAE,CAAC,CAAC,CAAC;YAC/I,OAAO,IAAI;UACf;UACA,OAAO,KAAK;QAChB,CAAC,CAAC;MACN,CAAC,MAAM,IAAIU,KAAK,CAACC,GAAG,CAACQ,KAAK,CAAC,UAAU,CAAC,IAAIT,KAAK,CAACC,GAAG,CAACX,MAAM,KAAK,CAAC,EAAE;QAC9DY,MAAM,CAACC,OAAO,CAACxD,QAAQ,CAAC,CAACyD,IAAI,CAAC,CAAC,CAACH,GAAG,EAACI,GAAG,CAAC,KAAK;UACzC,IAAI,CAACA,GAAG,IAAI3B,WAAW,GAAG,CAAC,EAAE;YACzB,MAAM4B,gBAAgB,GAAGL,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAAC;YAC9CT,cAAc,CAAC4B,YAAY,IAAIA,YAAY,GAAG,CAAC,CAAC;YAChDpC,UAAU,CAAEqC,SAAS,KAAK;cAAE,GAAGA,SAAS;cAAE,CAACF,gBAAgB,GAAIE,SAAS,CAACF,gBAAgB,CAAC,GAAGN,KAAK,CAACC,GAAG,CAACP,WAAW,CAAC;YAAE,CAAC,CAAC,CAAC;YACxH,OAAO,IAAI;UACf;UACA,OAAO,KAAK;QAChB,CAAC,CAAC;MACN;IACJ,CAAC;IACD,IAAG,CAACzD,GAAG,EAAE;MACL;MACAyE,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEZ,OAAO,CAAC;;MAE7C;MACA,OAAO,MAAM;QACbW,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEb,OAAO,CAAC;MAChD,CAAC;IACL;EACJ,CAAC,EAAE,CAAC9D,GAAG,EAAEyC,WAAW,EAAE/B,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAElC,MAAM;IAACkE,YAAY;IAAEC;EAAe,CAAC,GAAGpH,UAAU,CAACE,eAAe,CAAC;EACnE,MAAM;IAACmH,WAAW;IAAEC;EAAc,CAAC,GAAGtH,UAAU,CAACE,eAAe,CAAC;EAEjEL,SAAS,CAAC,MAAM;IAAE;IACd,MAAMwG,OAAO,GAAIC,KAAK,IAAK;MACvB,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;QACvBC,MAAM,CAACC,OAAO,CAACxD,QAAQ,CAAC,CAACyD,IAAI,CAAC,CAAC,CAACH,GAAG,EAAEI,GAAG,CAAC,KAAK;UAC1C,IAAI,CAACA,GAAG,EAAE;YACN,MAAMY,wBAAwB,GAAGhB,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,EAAC;YACnE,IAAIvC,YAAY,CAACoE,wBAAwB,CAAC,EAAE;cACxC,MAAMX,gBAAgB,GAAGL,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;cAC/C,IAAI3C,UAAU,CAACyE,QAAQ,CAAChD,OAAO,CAACoC,gBAAgB,CAAC,CAACa,WAAW,CAAC,CAAC,CAAC,EAAE;gBAC9DL,eAAe,CAAC,IAAI,CAAC;gBACrBE,cAAc,CAAC,KAAK,CAAC;gBACrBpE,WAAW,CAACwE,QAAQ,KAAK;kBAAE,GAAGA,QAAQ;kBAAE,CAACnB,GAAG,GAAG;gBAAI,CAAC,CAAC,CAAC;gBACtDtB,cAAc,CAAC,CAAC,CAAC;cACrB,CAAC,MAAMnC,YAAY,CAAC,IAAI,CAAC;YAE7B,CAAC,MAAMF,YAAY,CAAC,IAAI,CAAC;YACzB,OAAO,IAAI;UACf;UACA,OAAO,KAAK;QAChB,CAAC,CAAC;MACN;IACJ,CAAC;IAED,IAAI,CAACL,GAAG,EAAE;MACNyE,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEZ,OAAO,CAAC;MAC7C,OAAO,MAAM;QACbW,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEb,OAAO,CAAC;MAChD,CAAC;IACL;EACJ,CAAC,EAAC,CAAC9D,GAAG,EAAEU,QAAQ,EAAEE,YAAY,CAAC,CAAC;EAEhC,MAAMwE,aAAa,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;IAAE;IACpC,IAAIC,UAAU,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAAChC,MAAM,EAAEmC,CAAC,EAAE,EAAE;MAClC,IAAIH,IAAI,CAACG,CAAC,CAAC,IAAIF,IAAI,CAACE,CAAC,CAAC,EAAE;QACpBD,UAAU,CAACE,IAAI,CAACD,CAAC,CAAC;MACtB;IACJ;IAAE,OAAOD,UAAU;EACvB,CAAC;EAEDjI,SAAS,CAAC,MAAM;IAAE;IACd2G,MAAM,CAACC,OAAO,CAACxD,QAAQ,CAAC,CAACyD,IAAI,CAAC,CAAC,CAACH,GAAG,EAAEI,GAAG,CAAC,KAAK;MAC1C,IAAI,CAACA,GAAG,EAAE;QACN,MAAMC,gBAAgB,GAAGL,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAC;QAC9C,MAAM6B,wBAAwB,GAAGhB,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,EAAC;QACnE,IAAIlB,OAAO,CAACoC,gBAAgB,CAAC,CAAChB,MAAM,IAAI,CAAC,EAAExC,eAAe,CAAC6E,YAAY,KAAK;UAAE,GAAGA,YAAY;UAAE,CAACV,wBAAwB,GAAG;QAAI,CAAC,CAAC,CAAC,CAAC,KAC9HnE,eAAe,CAAC6E,YAAY,KAAK;UAAE,GAAGA,YAAY;UAAE,CAACV,wBAAwB,GAAG;QAAK,CAAC,CAAC,CAAC;QAC7F,OAAO,IAAI;MACf;MACA,OAAO,KAAK;IAChB,CAAC,CAAC;EACN,CAAC,EAAE,CAAC/C,OAAO,CAAC,CAAC;EAEb,MAAM0D,WAAW,GAAGA,CAACC,SAAS,EAAEC,WAAW,KAAK;IAAE;IAC9C,MAAMC,UAAU,GAAGV,aAAa,CAACtD,WAAW,EAAE+D,WAAW,CAAC,CAAC,CAAC;IAC5D,IAAIE,MAAM,GAAG,CAAC;IACd,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,UAAU,CAACzC,MAAM,EAAEmC,CAAC,EAAE,EAAE;MACxCI,SAAS,GAAGA,SAAS,CAACxC,KAAK,CAAC,CAAC,EAAE,CAAC4C,QAAQ,CAACF,UAAU,CAACN,CAAC,CAAC,CAAC,GAAGO,MAAM,CAAC,CAAC,GAAGH,SAAS,CAACxC,KAAK,CAAC4C,QAAQ,CAACF,UAAU,CAACN,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGO,MAAM,CAAC;MAC1H;MACAA,MAAM,EAAE;IACZ;IACA,OAAOH,SAAS;EACpB,CAAC;EAED,MAAMK,SAAS,GAAGA,CAACL,SAAS,EAAEM,MAAM,EAAEC,GAAG,KAAK;IAAE;IAC5C,IAAID,MAAM,IAAIpE,WAAW,CAACqE,GAAG,CAAC,EAAE;MAC5B,OAAO,OAAO;IAClB,CAAC,MAAM,IAAIP,SAAS,CAACX,QAAQ,CAACiB,MAAM,CAAC,EAAE;MACnC,OAAO,QAAQ;IACnB,CAAC,MAAM;MACH,OAAO,MAAM;IACjB;EACJ,CAAC;EAED,IAAIE,QAAQ;EAEZ,MAAMC,YAAY,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAAE;IACjC,IAAIzF,YAAY,CAACO,KAAK,EAAE;MACpB,MAAMmF,WAAW,GAAGJ,QAAQ;MAC5BA,QAAQ,GAAGA,QAAQ,CAACK,OAAO,CAACH,GAAG,EAAE,EAAE,CAAC;MACpC,OAAOL,SAAS,CAACO,WAAW,EAAEF,GAAG,EAAEC,GAAG,CAAC,EAAC;IAC5C;EACJ,CAAC;EAED,MAAMG,QAAQ,GAAGlJ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE5BF,SAAS,CAAC,MAAM;IAAE;IACd,MAAMqJ,gBAAgB,GAAG1F,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;IACvE,IAAIuF,gBAAgB,EAAED,QAAQ,CAACE,OAAO,GAAGD,gBAAgB;EAC7D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACE,aAAa,EAAEC,gBAAgB,CAAC,GAAGvJ,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMwJ,SAAS,GAAGvJ,MAAM,CAAC,IAAI,CAAC;EAC9BF,SAAS,CAAC,MAAM;IAAE;IACd,IAAIyJ,SAAS,CAACH,OAAO,EAAE;MAAE;MACrBG,SAAS,CAACH,OAAO,GAAG,KAAK;MACzB;IACJ;IACA,IAAI,CAAChC,YAAY,EAAE;MAAE;MACjB;IACJ;IAEA,IAAI,CAACiC,aAAa,EAAEC,gBAAgB,CAAC,IAAI,CAAC;IAK1C,MAAME,WAAW,GAAG/C,MAAM,CAACC,OAAO,CAACxD,QAAQ,CAAC,CAACuG,MAAM,CAAC,CAACC,GAAG,EAAE,CAAClD,GAAG,EAAEmD,KAAK,CAAC,KAAK;MACvE,OAAOA,KAAK,GAAGnD,GAAG,GAAGkD,GAAG;IAC5B,CAAC,EAAE,CAAC,CAAC;IAED,MAAM7C,gBAAgB,GAAG2C,WAAW,CAAC7D,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,IAAK6D,WAAW,KAAK,CAAC,IAAI,CAACrF,OAAO,CAACiF,OAAO,CAACvC,gBAAgB,CAAC,EAAE;MAAE;;MAE5D+B,QAAQ,GAAGT,WAAW,CAAC7D,WAAW,EAAEG,OAAO,CAACoC,gBAAgB,CAAC,CAAC;MAC9D,MAAM+C,UAAU,GAAGnF,OAAO,CAACoC,gBAAgB,CAAC,CAAClB,KAAK,CAAC,EAAE,CAAC,CAACkE,GAAG,CAAC,CAACf,GAAG,EAAEC,GAAG;MAAO;MACvEF,YAAY,CAACC,GAAG,EAAEC,GAAG,CACxB,CAAC;MACFxF,eAAe,CAACuG,WAAW,KAAK;QAC5B,GAAGA,WAAW;QACd,CAACjD,gBAAgB,GAAI,CAAC,GAAGiD,WAAW,CAACjD,gBAAgB,CAAC,EAAE,GAAG+C,UAAU;MACzE,CAAC,CAAC,CAAC;MACH,IAAIG,UAAU,GAAGtF,OAAO,CAACoC,gBAAgB,CAAC,CAAClB,KAAK,CAAC,EAAE,CAAC,CAAC8D,MAAM,CAAC,CAACC,GAAG,EAAEZ,GAAG,EAAEC,GAAG,KAAK;QAAE;QAC7E,IAAKW,GAAG,CAACZ,GAAG,CAAC,IAAI,OAAO,IAAIY,GAAG,CAACZ,GAAG,CAAC,IAAI,QAAQ,EAAE;;UAE1C;UACA;UACA;QAAA,CAEP,MACDY,GAAG,CAACZ,GAAG,CAAC,GAAGc,UAAU,CAACb,GAAG,CAAC;QAC1B,OAAOW,GAAG;MACd,CAAC,EAAE,CAAC,CAAC,CAAC;MACNzH,UAAU,CAAC6H,WAAW,IAAI,CACtB,GAAGA,WAAW,EACd;QAAE,GAAGC;MAAW,CAAC,CACpB,CAAC;MACF,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACxD,MAAM,CAACyD,MAAM,CAACH,UAAU,CAAC,CAAC;MAC9C,MAAMlG,KAAK,GAAG,CAAC,GAAGmG,GAAG,CAAC,CAAC,CAAC,CAAC;MACzB,IAAIA,GAAG,CAACG,IAAI,IAAI,CAAC,IAAItG,KAAK,IAAI,OAAO,EAAE;QACnCpB,MAAM,CAAC,IAAI,CAAC;QACZkB,YAAY,CAAC0C,OAAO,CAAC,KAAK,EAAE5C,IAAI,CAAC2C,SAAS,CAAC,IAAI,CAAC,CAAC;QACjD/D,WAAW,CAAC6G,QAAQ,CAACE,OAAO,CAAC;QAC7BzF,YAAY,CAAC0C,OAAO,CAAC,UAAU,EAAE5C,IAAI,CAAC2C,SAAS,CAAE8C,QAAQ,CAACE,OAAO,CAAC,CAAC;QACnE;MACJ,CAAC,MAAM,IAAKvC,gBAAgB,IAAI,OAAO,EAAE;QACrClE,UAAU,CAAC,IAAI,CAAC;QAChBgB,YAAY,CAAC0C,OAAO,CAAC,QAAQ,EAAE5C,IAAI,CAAC2C,SAAS,CAAC1D,MAAM,CAAC,CAAC;QACtD0C,OAAO,CAAC,IAAI,CAAC;QACbzB,YAAY,CAAC0C,OAAO,CAAC,MAAM,EAAE5C,IAAI,CAAC2C,SAAS,CAACjB,IAAI,CAAC,CAAC;QAClD;MACJ;MACA+D,QAAQ,CAACE,OAAO,IAAI,CAAC;MACrBzF,YAAY,CAAC0C,OAAO,CAAC,YAAY,EAAC5C,IAAI,CAAC2C,SAAS,CAAE8C,QAAQ,CAACE,OAAO,CAAC,CAAC,EAAC;MACrEjF,OAAO,CAACiF,OAAO,CAACvC,gBAAgB,CAAC,GAAG,IAAI;IAC5C;EACR,CAAC,EAAE,CAAC3D,QAAQ,CAAC,CAAC;EAEdpD,SAAS,CAAC,MAAM;IACZ,MAAMsK,gBAAgB,GAAG3G,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI;MACrEyG,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,KAAK;MAChBC,SAAS,EAAE;IACf,CAAC;IACD,IAAIjH,IAAI,CAAC2C,SAAS,CAACgE,gBAAgB,CAAC,KAAK3G,IAAI,CAAC2C,SAAS,CAAClD,QAAQ,CAAC,EAAES,YAAY,CAAC0C,OAAO,CAAC,UAAU,EAAE5C,IAAI,CAAC2C,SAAS,CAAClD,QAAQ,CAAC,CAAC;EACjI,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEdpD,SAAS,CAAC,MAAM;IACZ,MAAM0D,oBAAoB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI;MAC7EC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACX,CAAC;IACD,IAAIT,IAAI,CAAC2C,SAAS,CAAC5C,oBAAoB,CAAC,KAAKC,IAAI,CAAC2C,SAAS,CAAC9C,YAAY,CAAC,EAAEK,YAAY,CAAC0C,OAAO,CAAC,cAAc,EAAE5C,IAAI,CAAC2C,SAAS,CAAC9C,YAAY,CAAC,CAAC;IAE7I,MAAMqH,eAAe,GAAGlH,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI;MACnEC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACX,CAAC;IACD,IAAIT,IAAI,CAAC2C,SAAS,CAACuE,eAAe,CAAC,KAAKlH,IAAI,CAAC2C,SAAS,CAAC3B,OAAO,CAAC,EAAEd,YAAY,CAAC0C,OAAO,CAAC,SAAS,EAAE5C,IAAI,CAAC2C,SAAS,CAAC3B,OAAO,CAAC,CAAC;IAEzHyB,OAAO,CAACC,GAAG,CAAC7C,YAAY,CAAC;EAE7B,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElBxD,SAAS,CAAC,MAAM;IACZ,MAAM8K,eAAe,GAAGnH,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE;IACzE,IAAIH,IAAI,CAAC2C,SAAS,CAACwE,eAAe,CAAC,KAAKnH,IAAI,CAAC2C,SAAS,CAACpE,OAAO,CAAC,EAAE2B,YAAY,CAAC0C,OAAO,CAAC,SAAS,EAAE5C,IAAI,CAAC2C,SAAS,CAACpE,OAAO,CAAC,CAAC;EAE7H,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEb,MAAM6I,OAAO,GAAG5K,UAAU,CAACE,eAAe,CAAC,CAAC,CAAC;EAC7CL,SAAS,CAAC,MAAM;IAAE;IACd,MAAMgL,eAAe,GAAGrH,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,CAAC;IACxE,IAAIkH,eAAe,EAAED,OAAO,CAACzB,OAAO,GAAG0B,eAAe;EAC1D,CAAC,EAAE,EAAE,CAAC;EACNhL,SAAS,CAAC,MAAM;IAAE;IACd,IAAM0C,GAAG,GAAGE,MAAM,IAAK,CAACmI,OAAO,CAACzB,OAAO,EAAE;MACrC5I,KAAK,CAACuK,IAAI,CAAC,mCAAmC,EAAE;QAAC,GAAGjJ,MAAM;QAAEU,GAAG,EAAEA,GAAG;QAAEJ,QAAQ,EAAEA;MAAQ,CAAC,CAAC,CACzF4I,IAAI,CAAClC,GAAG,IAAI;QACT5C,OAAO,CAACC,GAAG,CAAC2C,GAAG,CAACmC,IAAI,CAACC,OAAO,CAAC;QAC7BL,OAAO,CAACzB,OAAO,GAAG,IAAI;QACtBzF,YAAY,CAAC0C,OAAO,CAAC,cAAc,EAAE5C,IAAI,CAAC2C,SAAS,CAACyE,OAAO,CAACzB,OAAO,CAAC,CAAC;MACzE,CAAC,CAAC,CACD+B,KAAK,CAACC,GAAG,IAAIlF,OAAO,CAACC,GAAG,CAACiF,GAAG,CAAC,CAAC;IACnC;EACJ,CAAC,EAAE,CAAC5I,GAAG,EAAEE,MAAM,CAAC,CAAC;EAEjB5C,SAAS,CAAC,MAAM;IAAE;IACd,IAAI0C,GAAG,EAAE;MACLD,gBAAgB,CAAC,IAAI,CAAC;MACtB8I,UAAU,CAAC,MAAM;QACblJ,UAAU,CAAC,IAAI,CAAC;MACpB,CAAC,EAAE,IAAI,CAAC;IACZ;EACJ,CAAC,EAAE,CAACK,GAAG,CAAC,CAAC;EAET,IAAGF,aAAa,EAAE;IAAE;IAChB+I,UAAU,CAAC,YAAW;MAClBpE,QAAQ,CAACqE,cAAc,CAAC,SAAS,CAAC,KAAKrE,QAAQ,CAACqE,cAAc,CAAC,SAAS,CAAC,CAACC,EAAE,GAAG,KAAK,CAAC;MACrFhJ,gBAAgB,CAAC,KAAK,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC;EAChB;EAEA,IAAGK,SAAS,EAAE;IAAE;IACZyI,UAAU,CAAC,YAAW;MAClBpE,QAAQ,CAACqE,cAAc,CAAC,SAAS,CAAC,KAAKrE,QAAQ,CAACqE,cAAc,CAAC,SAAS,CAAC,CAACC,EAAE,GAAG,KAAK,CAAC;MACrF1I,YAAY,CAAC,KAAK,CAAC;IAEnB,CAAC,EAAE,IAAI,CAAC;EAEhB;EAEA,IAAIC,SAAS,EAAE;IAAE;IACbuI,UAAU,CAAC,YAAW;MAClBpE,QAAQ,CAACqE,cAAc,CAAC,SAAS,CAAC,KAAKrE,QAAQ,CAACqE,cAAc,CAAC,SAAS,CAAC,CAACC,EAAE,GAAG,KAAK,CAAC;MACrFxI,YAAY,CAAC,KAAK,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC;EAChB;EAEA,IAAI4B,wBAAwB,EAAE;IAAE;IAC5B0G,UAAU,CAAC,YAAW;MAClBpE,QAAQ,CAACqE,cAAc,CAAC,SAAS,CAAC,KAAKrE,QAAQ,CAACqE,cAAc,CAAC,SAAS,CAAC,CAACC,EAAE,GAAG,KAAK,CAAC;MACrF3G,2BAA2B,CAAC,KAAK,CAAC;IAClC,CAAC,EAAE,IAAI,CAAC;EAChB;EAEA,IAAIC,oBAAoB,EAAE;IAAE;IACxBwG,UAAU,CAAC,YAAW;MAClBpE,QAAQ,CAACqE,cAAc,CAAC,SAAS,CAAC,KAAKrE,QAAQ,CAACqE,cAAc,CAAC,SAAS,CAAC,CAACC,EAAE,GAAG,KAAK,CAAC;MACrFzG,uBAAuB,CAAC,KAAK,CAAC;IAC9B,CAAC,EAAE,IAAI,CAAC;EAChB;EAEAhF,SAAS,CAAC,MAAM;IACZ,IAAIqF,IAAI,EAAE;MAAE;MACRkG,UAAU,CAAC,YAAW;QAClBlJ,UAAU,CAAC,IAAI,CAAC;MACpB,CAAC,EAAE,IAAI,CAAC;IACZ;EACJ,CAAC,EAAE,CAACgD,IAAI,CAAC,CAAC;EAEV,SAASqG,eAAeA,CAAA,EAAG;IAAE;IACzB,MAAMC,cAAc,GAAGhF,MAAM,CAACC,OAAO,CAACxD,QAAQ,CAAC,CAACwI,SAAS,CAAC,CAAC,CAAClF,GAAG,EAAEmD,KAAK,CAAC,KAAK,CAACA,KAAK,CAAC;IACnF,IAAI8B,cAAc,IAAI,CAAC,CAAC,EAAE;MACtB,OAAOA,cAAc;IACzB,CAAC,MAAM,OAAO,CAAC;EACnB;EAEA,MAAME,WAAW,GAAG;EAAE;EAClB,EAAE,EACF,QAAQ,EACR,aAAa,EACb,YAAY,EACZ,UAAU,EACV,OAAO,EACP,MAAM,CACT;EAED,MAAM;IAACC,KAAK;IAAEC;EAAQ,CAAC,GAAG5L,UAAU,CAACE,eAAe,CAAC;EAErDL,SAAS,CAAC,MAAM;IACZ,IAAI,CAACoC,OAAO,EAAE;MACVmJ,UAAU,CAAC,YAAW;QAClBQ,QAAQ,CAAC,KAAK,CAAC;MACf,CAAC,EAAE,IAAI,CAAC;IAChB;EACJ,CAAC,EAAE,CAAC3J,OAAO,CAAC,CAAC;EAEb,SAAS4J,oBAAoBA,CAAA,EAAG;IAC5BT,UAAU,CAAC,MAAM;MACb9D,cAAc,CAAC,IAAI,CAAC;IACxB,CAAC,EAAE,GAAG,CAAC;EACX;EAIF,oBAEE3G,OAAA;IAAKmL,SAAS,EAAE,4CAA4C9K,QAAQ,GAAG,yBAAyB,GAAG,qBAAqB,MAAO;IAAA+K,QAAA,GAE1HjH,SAAS,iBAAInE,OAAA;MAAKmL,SAAS,EAAC,uDAAuD;MAAAC,QAAA,GAAC,GAAC,eAAApL,OAAA;QAAMmL,SAAS,EAAC,kEAAkE;QAAAC,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAEhMxK,QAAQ,IAAK,CAACN,QAAQ,IAAI,CAACE,WAAW,IAAI,CAACJ,WAAW,IAAI,CAACM,QAAU,iBAAId,OAAA;MAAKmL,SAAS,EAAC,2DAA2D;MAAAC,QAAA,GAAC,GAAC,eAAApL,OAAA;QAAQmL,SAAS,EAAE,IAAI9K,QAAQ,GAAE,eAAe,GAAG,eAAe,mEAAqE;QAAA+K,QAAA,EAAElK,MAAM,CAACuK;MAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAE9T9J,aAAa,iBAAI1B,OAAA;MAAK2K,EAAE,EAAC,SAAS;MAACQ,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAApL,OAAA;QAAMmL,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAEL,WAAW,CAACH,eAAe,CAAC,CAAC,CAAC,IAAI;MAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAE3OxJ,SAAS,iBAAIhC,OAAA;MAAK2K,EAAE,EAAC,SAAS;MAACQ,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAApL,OAAA;QAAMmL,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAC;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAEnNtJ,SAAS,iBAAIlC,OAAA;MAAK2K,EAAE,EAAC,SAAS;MAACQ,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAApL,OAAA;QAAMmL,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAEjNzH,wBAAwB,iBAAI/D,OAAA;MAAK2K,EAAE,EAAC,SAAS;MAACQ,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAApL,OAAA;QAAMmL,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAC;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAE5OvH,oBAAoB,iBAAIjE,OAAA;MAAK2K,EAAE,EAAC,SAAS;MAACQ,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAApL,OAAA;QAAMmL,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EASnO,CAAClK,OAAO,IAAI0J,KAAK,kBAClBhL,OAAA,CAACH,IAAI;MAAC6L,EAAE,EAAEpK,OAAQ;MAACqK,OAAO,EAAE,GAAI;MAAAP,QAAA,eAC5BpL,OAAA;QAAKmL,SAAS,EAAC,gEAAgE;QAAAC,QAAA,eAC3EpL,OAAA,CAACL,UAAU;UAAA0L,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,EAkBNlK,OAAO,iBAAItB,OAAA;MAAKmL,SAAS,EAAE,4CAA4C9K,QAAQ,GAAG,aAAa,GAAG,aAAa;IAAS;MAAAgL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChH,CAAC,EAET1J,MAAM,iBAAI9B,OAAA;MAAKmL,SAAS,EAAC,wDAAwD;MAAAC,QAAA,GAAC,GAAC,eAAApL,OAAA;QAAMmL,SAAS,EAAC,+DAA+D;QAAAC,QAAA,EAAE1H;MAAW;QAAA2H,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAEtMlG,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC,eACZvF,OAAA;MAAKmL,SAAS,EAAC,0CAA0C;MAAAC,QAAA;MAEnD;MACFvF,MAAM,CAACC,OAAO,CAACxD,QAAQ,CAAC,CAAC2G,GAAG,CAAC,CAAC,CAACrD,GAAG,EAAEmD,KAAK,CAAC,KAAK;QAAE;;QAE7C,MAAMH,WAAW,GAAG/C,MAAM,CAACC,OAAO,CAACxD,QAAQ,CAAC,CAACuG,MAAM,CAAC,CAACC,GAAG,EAAE,CAAClD,GAAG,EAAEmD,KAAK,CAAC,KAAK;UACvE,OAAOA,KAAK,GAAGnD,GAAG,GAAGkD,GAAG;QAC5B,CAAC,EAAE,CAAC,CAAC;QAEL,MAAM7C,gBAAgB,GAAGL,GAAG,CAACb,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAG7C;UAAA;UACI;UACA/E,OAAA;YAAcmL,SAAS,EAAC,uBAAuB;YAAAC,QAAA,EAGzCrC,KAAK,IAAI,CAACN,aAAa,IAAMA,aAAa,IAAI7C,GAAG,KAAKgD,WAAY;YAAA;YAAK;YACzE5I,OAAA,CAAAE,SAAA;cAAAkL,QAAA,EACK1I,YAAY,CAACuD,gBAAgB,CAAC,IAAIvD,YAAY,CAACuD,gBAAgB,CAAC,CAAChB,MAAM,GAAG,CAAC,GACvEvC,YAAY,CAACuD,gBAAgB,CAAC,CAACgD,GAAG,CAAC,CAACf,GAAG,EAAEC,GAAG,KAAK;gBAAE;gBAChD,MAAM6C,KAAK,GAAG7C,GAAG,GAAG,GAAG;gBACvB,MAAMyD,MAAM,GAAG;kBACXC,cAAc,EAAE,GAAGb,KAAK;gBAC5B,CAAC;gBACD,MAAMc,MAAM,GAAGpF,WAAW,GAAG,CAAC,CAAC,GAAG;kBAAEqF,eAAe,EAAE,aAAa;kBAAEC,KAAK,EAAE,aAAa;kBAAEC,WAAW,EAAG5L,QAAQ,GAAG,SAAS,GAAG;gBAAU,CAAC;gBAC1I,oBACIL,OAAA;kBAAQkM,KAAK,EAAE;oBAAE,GAAGN,MAAM;oBAAG,GAAGE;kBAAM,CAAE;kBAACK,gBAAgB,EAAEjB,oBAAqB;kBAACC,SAAS,EAAI,gCAC1FjD,GAAG,IAAI,OAAO,GAAK5H,UAAU,GAAG,SAAS,GAAI,OAAO,GACpD4H,GAAG,IAAI,QAAQ,GAAK5H,UAAU,GAAG,UAAU,GAAG,QAAQ,GACpDD,QAAQ,GAAG,QAAQ,GAAG,MAAQ;AAC5E,uIAAyI;kBAAA+K,QAAA,EAC5FvH,OAAO,CAACoC,gBAAgB,CAAC,CAACkC,GAAG,CAAC,IAAI;gBAAE;kBAAAkD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACjC,CAAC;cAEjB,CAAC,CAAC,GAAK,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAACvC,GAAG,CAAEf,GAAG;cAAO;cAC9BrE,OAAO,CAACoC,gBAAgB,CAAC,CAACiC,GAAG,CAAC,gBAE9BlI,OAAA;gBAAQmL,SAAS,EAAC,yHAAyH;gBAAAC,QAAA,EACtIvH,OAAO,CAACoC,gBAAgB,CAAC,CAACiC,GAAG;cAAC;gBAAAmD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC3B,CAAC,gBAETxL,OAAA;gBAAQmL,SAAS,EAAC;cAAyH;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnI,CAEX;YAAC,gBAER,CAAC,GAGF/C,aAAa,IAAK7C,GAAG,KAAKgD,WAAY,IAAIG,KAAK;YAAA;YAAI;YAChD/I,OAAA,CAAAE,SAAA;cAAAkL,QAAA,EACK1I,YAAY,CAACuD,gBAAgB,CAAC,IAAIvD,YAAY,CAACuD,gBAAgB,CAAC,CAAChB,MAAM,GAAG,CAAC,GACvEvC,YAAY,CAACuD,gBAAgB,CAAC,CAACgD,GAAG,CAAC,CAACf,GAAG,EAAEC,GAAG;cAAA;cAAO;cAEhDnI,OAAA;gBAAQmL,SAAS,EAAI,2BACjBjD,GAAG,IAAI,OAAO,GAAK5H,UAAU,GAAG,SAAS,GAAI,OAAO,GACpD4H,GAAG,IAAI,QAAQ,GAAK5H,UAAU,GAAG,UAAU,GAAG,QAAQ,GACpDD,QAAQ,GAAG,QAAQ,GAAG,MAAQ;AAC5E,uIAAyI;gBAAA+K,QAAA,EAC5FvH,OAAO,CAACoC,gBAAgB,CAAC,CAACkC,GAAG,CAAC,IAAI;cAAE;gBAAAkD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjC,CAEX,CAAC,GAAK,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAACvC,GAAG,CAAEf,GAAG;cAAO;cAC9BrE,OAAO,CAACoC,gBAAgB,CAAC,CAACiC,GAAG,CAAC,gBAE9BlI,OAAA;gBAAQmL,SAAS,EAAC,yHAAyH;gBAAAC,QAAA,EACtIvH,OAAO,CAACoC,gBAAgB,CAAC,CAACiC,GAAG;cAAC;gBAAAmD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC3B,CAAC,gBAETxL,OAAA;gBAAQmL,SAAS,EAAC;cAAyH;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnI,CAEX;YAAC,gBAER,CAAC,gBAIPxL,OAAA,CAAAE,SAAA;cAAAkL,QAAA,EACK,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAACnC,GAAG,CAAEf,GAAG;cAAO;cACxBrE,OAAO,CAACoC,gBAAgB,CAAC,CAACiC,GAAG,CAAC,gBAE9BlI,OAAA;gBAAMmL,SAAS,EAAC,2GAA2G;gBAAAC,QAAA,EACtHvH,OAAO,CAACoC,gBAAgB,CAAC,CAACiC,GAAG;cAAC;gBAAAmD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC9B,CAAC,gBAENxL,OAAA;gBAAMmL,SAAS,EAAE,YAAY9K,QAAQ,IAAI,kBAAkB;cAAmF;gBAAAgL,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACzI,CAER;YAAC,gBACJ;UAAC,GA7EG5F,GAAG;YAAAyF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OA+ER;QAAC;MAEd,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAEV,CAAC;AAAApL,EAAA,CA/jBKD,IAAI;AAAAiM,EAAA,GAAJjM,IAAI;AAikBV,eAAeA,IAAI;AAAA,IAAAiM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}