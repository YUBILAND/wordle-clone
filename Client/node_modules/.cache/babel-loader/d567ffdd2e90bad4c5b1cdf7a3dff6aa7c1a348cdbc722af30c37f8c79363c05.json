{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\wordle-clone\\\\Client\\\\src\\\\components\\\\Keys.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react';\nimport Keyboard from 'react-simple-keyboard';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport './Keys.css';\nimport BackspaceOutlinedIcon from '@mui/icons-material/BackspaceOutlined';\nimport inputMask from \"simple-keyboard-input-mask\";\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Keys = () => {\n  _s();\n  const {\n    darkMode,\n    setDarkMode\n  } = useContext(KeyboardContext);\n  const [green, setGreen] = useState(() => {\n    const existingGreen = JSON.parse(localStorage.getItem('green'));\n    return existingGreen || [];\n  });\n  const [yellow, setYellow] = useState(() => {\n    const existingYellow = JSON.parse(localStorage.getItem('yellow'));\n    return existingYellow || [];\n  });\n  const [gray, setGray] = useState(() => {\n    const existingGray = JSON.parse(localStorage.getItem('gray'));\n    return existingGray || [];\n  });\n  const [buttonTheme, setButtonTheme] = useState([]);\n  const {\n    kbColor\n  } = useContext(KeyboardContext);\n  const {\n    colorBlind,\n    setColorBlind\n  } = useContext(KeyboardContext);\n  useEffect(() => {\n    // break down guess into their color states by letter\n    // console.log(kbColor)\n    if (kbColor.length) {\n      console.log(kbColor);\n      // kbColor.map((guess) => (\n      Object.entries(kbColor.at(-1)).forEach(([letter, color]) => {\n        color == \"green\" ? setGreen(prevKey => [...prevKey, letter.toLowerCase()]) : color == 'yellow' ? setYellow(prevKey => [...prevKey, letter.toLowerCase()]) : setGray(prevKey => [...prevKey, letter.toLowerCase()]);\n      });\n      // console.log(res)\n      // ))\n    }\n  }, [kbColor]);\n  const [greenString, setGreenString] = useState('');\n  const [yellowString, setYellowString] = useState('');\n  const [grayString, setGrayString] = useState('');\n  useEffect(() => {\n    //overwrites previous inaccurate guess with updated color, ex. word is blimp, first guess is pupil, l is yellow, second guess plane, l is green , overwrite with green\n\n    // console.log(`green is ${[...new Set(green)]}`)\n    // console.log(`yellow is ${[...new Set(yellow)]}`)\n    // console.log(`gray is ${[...new Set(gray)]}`)\n\n    // whitespace is for the react keyboard readability\n    // console.log('green is ', green)\n    // console.log('yellow is ', yellow)\n    // console.log('gray is ', new Set(gray))\n\n    //green\n    const existingGreen = JSON.parse(localStorage.getItem('green')) || [];\n    if (JSON.stringify(existingGreen) !== JSON.stringify(green)) localStorage.setItem('green', JSON.stringify(Array.from(new Set(green))));\n    const existingYellow = JSON.parse(localStorage.getItem('yellow')) || [];\n    if (JSON.stringify(existingYellow) !== JSON.stringify(yellow)) localStorage.setItem('yellow', JSON.stringify(Array.from(new Set(yellow))));\n    const existingGray = JSON.parse(localStorage.getItem('gray')) || [];\n    if (JSON.stringify(existingGray) !== JSON.stringify(gray)) localStorage.setItem('gray', JSON.stringify(Array.from(new Set(gray))));\n    green && setGreenString(green.join(' ')); //green always should be displayed\n\n    const removeGreenfromYellow = yellow.filter(color => !green.includes(color));\n    const removeGreenfromGray = gray.filter(color => !green.includes(color));\n    const removeYellowfromGray = removeGreenfromGray.filter(color => !removeGreenfromYellow.includes(color));\n    setYellowString(removeGreenfromYellow.join(' '));\n    setGrayString(removeYellowfromGray.join(' '));\n  }, [green, yellow, gray]);\n  useEffect(() => {\n    // switches color of button theme based on color blind mode\n    if (colorBlind) {\n      setButtonTheme(prevTheme => prevTheme.map(item => {\n        if (item.class === 'green') {\n          return {\n            ...item,\n            class: 'CBgreen'\n          };\n        } else if (item.class === 'yellow') {\n          return {\n            ...item,\n            class: 'CByellow'\n          };\n        } else {\n          return item;\n        }\n      }));\n    } else {\n      setButtonTheme(prevTheme => prevTheme.map(item => {\n        if (item.class === 'CBgreen') {\n          return {\n            ...item,\n            class: 'green'\n          };\n        } else if (item.class === 'CByellow') {\n          return {\n            ...item,\n            class: 'yellow'\n          };\n        } else {\n          return item;\n        }\n      }));\n    }\n  }, [colorBlind]);\n  useEffect(() => {\n    if (darkMode) {\n      setButtonTheme(prevTheme => prevTheme.map(item => {\n        if (item.class === 'buttons') {\n          return {\n            ...item,\n            class: 'DMbuttons'\n          };\n        } else if (item.class === 'gray') {\n          return {\n            ...item,\n            class: 'KBDMgray'\n          };\n        } else {\n          return item;\n        }\n      }));\n    } else {\n      setButtonTheme(prevTheme => prevTheme.map(item => {\n        if (item.class === 'DMbuttons') {\n          return {\n            ...item,\n            class: 'buttons'\n          };\n        } else if (item.class === 'DMgray') {\n          return {\n            ...item,\n            class: 'gray'\n          };\n        } else {\n          return item;\n        }\n      }));\n    }\n  }, [darkMode]);\n  useEffect(() => {\n    //sets keyboard color on each guess rerender\n    setButtonTheme([{\n      class: `${colorBlind ? 'CBgreen' : 'green'}`,\n      buttons: greenString || ' '\n    }, {\n      class: `${colorBlind ? 'CByellow' : 'yellow'}`,\n      buttons: yellowString || ' '\n    }, {\n      class: `${darkMode ? 'DMgray' : 'gray'}`,\n      buttons: grayString || ' '\n    }, {\n      class: `${darkMode ? 'DMbuttons' : 'buttons'}`,\n      buttons: 'q w e r t y u i o p a s d f g h j k l ENTER z x c v b n m DEL'\n    }]);\n  }, [greenString, yellowString, grayString]);\n\n  // useEffect(() => {\n  //     if (buttonTheme.length > 0) {\n  //     console.table(`buttonTheme=${buttonTheme[2]['buttons']}`)\n  //     }\n  // }, [buttonTheme])\n\n  const {\n    guesses,\n    setGuesses\n  } = useContext(KeyboardContext);\n  const {\n    guessLength,\n    setGuessLength\n  } = useContext(KeyboardContext);\n  const kbChange = input => {\n    // if (input.slice(-1) == \"L\") {\n\n    // } else {\n\n    // }\n  };\n  const {\n    doneHash,\n    setDoneHash\n  } = useContext(KeyboardContext);\n  const {\n    canEnterHash,\n    setCanEnterHash\n  } = useContext(KeyboardContext);\n  const {\n    notEnough,\n    setNotEnough\n  } = useContext(KeyboardContext);\n  const {\n    wrongWord,\n    setWrongWord\n  } = useContext(KeyboardContext);\n  const {\n    wordleList,\n    setWordleList\n  } = useContext(KeyboardContext);\n  const onKeyPress = button => {\n    // console.log(\"Button pressed\", button);\n    Object.entries(doneHash).some(([key, value]) => {\n      const doneKey = key.replace('Done', '');\n      const canEnterKey = doneKey + 'CanEnter';\n      if (!value) {\n        if (button == \"DEL\") {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            [doneKey]: prevGuess[doneKey].slice(0, prevGuess[doneKey].length - 1)\n          }));\n        } else if (button == \"ENTER\") {\n          if (canEnterHash[canEnterKey]) {\n            if (wordleList.includes(guesses[doneKey].toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                [key]: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            [doneKey]: prevGuess[doneKey] + button.toUpperCase()\n          }));\n        }\n        return true;\n      }\n      return false;\n    });\n  };\n  useEffect(() => {\n    // console.log(guesses.first)\n  }, [guesses]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mx-auto w-[500px] h-[198px]\",\n    children: /*#__PURE__*/_jsxDEV(Keyboard, {\n      className: \"kibord w-full p-0\",\n      onChange: kbChange,\n      onKeyPress: onKeyPress,\n      modules: [inputMask],\n      inputMask: {\n        default: {\n          mask: '12345',\n          regex: /^[a-zA-Z0-9_-]*$/\n        }\n      },\n      layout: {\n        default: ['q w e r t y u i o p', 'a s d f g h j k l', 'ENTER z x c v b n m DEL']\n      },\n      buttonTheme: buttonTheme,\n      theme: \"hg-theme-default board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 9\n  }, this);\n};\n_s(Keys, \"Gtq3m2Qa22PXR5mtSowTSNTIdWU=\");\n_c = Keys;\nexport default Keys;\nvar _c;\n$RefreshReg$(_c, \"Keys\");","map":{"version":3,"names":["React","useState","useContext","useEffect","Keyboard","BackspaceOutlinedIcon","inputMask","KeyboardContext","jsxDEV","_jsxDEV","Keys","_s","darkMode","setDarkMode","green","setGreen","existingGreen","JSON","parse","localStorage","getItem","yellow","setYellow","existingYellow","gray","setGray","existingGray","buttonTheme","setButtonTheme","kbColor","colorBlind","setColorBlind","length","console","log","Object","entries","at","forEach","letter","color","prevKey","toLowerCase","greenString","setGreenString","yellowString","setYellowString","grayString","setGrayString","stringify","setItem","Array","from","Set","join","removeGreenfromYellow","filter","includes","removeGreenfromGray","removeYellowfromGray","prevTheme","map","item","class","buttons","guesses","setGuesses","guessLength","setGuessLength","kbChange","input","doneHash","setDoneHash","canEnterHash","setCanEnterHash","notEnough","setNotEnough","wrongWord","setWrongWord","wordleList","setWordleList","onKeyPress","button","some","key","value","doneKey","replace","canEnterKey","prevGuessLen","prevGuess","slice","prevDone","toUpperCase","className","children","onChange","modules","default","mask","regex","layout","theme","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/david/wordle-clone/Client/src/components/Keys.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\r\nimport Keyboard from 'react-simple-keyboard';\r\nimport \"react-simple-keyboard/build/css/index.css\";\r\nimport './Keys.css'\r\nimport BackspaceOutlinedIcon from '@mui/icons-material/BackspaceOutlined';\r\nimport inputMask from \"simple-keyboard-input-mask\";\r\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\r\n\r\nconst Keys = () => {\r\n\r\n    const {darkMode, setDarkMode} = useContext(KeyboardContext);\r\n    const [green, setGreen] = useState(() => {\r\n        const existingGreen = JSON.parse(localStorage.getItem('green'));\r\n        return existingGreen || [];\r\n    });\r\n    const [yellow, setYellow] = useState(() => {\r\n        const existingYellow = JSON.parse(localStorage.getItem('yellow'));\r\n        return existingYellow || [];\r\n    });\r\n    const [gray, setGray] = useState(() => {\r\n        const existingGray = JSON.parse(localStorage.getItem('gray'));\r\n        return existingGray || [];\r\n    });\r\n    const [buttonTheme, setButtonTheme] = useState([])\r\n    const {kbColor} = useContext(KeyboardContext);\r\n    const {colorBlind, setColorBlind} = useContext(KeyboardContext);\r\n\r\n\r\n    useEffect(() => { // break down guess into their color states by letter\r\n        // console.log(kbColor)\r\n        if (kbColor.length) {\r\n            console.log(kbColor)\r\n            // kbColor.map((guess) => (\r\n                Object.entries(kbColor.at(-1)).forEach(([letter, color]) => {\r\n                    color == \"green\" \r\n                    ?\r\n                    setGreen(prevKey => ([\r\n                        ...prevKey,\r\n                        letter.toLowerCase()\r\n                    ]))\r\n                    :\r\n                    color == 'yellow'\r\n                    ?\r\n                    setYellow(prevKey => ([\r\n                        ...prevKey,\r\n                        letter.toLowerCase()\r\n                    ]))\r\n                    :\r\n                    setGray(prevKey => ([\r\n                        ...prevKey,\r\n                        letter.toLowerCase()\r\n                    ]))\r\n                })\r\n                // console.log(res)\r\n            // ))\r\n        }\r\n    }, [kbColor])\r\n\r\n    const [greenString, setGreenString] = useState('');\r\n    const [yellowString, setYellowString] = useState('');\r\n    const [grayString, setGrayString] = useState('');\r\n\r\n    useEffect(() => { //overwrites previous inaccurate guess with updated color, ex. word is blimp, first guess is pupil, l is yellow, second guess plane, l is green , overwrite with green\r\n        \r\n        // console.log(`green is ${[...new Set(green)]}`)\r\n        // console.log(`yellow is ${[...new Set(yellow)]}`)\r\n        // console.log(`gray is ${[...new Set(gray)]}`)\r\n\r\n        // whitespace is for the react keyboard readability\r\n        // console.log('green is ', green)\r\n        // console.log('yellow is ', yellow)\r\n        // console.log('gray is ', new Set(gray))\r\n\r\n        //green\r\n        const existingGreen = JSON.parse(localStorage.getItem('green')) || [];\r\n        if (JSON.stringify(existingGreen) !== JSON.stringify(green)) localStorage.setItem('green', JSON.stringify(Array.from(new Set(green))));\r\n\r\n        const existingYellow = JSON.parse(localStorage.getItem('yellow')) || [];\r\n        if (JSON.stringify(existingYellow) !== JSON.stringify(yellow)) localStorage.setItem('yellow', JSON.stringify(Array.from(new Set(yellow))));\r\n\r\n        const existingGray = JSON.parse(localStorage.getItem('gray')) || [];\r\n        if (JSON.stringify(existingGray) !== JSON.stringify(gray)) localStorage.setItem('gray', JSON.stringify(Array.from((new Set(gray)))));\r\n\r\n\r\n\r\n        green && setGreenString(green.join(' ')) //green always should be displayed\r\n\r\n        const removeGreenfromYellow = yellow.filter((color) => !green.includes(color));\r\n        const removeGreenfromGray = gray.filter((color) => !green.includes(color));\r\n\r\n        const removeYellowfromGray = removeGreenfromGray.filter((color) => !removeGreenfromYellow.includes(color));\r\n\r\n        setYellowString(removeGreenfromYellow.join(' '));\r\n        setGrayString(removeYellowfromGray.join(' '));\r\n        \r\n    }, [green, yellow, gray])\r\n\r\n    useEffect(() => { // switches color of button theme based on color blind mode\r\n        if (colorBlind) {\r\n            setButtonTheme(prevTheme => prevTheme.map(item => {\r\n                if (item.class === 'green') {\r\n                    return {\r\n                        ...item,\r\n                        class : 'CBgreen'\r\n                    }\r\n                } else if (item.class === 'yellow') {\r\n                    return {\r\n                        ...item,\r\n                        class : 'CByellow'\r\n                    }\r\n                } else {\r\n                    return item;\r\n                }\r\n            }) \r\n            )\r\n        } else {\r\n            setButtonTheme(prevTheme => prevTheme.map(item => {\r\n                if (item.class === 'CBgreen') {\r\n                    return {\r\n                        ...item,\r\n                        class : 'green'\r\n                    }\r\n                } else if (item.class === 'CByellow') {\r\n                    return {\r\n                        ...item,\r\n                        class : 'yellow'\r\n                    }\r\n                } else {\r\n                    return item;\r\n                }\r\n            }) \r\n            )\r\n        }\r\n    }, [colorBlind])\r\n\r\n    useEffect(() => {\r\n        if (darkMode) {\r\n            setButtonTheme(prevTheme => prevTheme.map(item => {\r\n                if (item.class === 'buttons') {\r\n                    return {\r\n                        ...item,\r\n                        class : 'DMbuttons'\r\n                    }\r\n                } else if (item.class === 'gray') {\r\n                    return {\r\n                        ...item,\r\n                        class : 'KBDMgray'\r\n                    }\r\n                }\r\n                else {\r\n                    return item;\r\n                }\r\n            }))\r\n        } else {\r\n            setButtonTheme(prevTheme => prevTheme.map(item => {\r\n                if (item.class === 'DMbuttons') {\r\n                    return {\r\n                        ...item,\r\n                        class : 'buttons'\r\n                    }\r\n                } else if (item.class === 'DMgray') {\r\n                    return {\r\n                        ...item,\r\n                        class : 'gray'\r\n                    }\r\n                }\r\n                else {\r\n                    return item;\r\n                }\r\n            }))\r\n        }\r\n    }, [darkMode])\r\n    \r\n    useEffect(() => { //sets keyboard color on each guess rerender\r\n        setButtonTheme([\r\n            {\r\n                class: `${ colorBlind ? 'CBgreen': 'green' }`,\r\n                buttons: greenString || ' '\r\n            },\r\n            {\r\n                class: `${ colorBlind ? 'CByellow': 'yellow' }`,\r\n                buttons: yellowString  || ' '\r\n            },\r\n            {\r\n                class: `${ darkMode ? 'DMgray': 'gray' }`,\r\n                buttons: grayString || ' '\r\n            },\r\n            {\r\n                class: `${ darkMode ? 'DMbuttons' : 'buttons' }`,\r\n                buttons: 'q w e r t y u i o p a s d f g h j k l ENTER z x c v b n m DEL'\r\n            }\r\n        ])\r\n    },[greenString, yellowString, grayString])\r\n\r\n    // useEffect(() => {\r\n    //     if (buttonTheme.length > 0) {\r\n    //     console.table(`buttonTheme=${buttonTheme[2]['buttons']}`)\r\n    //     }\r\n    // }, [buttonTheme])\r\n    \r\n    const{guesses, setGuesses} = useContext(KeyboardContext);\r\n\r\n    const {guessLength, setGuessLength} = useContext(KeyboardContext);\r\n\r\n\r\n    const kbChange = (input) => {\r\n        // if (input.slice(-1) == \"L\") {\r\n            \r\n        // } else {\r\n            \r\n        // }\r\n    }\r\n\r\n    const {doneHash, setDoneHash} = useContext(KeyboardContext);\r\n    const {canEnterHash, setCanEnterHash} = useContext(KeyboardContext);\r\n\r\n    const {notEnough, setNotEnough} = useContext(KeyboardContext);\r\n    const {wrongWord, setWrongWord} = useContext(KeyboardContext);\r\n    const {wordleList, setWordleList} = useContext(KeyboardContext);\r\n    \r\n\r\n    const onKeyPress = button => {\r\n        // console.log(\"Button pressed\", button);\r\n        Object.entries(doneHash).some(([key, value]) => {\r\n            const doneKey = key.replace('Done', '')\r\n            const canEnterKey = doneKey + 'CanEnter';\r\n            \r\n            if (!value) {\r\n                if (button == \"DEL\") {\r\n                    setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                    setGuesses( prevGuess => ({ ...prevGuess, [doneKey] : (prevGuess[doneKey].slice(0, prevGuess[doneKey].length - 1))}))\r\n                } else if (button == \"ENTER\") {\r\n                    if (canEnterHash[canEnterKey]) {\r\n                        if (wordleList.includes(guesses[doneKey].toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, [key]: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                } else {\r\n                    setGuessLength(prevGuessLen => prevGuessLen + 1)\r\n                    setGuesses( prevGuess => ({ ...prevGuess, [doneKey]: (prevGuess[doneKey] + button.toUpperCase())}))\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        })\r\n\r\n            \r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(guesses.first)\r\n\r\n    }, [guesses])\r\n\r\n\r\n    return (\r\n        <div className='mx-auto w-[500px] h-[198px]'>\r\n\r\n        <Keyboard \r\n        className=\"kibord w-full p-0\"\r\n        onChange={kbChange}\r\n        onKeyPress={onKeyPress}\r\n            \r\n        modules = {[inputMask]}\r\n        inputMask ={{\r\n            default: {\r\n            mask: '12345',\r\n            regex: /^[a-zA-Z0-9_-]*$/\r\n            }\r\n        }}\r\n        layout={{\r\n            default : [\r\n            'q w e r t y u i o p',\r\n            'a s d f g h j k l',\r\n            'ENTER z x c v b n m DEL'\r\n            ]\r\n        }}\r\n        buttonTheme={buttonTheme}\r\n        theme=\"hg-theme-default board\"\r\n        \r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Keys"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}