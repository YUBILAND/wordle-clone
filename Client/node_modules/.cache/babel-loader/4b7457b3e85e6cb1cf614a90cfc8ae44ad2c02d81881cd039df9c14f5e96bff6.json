{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\wordle-clone\\\\Client\\\\src\\\\components\\\\Grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useContext } from 'react';\nimport raw from '../assets/wordle-La.txt';\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\nimport CloseIcon from '@mui/icons-material/Close';\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport ShareIcon from '@mui/icons-material/Share';\nimport './Grid.css';\nimport Statistics from './Statistics';\nimport axios from 'axios';\nimport Zoom from '@mui/material/Zoom';\nimport { ClickAwayListener } from '@mui/base/ClickAwayListener';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  const {\n    darkMode\n  } = useContext(KeyboardContext);\n  const {\n    colorBlind,\n    setColorBlind\n  } = useContext(KeyboardContext);\n  const {\n    profilePage,\n    showProfilePage\n  } = useContext(KeyboardContext);\n  const {\n    tutorial,\n    showTutorial\n  } = useContext(KeyboardContext);\n  const {\n    leaderBoard,\n    showLeaderBoard\n  } = useContext(KeyboardContext);\n  const {\n    settings,\n    showSettings\n  } = useContext(KeyboardContext);\n  const {\n    userMode,\n    setUserMode\n  } = useContext(KeyboardContext);\n  const {\n    userID,\n    setUserID\n  } = useContext(KeyboardContext);\n  const {\n    kbColor,\n    setKbColor\n  } = useContext(KeyboardContext);\n  const {\n    winPage,\n    setWinPage\n  } = useContext(KeyboardContext);\n  const {\n    guessWon,\n    setGuessWon\n  } = useContext(KeyboardContext);\n  const [winCompliment, setWinCompliment] = useState(false);\n  const {\n    win,\n    setWin\n  } = useContext(KeyboardContext);\n  const {\n    answer,\n    showAnswer\n  } = useContext(KeyboardContext);\n  const {\n    notEnough,\n    setNotEnough\n  } = useContext(KeyboardContext);\n  const {\n    wrongWord,\n    setWrongWord\n  } = useContext(KeyboardContext);\n  const {\n    wordleList,\n    setWordleList\n  } = useContext(KeyboardContext);\n  const {\n    doneHash,\n    setDoneHash\n  } = useContext(KeyboardContext);\n  const {\n    canEnterHash,\n    setCanEnterHash\n  } = useContext(KeyboardContext);\n  const [guessResults, setGuessResults] = useState(() => {\n    const existingguessResults = JSON.parse(localStorage.getItem('guessResults'));\n    return existingguessResults || {\n      first: [],\n      second: [],\n      third: [],\n      fourth: [],\n      fifth: [],\n      sixth: []\n    };\n  });\n  const refHash = useRef({\n    first: false,\n    second: false,\n    third: false,\n    fourth: false,\n    fifth: false,\n    sixth: false\n  });\n  const [loading, setLoading] = useState(true);\n  const [correctWord, setCorrectWord] = useState(() => {\n    const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord'));\n    return existingCorrectWord || '';\n  });\n  const {\n    guesses,\n    setGuesses\n  } = useContext(KeyboardContext);\n  const {\n    clickDisabledLeaderBoard,\n    setClickDisabledLeaderBoard\n  } = useContext(KeyboardContext);\n  const {\n    clickDisabledProfile,\n    setClickDisabledProfile\n  } = useContext(KeyboardContext);\n  const {\n    guestMode,\n    setGuestMode\n  } = useContext(KeyboardContext);\n  const {\n    guessLength,\n    setGuessLength\n  } = useContext(KeyboardContext);\n  const [loss, setLoss] = useState(() => {\n    const existingLoss = JSON.parse(localStorage.getItem('loss'));\n    return existingLoss || false;\n  });\n  const {\n    enterPressed,\n    setEnterPressed\n  } = useContext(KeyboardContext);\n  const {\n    removeStyle,\n    setRemoveStyle\n  } = useContext(KeyboardContext);\n  const [leftWiggle, setLeftWiggle] = useState('');\n  const [rightWiggle, setRightWiggle] = useState('');\n  const {\n    hardMode,\n    setHardMode\n  } = useContext(KeyboardContext);\n  useEffect(() => {\n    //loads wordle list\n    const fetchWords = async () => {\n      const response = await fetch(raw);\n      const text = await response.text();\n      const lines = text.split('\\r\\n').slice(0, 2315);\n      setWordleList(lines);\n    };\n    fetchWords();\n  }, []);\n  useEffect(() => {\n    //chooses random correct word from wordle list\n    if (wordleList.length > 0 && !correctWord) {\n      setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\n      setLoading(false);\n    }\n  }, [wordleList]);\n  useEffect(() => {\n    // prints correctWord\n    if (correctWord) console.log('The Correct Word is ' + correctWord);\n    const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord')) || '';\n    if (JSON.stringify(existingCorrectWord) !== JSON.stringify(correctWord)) localStorage.setItem('correctWord', JSON.stringify(correctWord));\n  }, [correctWord]);\n  useEffect(() => {\n    //Register key press and save to state, del too\n    const onPress = event => {\n      var _Object$entries$find;\n      const firstFalseKey = (_Object$entries$find = Object.entries(doneHash).find(([key, value]) => !value)) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0];\n      if (event.key === 'Backspace') {\n        if (firstFalseKey && guessLength > 0) {\n          const firstDonetoFirst = firstFalseKey.split('Done')[0];\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            [firstDonetoFirst]: prevGuess[firstDonetoFirst].slice(0, prevGuess[firstDonetoFirst].length - 1)\n          }));\n        } else {\n          //deleting nothing so do left wiggle animation\n          setLeftWiggle(firstFalseKey);\n          setTimeout(() => {\n            setLeftWiggle('');\n          }, 700);\n        }\n      } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\n        if (firstFalseKey && guessLength < 5) {\n          const firstDonetoFirst = firstFalseKey.split('Done')[0];\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            [firstDonetoFirst]: prevGuess[firstDonetoFirst] + event.key.toUpperCase()\n          }));\n        } else {\n          //deleting nothing so do left wiggle animation\n          setRightWiggle(firstFalseKey);\n          setTimeout(() => {\n            setRightWiggle('');\n          }, 700);\n        }\n      }\n    };\n    if (!win) {\n      // Attach event listener\n      document.addEventListener('keydown', onPress);\n\n      // Cleanup function to remove event listener\n      return () => {\n        document.removeEventListener('keydown', onPress);\n      };\n    }\n  }, [win, guessLength, doneHash]); // Depend only on the completion status\n\n  const missingGreen = useRef({});\n  useEffect(() => {\n    // 'Enter' Key Functionality\n    const onPress = event => {\n      if (event.key === 'Enter') {\n        var _Object$entries$find2;\n        const firstFalseKey = (_Object$entries$find2 = Object.entries(doneHash).find(([key, value]) => !value)) === null || _Object$entries$find2 === void 0 ? void 0 : _Object$entries$find2[0];\n        const firstDonetoFirstCanEnter = firstFalseKey.split('Done')[0] + 'CanEnter'; // changes firstDone to firstCanEnter\n        if (canEnterHash[firstDonetoFirstCanEnter]) {\n          // if user can enter, guessLength must be 5\n          const firstDonetoFirst = firstFalseKey.split('Done')[0]; // changes firstDone to first\n          if (wordleList.includes(guesses[firstDonetoFirst].toLowerCase())) {\n            // if guess is valid word\n            setEnterPressed(true);\n            setRemoveStyle(false);\n            setDoneHash(prevDone => ({\n              ...prevDone,\n              [firstFalseKey]: true\n            }));\n            setGuessLength(0);\n          } else {\n            // else if not valid word\n            setWrongWord(true);\n            if (hardMode) {\n              hardGreen.map((letter, index) => {\n                if (guesses[firstDonetoFirst][index] !== letter) {\n                  // if letter at index in users guess is not green\n                  missingGreen.current = {\n                    ...missingGreen.current,\n                    [index]: [letter]\n                  };\n                }\n              });\n              if (guesses[firstDonetoFirst]) {// if input doesn't contain all previously guessed green letters\n              }\n            }\n          }\n          ;\n        } else setNotEnough(true); //else if if user can't enter, guessLength less than 5\n      }\n    };\n    if (!win) {\n      document.addEventListener('keydown', onPress);\n      return () => {\n        document.removeEventListener('keydown', onPress);\n      };\n    }\n  }, [win, doneHash, canEnterHash]);\n  const compareString = (str1, str2) => {\n    // compare guess to correctword, return arr of index of green ( ex '135' so first third and fifth are green)\n    var indexMatch = [];\n    for (let i = 0; i < str1.length; i++) {\n      if (str1[i] == str2[i]) {\n        indexMatch.push(i);\n      }\n    }\n    return indexMatch;\n  };\n  useEffect(() => {\n    // evaluates whether user can press enter as a valid guess, length 5\n    Object.entries(doneHash).some(([key, val]) => {\n      if (!val) {\n        const firstDonetoFirst = key.split('Done')[0]; // 'firstDone' to 'first'\n        const firstDonetoFirstCanEnter = key.split('Done')[0] + 'CanEnter'; // 'firstDone' to 'firstCanEnter'\n        if (guesses[firstDonetoFirst].length == 5) setCanEnterHash(prevCanEnter => ({\n          ...prevCanEnter,\n          [firstDonetoFirstCanEnter]: true\n        }));else setCanEnterHash(prevCanEnter => ({\n          ...prevCanEnter,\n          [firstDonetoFirstCanEnter]: false\n        }));\n        return true;\n      }\n      return false;\n    });\n  }, [guesses]);\n  const greenLetter = (dummyWord, guessedWord) => {\n    //looks for green first\n    const greenIndex = compareString(correctWord, guessedWord); // arry of green index\n    var offset = 0;\n    for (let i = 0; i < greenIndex.length; i++) {\n      dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\n      // console.log(dummyWord)\n      offset++;\n    }\n    return dummyWord;\n  };\n  const evalGuess = (dummyWord, letter, pos) => {\n    //assign letter green, yellow, or gray\n    if (letter == correctWord[pos]) {\n      return 'green';\n    } else if (dummyWord.includes(letter)) {\n      return 'yellow';\n    } else {\n      return 'gray';\n    }\n  };\n  var cheatVar;\n  const evaluteGuess = (res, ind) => {\n    //helper func for evaluating guess\n    if (guessResults.first) {\n      const newCheatVar = cheatVar;\n      cheatVar = cheatVar.replace(res, '');\n      return evalGuess(newCheatVar, res, ind); //check for green, yellow and gray\n    }\n  };\n  const guessRow = useRef(1); // keep track of variable between useEffect renders\n\n  useEffect(() => {\n    // ref\n    const existingGuessRow = JSON.parse(localStorage.getItem('currentRow'));\n    if (existingGuessRow) guessRow.current = existingGuessRow;\n  }, []);\n  const guessesLoaded = useRef(false);\n  const firstTime = useRef(true);\n  useEffect(() => {\n    // evaluates guess, sets when user wins or loses\n    if (!guessesLoaded.current) setTimeout(() => {\n      guessesLoaded.current = true;\n    }, 1000); // after refresh, set guessesloaded to true so animation won't appear for previous guesses. added timeout so set true right after animation finishes, solves removeStyle being false for split second after making guess causing flicker due to previous guesses showing transparent border and such\n\n    if (firstTime.current) {\n      //skip on mount\n      firstTime.current = false;\n      return;\n    }\n    if (!enterPressed) {\n      //skip on mount Solves? doubling the grid from 5 to 10 because of saving changes, if enter not pressed don't run this code again\n      return;\n    }\n    const lastTrueKey = Object.entries(doneHash).reduce((acc, [key, value]) => {\n      return value ? key : acc;\n    }, 0);\n    const firstDonetoFirst = lastTrueKey.split('Done')[0]; // remove \"Done\" from \"firstDone\" to get 'first'; use for accessing hashmap\n    if (lastTrueKey !== 0 && !refHash.current[firstDonetoFirst]) {\n      //player has made first guess\n\n      cheatVar = greenLetter(correctWord, guesses[firstDonetoFirst]);\n      const colorGuess = guesses[firstDonetoFirst].split('').map((res, ind) =>\n      // gets color mapping for each letter guess\n      evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        [firstDonetoFirst]: [...prevResults[firstDonetoFirst], ...colorGuess]\n      }));\n      let newKbColor = guesses[firstDonetoFirst].split('').reduce((acc, res, ind) => {\n        //removes duplicates to map to keyboard (ex. plump) only one color for p.\n        if (acc[res] == 'green' || acc[res] == 'yellow') {\n\n          // green and yellow get priority over gray so don't overwrite. \n          // (ex blimp and guess is booby, first b is green so don't overwrite with second b which is gray.)\n          // (ex blimp and guess is poppy, first p is yellow so don't overwrite with second or third p which is gray.)\n        } else acc[res] = colorGuess[ind];\n        return acc;\n      }, {});\n      setKbColor(prevResults => [...prevResults, {\n        ...newKbColor\n      }]);\n      const set = new Set(Object.values(newKbColor));\n      const first = [...set][0];\n      if (set.size == 1 && first == 'green') {\n        setWin(true);\n        localStorage.setItem('win', JSON.stringify(true));\n        setGuessWon(guessRow.current);\n        localStorage.setItem('guessWon', JSON.stringify(guessRow.current));\n        return;\n      } else if (firstDonetoFirst == \"sixth\") {\n        showAnswer(true);\n        localStorage.setItem('answer', JSON.stringify(answer));\n        setLoss(true);\n        localStorage.setItem('loss', JSON.stringify(loss));\n        return;\n      }\n      guessRow.current += 1;\n      localStorage.setItem('currentRow', JSON.stringify(guessRow.current)); // just display\n      refHash.current[firstDonetoFirst] = true;\n    }\n  }, [doneHash]);\n  useEffect(() => {\n    const existingDoneHash = JSON.parse(localStorage.getItem('doneHash')) || {\n      firstDone: false,\n      secondDone: false,\n      thirdDone: false,\n      fourthDone: false,\n      fifthDone: false,\n      sixthDone: false\n    };\n    if (JSON.stringify(existingDoneHash) !== JSON.stringify(doneHash)) localStorage.setItem('doneHash', JSON.stringify(doneHash));\n  }, [doneHash]);\n  useEffect(() => {\n    const existingguessResults = JSON.parse(localStorage.getItem('guessResults')) || {\n      first: [],\n      second: [],\n      third: [],\n      fourth: [],\n      fifth: [],\n      sixth: []\n    };\n    if (JSON.stringify(existingguessResults) !== JSON.stringify(guessResults)) localStorage.setItem('guessResults', JSON.stringify(guessResults));\n    const existingguesses = JSON.parse(localStorage.getItem('guesses')) || {\n      first: '',\n      second: '',\n      third: '',\n      fourth: '',\n      fifth: '',\n      sixth: ''\n    };\n    if (JSON.stringify(existingguesses) !== JSON.stringify(guesses)) localStorage.setItem('guesses', JSON.stringify(guesses));\n  }, [guessResults]);\n  useEffect(() => {\n    const existingKbColor = JSON.parse(localStorage.getItem('kbColor')) || [];\n    if (JSON.stringify(existingKbColor) !== JSON.stringify(kbColor)) localStorage.setItem('kbColor', JSON.stringify(kbColor));\n  }, [kbColor]);\n  const updated = useContext(KeyboardContext); // Solves: user can't refresh to gain infinite wins\n  useEffect(() => {\n    // ref\n    const existingUpdated = JSON.parse(localStorage.getItem('updatedStats'));\n    if (existingUpdated) updated.current = existingUpdated;\n  }, []);\n  useEffect(() => {\n    // update stats after game finish\n    if (win ^ answer && !updated.current) {\n      axios.post('http://localhost:8081/updateStats', {\n        ...userID,\n        win: win,\n        guessWon: guessWon\n      }).then(res => {\n        console.log(res.data.message);\n        updated.current = true;\n        localStorage.setItem('updatedStats', JSON.stringify(updated.current));\n      }).catch(err => console.log(err));\n    }\n  }, [win, answer]);\n  useEffect(() => {\n    // 1 sec delay after win before stats is shown\n    if (win) {\n      setWinCompliment(true);\n      setTimeout(() => {\n        setWinPage(true);\n      }, 1000);\n    }\n  }, [win]);\n  if (winCompliment) {\n    // show win compliment and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setWinCompliment(false);\n    }, 3000);\n  }\n  if (notEnough) {\n    // show not enoguh letters prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setNotEnough(false);\n    }, 1000);\n  }\n  if (wrongWord) {\n    // show wrong word prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setWrongWord(false);\n    }, 1000);\n  }\n  if (clickDisabledLeaderBoard) {\n    // show disabled leadeboard prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setClickDisabledLeaderBoard(false);\n    }, 2000);\n  }\n  if (clickDisabledProfile) {\n    // show disabled profile prompt and fade out\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setClickDisabledProfile(false);\n    }, 2000);\n  }\n  useEffect(() => {\n    if (loss) {\n      // 1 sec delay after loss before stats is shown\n      setTimeout(function () {\n        setWinPage(true);\n      }, 1000);\n    }\n  }, [loss]);\n  function whichCompliment() {\n    // determines which compliment to give based on how many guesses player took\n    const firstTrueIndex = Object.entries(doneHash).findIndex(([key, value]) => !value);\n    if (firstTrueIndex != -1) {\n      return firstTrueIndex;\n    } else return 6;\n  }\n  const compliments = [\n  // compliment list\n  \"\", \"Genius\", \"Magnificent\", \"Impressive\", \"Splendid\", \"Great\", \"Phew\"];\n  const {\n    delay,\n    setDelay\n  } = useContext(KeyboardContext);\n  useEffect(() => {\n    if (!winPage) {\n      setTimeout(function () {\n        setDelay(false);\n      }, 1000);\n    }\n  }, [winPage]);\n  function handleAnimationStart() {\n    //remove style after 400 ms of animation\n    setTimeout(() => {\n      setRemoveStyle(true);\n    }, 400);\n  }\n  const [clickedSettings, setClickedSettings] = useState(false);\n  const skipMount = useRef(false);\n  useEffect(() => {\n    // remove flip animation, state variable\n    if (skipMount.current) {\n      setClickedSettings(true);\n    }\n    if (!skipMount.current) {\n      skipMount.current = true;\n    }\n  }, [settings, leaderBoard, profilePage, tutorial]);\n  useEffect(() => {\n    //when guess made, let animation resume\n    setClickedSettings(false);\n  }, [doneHash]);\n  const hardGreen = useRef(['', '', '', '', '']);\n  const hardYellow = useRef([]);\n  useEffect(() => {\n    if (hardMode && Object.keys(guessResults).length) {\n      // you need to use every letter, if green same position, if yellow any position, ignore gray\n      Object.entries(guessResults).map(([rowName, colorArr]) => {\n        if (colorArr.includes('green')) {\n          colorArr.map((color, ind) => {\n            if (color === 'green') {\n              hardGreen.current[ind] = guesses[rowName][ind];\n              if (hardYellow.current.includes(guesses[rowName][ind])) {\n                hardYellow.current = hardYellow.current.filter(item => item !== guesses[rowName][ind]);\n              }\n            }\n          });\n        }\n        if (colorArr.includes('yellow')) {\n          colorArr.map((color, ind) => {\n            if (color === 'yellow' && !hardYellow.current.includes(guesses[rowName][ind]) && !hardGreen.current.includes(guesses[rowName][ind])) {\n              hardYellow.current = [...hardYellow.current, guesses[rowName][ind]];\n            }\n          });\n        }\n      });\n      console.log(hardGreen.current);\n      console.log(hardYellow.current);\n    }\n  }, [hardMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `mx-auto w-[500px] opacity-100 mb-[110px] ${darkMode ? 'bg-[#121213] text-white' : 'bg-white text-black'} z-0`,\n    children: [guestMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-[60px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-green-600 text-2xl rounded-md p-1 font-bold tracking-widest\",\n        children: \"Guest Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 95\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 23\n    }, this), userMode && !tutorial && !leaderBoard && !profilePage && !settings && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-[60px] left-0 flex justify-center w-full z-0\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: ` ${darkMode ? 'text-gray-200' : 'text-gray-500'} text-2xl rounded-md p-1 font-bold tracking-widest cursor-default`,\n        children: userID.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 159\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 83\n    }, this), winCompliment && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: compliments[whichCompliment()] || ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 113\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 27\n    }, this), notEnough && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `${darkMode ? 'bg-[#d7dadc] text-black' : 'bg-black text-white'} rounded-md  p-3 font-bold tracking-[0.5px]`,\n        children: \"Not enough letters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 109\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 23\n    }, this), wrongWord && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Not in word list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 109\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 23\n    }, this), clickDisabledLeaderBoard && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Login to access leaderboards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 124\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 38\n    }, this), clickDisabledProfile && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Login to access profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 120\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 34\n    }, this), (winPage || delay) && /*#__PURE__*/_jsxDEV(Zoom, {\n      in: winPage,\n      timeout: 500,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute top-[250px] w-[500px] h-fit rounded-md shadow-xl z-20\",\n        children: /*#__PURE__*/_jsxDEV(Statistics, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 9\n    }, this), winPage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `absolute top-0 left-0 w-screen h-[930px] ${darkMode ? 'bg-black/50' : 'bg-white/50'}  z-10`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 21\n    }, this), answer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: correctWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 93\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-5 w-[340px] mx-auto gap-2\",\n      children: clickedSettings ? Object.entries(doneHash).map(([key, value]) => {\n        // this removes flip animation after clicking on settings\n        const firstDonetoFirst = key.split('Done')[0];\n        return guessesLoaded.current && value ?\n        /*#__PURE__*/\n        // if past mount and this rows guess is done already\n        _jsxDEV(_Fragment, {\n          children: guessResults[firstDonetoFirst] && guessResults[firstDonetoFirst].length > 0 ?\n          // if there is a guess\n          guessResults[firstDonetoFirst].map((res, ind) =>\n          /*#__PURE__*/\n          // map each letter to a gridbox\n          _jsxDEV(\"button\", {\n            className: `border-2 cursor-default ${\n            // using buttons and cursor-default to make it unclickable and unhighlightable\n            res == 'green' ? colorBlind ? 'CBgreen' : 'green' : res == 'yellow' ? colorBlind ? 'CByellow' : 'yellow' : darkMode ? 'DMgray' : 'gray'} \n                                flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold text-white`,\n            children: guesses[firstDonetoFirst][ind] || ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 29\n          }, this)) : [0, 1, 2, 3, 4].map(res =>\n          // this prevents row from disappearing, im assuming that doneHash updates but guessResults hasn't so there is a missing row that won't be accounted for thus it would disappear for a split second causing Keys to shift up, this takes care of that scenario by keeping an empty row there until guessResults updates in which case it will show the guessed gridbox\n          guesses[firstDonetoFirst][res] ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cursor-default border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold\",\n            children: guesses[firstDonetoFirst][res]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cursor-default border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 29\n          }, this))\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [0, 1, 2, 3, 4].map(res =>\n          // else for the remaining unguessed gridboxes, \n          guesses[firstDonetoFirst][res] // if the user typed in letters but didn't enter the guess\n          ?\n          /*#__PURE__*/\n          //show letters in gridbox\n          _jsxDEV(\"div\", {\n            className: \"border-2 border-[#565758] flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold\",\n            children: guesses[firstDonetoFirst][res]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 25\n          }, this) :\n          /*#__PURE__*/\n          // else show nothing\n          _jsxDEV(\"div\", {\n            className: `border-2 ${darkMode && 'border-[#3a3a3c]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 25\n          }, this))\n        }, void 0, false);\n      }) : Object.entries(doneHash).map(([key, value]) => {\n        var _Object$entries$find3;\n        // show flip animation\n\n        const lastTrueKey = Object.entries(doneHash).reduce((acc, [key, value]) => {\n          // find the row with most recent guess\n          return value ? key : acc;\n        }, 0);\n        const firstFalseKey = (_Object$entries$find3 = Object.entries(doneHash).find(([key, value]) => !value)) === null || _Object$entries$find3 === void 0 ? void 0 : _Object$entries$find3[0]; // find first false key, this would be the current user input row\n        const firstDonetoFirst = key.split('Done')[0];\n        return (\n          /*#__PURE__*/\n          // on mount here\n          _jsxDEV(\"div\", {\n            className: \"flex col-span-5 gap-2\",\n            children: value && !guessesLoaded.current || guessesLoaded.current && key === lastTrueKey ?\n            /*#__PURE__*/\n            // on first refresh need animation, on user guess need row animation\n            _jsxDEV(_Fragment, {\n              children: guessResults[firstDonetoFirst] && guessResults[firstDonetoFirst].length > 0 ? guessResults[firstDonetoFirst].map((res, ind) => {\n                const delay = ind * 100; //animation stuff\n                const style1 = {\n                  animationDelay: `${delay}ms`\n                };\n                const style2 = removeStyle ? {} : {\n                  backgroundColor: 'transparent',\n                  color: 'transparent',\n                  borderColor: darkMode ? '#3a3a3c' : '#d1d5db'\n                };\n                return /*#__PURE__*/_jsxDEV(\"button\", {\n                  style: {\n                    ...style1,\n                    ...style2\n                  },\n                  onAnimationStart: handleAnimationStart,\n                  className: `flip border-2 cursor-default ${\n                  // guesses with animation\n                  res == 'green' ? colorBlind ? 'CBgreen' : 'green' : res == 'yellow' ? colorBlind ? 'CByellow' : 'yellow' : darkMode ? 'DMgray' : 'gray'} \n                                                flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold text-white`,\n                  children: guesses[firstDonetoFirst][ind] || ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 586,\n                  columnNumber: 45\n                }, this);\n              }) : [0, 1, 2, 3, 4].map(res =>\n              // unguessed user input gridboxes\n              guesses[firstDonetoFirst][res] ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cursor-default border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold\",\n                children: guesses[firstDonetoFirst][res]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 597,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cursor-default border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 601,\n                columnNumber: 41\n              }, this))\n            }, void 0, false) :\n            // either on mount but not guessed or past mount and previous guesses\n            guessesLoaded.current && key !== lastTrueKey && value ?\n            /*#__PURE__*/\n            // previous guesses, after they have been guessed they should have no animation unless refresh\n            _jsxDEV(_Fragment, {\n              children: guessResults[firstDonetoFirst] && guessResults[firstDonetoFirst].length > 0 ? guessResults[firstDonetoFirst].map((res, ind) => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `border-2 cursor-default ${res == 'green' ? colorBlind ? 'CBgreen' : 'green' : res == 'yellow' ? colorBlind ? 'CByellow' : 'yellow' : darkMode ? 'DMgray' : 'gray'} \n                                            flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold text-white  `,\n                children: guesses[firstDonetoFirst][ind] || ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 613,\n                columnNumber: 41\n              }, this)) : [0, 1, 2, 3, 4].map(res => guesses[firstDonetoFirst][res] ? /*#__PURE__*/_jsxDEV(\"button\", {\n                className: ` cursor-default border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold`,\n                children: guesses[firstDonetoFirst][res]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 624,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cursor-default border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 628,\n                columnNumber: 41\n              }, this))\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [0, 1, 2, 3, 4].map(res =>\n              // creates empty rows, unguessed\n              guesses[firstDonetoFirst][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: ` ${(notEnough || wrongWord) && 'wiggle'} ${rightWiggle.length && key == rightWiggle && 'addNothingWiggle'} border-2 border-[#565758] flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold`,\n                children: guesses[firstDonetoFirst][res]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 639,\n                columnNumber: 37\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `border-2 ${darkMode && 'border-[#3a3a3c]'} ${key == firstFalseKey && (notEnough || wrongWord) && 'wiggle'} ${leftWiggle.length && key == leftWiggle && 'deleteNothingWiggle'} flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 643,\n                columnNumber: 37\n              }, this))\n            }, void 0, false)\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 21\n          }, this)\n        );\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 493,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"Dw/PmdXSboRNc62uNS1+uS+pemI=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useContext","raw","KeyboardContext","CloseIcon","ReplayIcon","ShareIcon","Statistics","axios","Zoom","ClickAwayListener","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","_s","darkMode","colorBlind","setColorBlind","profilePage","showProfilePage","tutorial","showTutorial","leaderBoard","showLeaderBoard","settings","showSettings","userMode","setUserMode","userID","setUserID","kbColor","setKbColor","winPage","setWinPage","guessWon","setGuessWon","winCompliment","setWinCompliment","win","setWin","answer","showAnswer","notEnough","setNotEnough","wrongWord","setWrongWord","wordleList","setWordleList","doneHash","setDoneHash","canEnterHash","setCanEnterHash","guessResults","setGuessResults","existingguessResults","JSON","parse","localStorage","getItem","first","second","third","fourth","fifth","sixth","refHash","loading","setLoading","correctWord","setCorrectWord","existingCorrectWord","guesses","setGuesses","clickDisabledLeaderBoard","setClickDisabledLeaderBoard","clickDisabledProfile","setClickDisabledProfile","guestMode","setGuestMode","guessLength","setGuessLength","loss","setLoss","existingLoss","enterPressed","setEnterPressed","removeStyle","setRemoveStyle","leftWiggle","setLeftWiggle","rightWiggle","setRightWiggle","hardMode","setHardMode","fetchWords","response","fetch","text","lines","split","slice","length","Math","floor","random","toUpperCase","console","log","stringify","setItem","onPress","event","_Object$entries$find","firstFalseKey","Object","entries","find","key","value","firstDonetoFirst","prevGuessLen","prevGuess","setTimeout","match","document","addEventListener","removeEventListener","missingGreen","_Object$entries$find2","firstDonetoFirstCanEnter","includes","toLowerCase","prevDone","hardGreen","map","letter","index","current","compareString","str1","str2","indexMatch","i","push","some","val","prevCanEnter","greenLetter","dummyWord","guessedWord","greenIndex","offset","parseInt","evalGuess","pos","cheatVar","evaluteGuess","res","ind","newCheatVar","replace","guessRow","existingGuessRow","guessesLoaded","firstTime","lastTrueKey","reduce","acc","colorGuess","prevResults","newKbColor","set","Set","values","size","existingDoneHash","firstDone","secondDone","thirdDone","fourthDone","fifthDone","sixthDone","existingguesses","existingKbColor","updated","existingUpdated","post","then","data","message","catch","err","getElementById","id","whichCompliment","firstTrueIndex","findIndex","compliments","delay","setDelay","handleAnimationStart","clickedSettings","setClickedSettings","skipMount","hardYellow","keys","rowName","colorArr","color","filter","item","className","children","fileName","_jsxFileName","lineNumber","columnNumber","username","in","timeout","_Object$entries$find3","style1","animationDelay","style2","backgroundColor","borderColor","style","onAnimationStart","_c","$RefreshReg$"],"sources":["C:/Users/david/wordle-clone/Client/src/components/Grid.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useContext } from 'react'\r\nimport raw from '../assets/wordle-La.txt'\r\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport ReplayIcon from '@mui/icons-material/Replay';\r\nimport ShareIcon from '@mui/icons-material/Share';\r\nimport './Grid.css'\r\nimport Statistics from './Statistics';\r\nimport axios from 'axios';\r\nimport Zoom from '@mui/material/Zoom';\r\nimport { ClickAwayListener } from '@mui/base/ClickAwayListener';\r\n\r\n\r\n\r\nconst Grid = () => {\r\n    \r\n    const {darkMode} = useContext(KeyboardContext);\r\n    const {colorBlind, setColorBlind} = useContext(KeyboardContext);\r\n    const {profilePage, showProfilePage} = useContext(KeyboardContext);\r\n    const {tutorial, showTutorial} = useContext(KeyboardContext);\r\n    const {leaderBoard, showLeaderBoard} = useContext(KeyboardContext);\r\n    const {settings, showSettings} = useContext(KeyboardContext);\r\n    const {userMode, setUserMode} = useContext(KeyboardContext);\r\n    const {userID, setUserID} = useContext(KeyboardContext);\r\n    const {kbColor, setKbColor} = useContext(KeyboardContext);\r\n    const {winPage, setWinPage} = useContext(KeyboardContext);\r\n    const {guessWon, setGuessWon} = useContext(KeyboardContext);\r\n    const [winCompliment, setWinCompliment] = useState(false);\r\n    const {win, setWin} = useContext(KeyboardContext);\r\n    const {answer, showAnswer} = useContext(KeyboardContext);\r\n    const {notEnough, setNotEnough} = useContext(KeyboardContext);\r\n    const {wrongWord, setWrongWord} = useContext(KeyboardContext);\r\n    const {wordleList, setWordleList} = useContext(KeyboardContext);\r\n    const {doneHash, setDoneHash} = useContext(KeyboardContext);\r\n    const {canEnterHash, setCanEnterHash} = useContext(KeyboardContext);\r\n    const [guessResults, setGuessResults] = useState(() => {\r\n        const existingguessResults = JSON.parse(localStorage.getItem('guessResults'));\r\n        return existingguessResults || {\r\n            first: [], \r\n            second: [], \r\n            third: [], \r\n            fourth: [], \r\n            fifth: [], \r\n            sixth: []\r\n        };\r\n    });\r\n    const refHash = useRef({first: false, second: false, third: false, fourth: false, fifth: false, sixth: false})\r\n    const [loading, setLoading] = useState(true);\r\n    const [correctWord, setCorrectWord] = useState(() => {\r\n        const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord'));\r\n        return existingCorrectWord || '';\r\n    });\r\n    const {guesses, setGuesses} = useContext(KeyboardContext);\r\n    const {clickDisabledLeaderBoard, setClickDisabledLeaderBoard} = useContext(KeyboardContext);\r\n    const {clickDisabledProfile, setClickDisabledProfile} = useContext(KeyboardContext);\r\n    const {guestMode, setGuestMode} = useContext(KeyboardContext);\r\n    const {guessLength, setGuessLength} = useContext(KeyboardContext);\r\n    const [loss, setLoss] = useState(() => {\r\n        const existingLoss = JSON.parse(localStorage.getItem('loss'));\r\n        return existingLoss || false;\r\n    });\r\n    const {enterPressed, setEnterPressed} = useContext(KeyboardContext);\r\n    const {removeStyle, setRemoveStyle} = useContext(KeyboardContext);\r\n\r\n    const [leftWiggle, setLeftWiggle] = useState('');\r\n    const [rightWiggle, setRightWiggle] = useState('');\r\n    const {hardMode, setHardMode} = useContext(KeyboardContext);\r\n\r\n\r\n    useEffect(() => { //loads wordle list\r\n        const fetchWords = async () => { \r\n            const response = await fetch(raw);\r\n            const text = await response.text();\r\n            const lines = text.split('\\r\\n').slice(0, 2315);\r\n            setWordleList(lines)\r\n        };\r\n        fetchWords();\r\n    }, []);\r\n    useEffect(() => { //chooses random correct word from wordle list\r\n        if (wordleList.length > 0 && !correctWord) {\r\n        setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\r\n        setLoading(false);\r\n        }\r\n    }, [wordleList])\r\n    useEffect(() => { // prints correctWord\r\n        if( correctWord )\r\n            console.log('The Correct Word is ' + correctWord)\r\n            const existingCorrectWord = JSON.parse(localStorage.getItem('correctWord')) || '';\r\n            if (JSON.stringify(existingCorrectWord) !== JSON.stringify(correctWord)) localStorage.setItem('correctWord', JSON.stringify(correctWord));\r\n    }, [correctWord])\r\n    useEffect(() => { //Register key press and save to state, del too\r\n        const onPress = (event) => {\r\n            const firstFalseKey = Object.entries(doneHash).find(([key, value]) => !value)?.[0];\r\n            if (event.key === 'Backspace') {\r\n                if (firstFalseKey && guessLength > 0) {\r\n                    const firstDonetoFirst = firstFalseKey.split('Done')[0];\r\n                    setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                    setGuesses( prevGuess => ({ ...prevGuess, [firstDonetoFirst]: (prevGuess[firstDonetoFirst].slice(0, prevGuess[firstDonetoFirst].length - 1))}))\r\n                }\r\n                else { //deleting nothing so do left wiggle animation\r\n                    setLeftWiggle(firstFalseKey);\r\n                    setTimeout(() => {\r\n                        setLeftWiggle('');\r\n                    }, 700)\r\n                }\r\n            } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\r\n                if (firstFalseKey && guessLength < 5) {\r\n                    const firstDonetoFirst = firstFalseKey.split('Done')[0];\r\n                    setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                    setGuesses( prevGuess => ({ ...prevGuess, [firstDonetoFirst]: (prevGuess[firstDonetoFirst] + event.key.toUpperCase())}))\r\n                }\r\n                else { //deleting nothing so do left wiggle animation\r\n                    setRightWiggle(firstFalseKey);\r\n                    setTimeout(() => {\r\n                        setRightWiggle('');\r\n                    }, 700)\r\n                }\r\n            } \r\n        };\r\n        if(!win) {\r\n            // Attach event listener\r\n            document.addEventListener('keydown', onPress);\r\n        \r\n            // Cleanup function to remove event listener\r\n            return () => {\r\n            document.removeEventListener('keydown', onPress);\r\n            };\r\n        }\r\n    }, [win, guessLength, doneHash]); // Depend only on the completion status\r\n\r\n    const missingGreen = useRef({});\r\n\r\n    useEffect(() => { // 'Enter' Key Functionality\r\n        const onPress = (event) => {\r\n            if (event.key === 'Enter') {\r\n\r\n                const firstFalseKey = Object.entries(doneHash).find(([key, value]) => !value)?.[0];\r\n                const firstDonetoFirstCanEnter = firstFalseKey.split('Done')[0] + 'CanEnter' // changes firstDone to firstCanEnter\r\n                    if (canEnterHash[firstDonetoFirstCanEnter]) { // if user can enter, guessLength must be 5\r\n                        const firstDonetoFirst = firstFalseKey.split('Done')[0]  // changes firstDone to first\r\n                        if (wordleList.includes(guesses[firstDonetoFirst].toLowerCase())) { // if guess is valid word\r\n                            setEnterPressed(true);\r\n                            setRemoveStyle(false);\r\n                            setDoneHash(prevDone => ({ ...prevDone, [firstFalseKey]: true}));\r\n                            setGuessLength(0);\r\n                        } else { // else if not valid word\r\n                            setWrongWord(true)\r\n                            if (hardMode) {\r\n                                hardGreen.map((letter, index) => {\r\n                                    if (guesses[firstDonetoFirst][index] !== letter) { // if letter at index in users guess is not green\r\n                                        missingGreen.current = {...missingGreen.current, [index] : [letter]}\r\n                                    }\r\n                                })\r\n                                if (guesses[firstDonetoFirst]) { // if input doesn't contain all previously guessed green letters\r\n\r\n                                }\r\n                            }\r\n                        }; \r\n\r\n                    } else setNotEnough(true); //else if if user can't enter, guessLength less than 5\r\n                            \r\n\r\n            }\r\n        }\r\n\r\n        if (!win) {\r\n            document.addEventListener('keydown', onPress);\r\n            return () => {\r\n            document.removeEventListener('keydown', onPress);\r\n            };\r\n        }\r\n    },[win, doneHash, canEnterHash])\r\n    \r\n            const compareString = (str1, str2) => { // compare guess to correctword, return arr of index of green ( ex '135' so first third and fifth are green)\r\n                var indexMatch = [];\r\n                for (let i = 0; i < str1.length; i++) {\r\n                    if (str1[i] == str2[i]) {\r\n                        indexMatch.push(i);\r\n                    }\r\n                } return indexMatch;\r\n            }\r\n\r\n            useEffect(() => { // evaluates whether user can press enter as a valid guess, length 5\r\n                Object.entries(doneHash).some(([key, val]) => {\r\n                    if (!val) {\r\n                        const firstDonetoFirst = key.split('Done')[0] // 'firstDone' to 'first'\r\n                        const firstDonetoFirstCanEnter = key.split('Done')[0] + 'CanEnter' // 'firstDone' to 'firstCanEnter'\r\n                        if (guesses[firstDonetoFirst].length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, [firstDonetoFirstCanEnter]: true}));\r\n                        else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, [firstDonetoFirstCanEnter]: false}));\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                })\r\n            }, [guesses])\r\n\r\n            const greenLetter = (dummyWord, guessedWord) => { //looks for green first\r\n                const greenIndex = compareString(correctWord, guessedWord); // arry of green index\r\n                var offset = 0;\r\n                for (let i = 0; i < greenIndex.length; i++) {\r\n                    dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\r\n                    // console.log(dummyWord)\r\n                    offset++;\r\n                }\r\n                return dummyWord;\r\n            }\r\n\r\n            const evalGuess = (dummyWord, letter, pos) => { //assign letter green, yellow, or gray\r\n                if (letter == correctWord[pos]) {\r\n                    return 'green';\r\n                } else if (dummyWord.includes(letter)) {\r\n                    return 'yellow';\r\n                } else {\r\n                    return 'gray';\r\n                }\r\n            }\r\n\r\n            var cheatVar;\r\n\r\n            const evaluteGuess = (res, ind) => { //helper func for evaluating guess\r\n                if (guessResults.first) {\r\n                    const newCheatVar = cheatVar;\r\n                    cheatVar = cheatVar.replace(res, '')\r\n                    return evalGuess(newCheatVar, res, ind) //check for green, yellow and gray\r\n                }\r\n            }\r\n\r\n            const guessRow = useRef(1); // keep track of variable between useEffect renders\r\n\r\n            useEffect(() => { // ref\r\n                const existingGuessRow = JSON.parse(localStorage.getItem('currentRow'));\r\n                if (existingGuessRow) guessRow.current = existingGuessRow;\r\n            }, [])\r\n    \r\n            const guessesLoaded = useRef(false);\r\n\r\n    const firstTime = useRef(true);\r\n    useEffect(() => { // evaluates guess, sets when user wins or loses\r\n        if (!guessesLoaded.current) \r\n            setTimeout(() => {\r\n                guessesLoaded.current = true;\r\n        }, 1000) // after refresh, set guessesloaded to true so animation won't appear for previous guesses. added timeout so set true right after animation finishes, solves removeStyle being false for split second after making guess causing flicker due to previous guesses showing transparent border and such\r\n\r\n        if (firstTime.current) { //skip on mount\r\n            firstTime.current = false;\r\n            return;\r\n        }\r\n        if (!enterPressed) { //skip on mount Solves? doubling the grid from 5 to 10 because of saving changes, if enter not pressed don't run this code again\r\n            return;\r\n        }\r\n\r\n        const lastTrueKey = Object.entries(doneHash).reduce((acc, [key, value]) => {\r\n            return value ? key : acc;\r\n        }, 0);\r\n            \r\n            const firstDonetoFirst = lastTrueKey.split('Done')[0]; // remove \"Done\" from \"firstDone\" to get 'first'; use for accessing hashmap\r\n            if ( lastTrueKey !== 0 && !refHash.current[firstDonetoFirst]) { //player has made first guess\r\n                \r\n                cheatVar = greenLetter(correctWord, guesses[firstDonetoFirst])\r\n                const colorGuess = guesses[firstDonetoFirst].split('').map((res, ind) => ( // gets color mapping for each letter guess\r\n                    evaluteGuess(res, ind)\r\n                ))\r\n                setGuessResults(prevResults => ({\r\n                    ...prevResults,\r\n                    [firstDonetoFirst] : [...prevResults[firstDonetoFirst], ...colorGuess]\r\n                }));\r\n                let newKbColor = guesses[firstDonetoFirst].split('').reduce((acc, res, ind) => { //removes duplicates to map to keyboard (ex. plump) only one color for p.\r\n                    if ( acc[res] == 'green' || acc[res] == 'yellow') {\r\n                        \r\n                            // green and yellow get priority over gray so don't overwrite. \r\n                            // (ex blimp and guess is booby, first b is green so don't overwrite with second b which is gray.)\r\n                            // (ex blimp and guess is poppy, first p is yellow so don't overwrite with second or third p which is gray.)\r\n                        \r\n                    } else \r\n                    acc[res] = colorGuess[ind];\r\n                    return acc;\r\n                }, {});\r\n                setKbColor(prevResults => [\r\n                    ...prevResults,\r\n                    { ...newKbColor }\r\n                ])\r\n                const set = new Set(Object.values(newKbColor))\r\n                const first = [...set][0]\r\n                if (set.size == 1 && first == 'green') {\r\n                    setWin(true);\r\n                    localStorage.setItem('win', JSON.stringify(true))\r\n                    setGuessWon(guessRow.current);\r\n                    localStorage.setItem('guessWon', JSON.stringify( guessRow.current))\r\n                    return;\r\n                } else if ( firstDonetoFirst == \"sixth\" ){\r\n                    showAnswer(true);\r\n                    localStorage.setItem('answer', JSON.stringify(answer))\r\n                    setLoss(true);\r\n                    localStorage.setItem('loss', JSON.stringify(loss))\r\n                    return;\r\n                }\r\n                guessRow.current += 1;\r\n                localStorage.setItem('currentRow',JSON.stringify( guessRow.current)) // just display\r\n                refHash.current[firstDonetoFirst] = true;\r\n            }\r\n    }, [doneHash]);\r\n\r\n    useEffect(() => {\r\n        const existingDoneHash = JSON.parse(localStorage.getItem('doneHash')) || {\r\n            firstDone: false, \r\n            secondDone: false, \r\n            thirdDone: false, \r\n            fourthDone: false, \r\n            fifthDone: false, \r\n            sixthDone: false\r\n        };\r\n        if (JSON.stringify(existingDoneHash) !== JSON.stringify(doneHash)) localStorage.setItem('doneHash', JSON.stringify(doneHash));\r\n    }, [doneHash])\r\n\r\n    useEffect(() => {\r\n        const existingguessResults = JSON.parse(localStorage.getItem('guessResults')) || {\r\n            first: [], \r\n            second: [], \r\n            third: [], \r\n            fourth: [], \r\n            fifth: [], \r\n            sixth: []\r\n        };\r\n        if (JSON.stringify(existingguessResults) !== JSON.stringify(guessResults)) localStorage.setItem('guessResults', JSON.stringify(guessResults));\r\n        \r\n        const existingguesses = JSON.parse(localStorage.getItem('guesses')) || {\r\n            first: '', \r\n            second: '', \r\n            third: '', \r\n            fourth: '', \r\n            fifth: '', \r\n            sixth: ''\r\n        };\r\n        if (JSON.stringify(existingguesses) !== JSON.stringify(guesses)) localStorage.setItem('guesses', JSON.stringify(guesses));\r\n\r\n    }, [guessResults])\r\n\r\n    useEffect(() => {\r\n        const existingKbColor = JSON.parse(localStorage.getItem('kbColor')) || [];\r\n        if (JSON.stringify(existingKbColor) !== JSON.stringify(kbColor)) localStorage.setItem('kbColor', JSON.stringify(kbColor));\r\n        \r\n    }, [kbColor])\r\n\r\n    const updated = useContext(KeyboardContext); // Solves: user can't refresh to gain infinite wins\r\n    useEffect(() => { // ref\r\n        const existingUpdated = JSON.parse(localStorage.getItem('updatedStats'));\r\n        if (existingUpdated) updated.current = existingUpdated;\r\n    }, [])\r\n    useEffect(() => { // update stats after game finish\r\n        if (( win ^ answer) && !updated.current) {\r\n            axios.post('http://localhost:8081/updateStats', {...userID, win: win, guessWon: guessWon})\r\n            .then(res => {\r\n                console.log(res.data.message)\r\n                updated.current = true;\r\n                localStorage.setItem('updatedStats', JSON.stringify(updated.current))\r\n            })\r\n            .catch(err => console.log(err));\r\n        }\r\n    }, [win, answer])\r\n\r\n    useEffect(() => { // 1 sec delay after win before stats is shown\r\n        if (win) {\r\n            setWinCompliment(true);\r\n            setTimeout(() => {\r\n                setWinPage(true);\r\n            }, 1000)\r\n        }\r\n    }, [win])\r\n\r\n    if(winCompliment) { // show win compliment and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setWinCompliment(false);\r\n            }, 3000);\r\n    }\r\n\r\n    if(notEnough) { // show not enoguh letters prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setNotEnough(false);\r\n            }, 1000);\r\n    }\r\n\r\n    if (wrongWord) { // show wrong word prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setWrongWord(false);\r\n            }, 1000);\r\n    }\r\n\r\n    if (clickDisabledLeaderBoard) { // show disabled leadeboard prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setClickDisabledLeaderBoard(false);\r\n            }, 2000);\r\n    }\r\n\r\n    if (clickDisabledProfile) { // show disabled profile prompt and fade out\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setClickDisabledProfile(false);\r\n            }, 2000);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (loss) { // 1 sec delay after loss before stats is shown\r\n            setTimeout(function() {\r\n                setWinPage(true);\r\n            }, 1000);\r\n        }\r\n    }, [loss])\r\n    \r\n    function whichCompliment() { // determines which compliment to give based on how many guesses player took\r\n        const firstTrueIndex = Object.entries(doneHash).findIndex(([key, value]) => !value);\r\n        if (firstTrueIndex != -1) {\r\n            return firstTrueIndex;\r\n        } else return 6;\r\n    }\r\n\r\n    const compliments = [ // compliment list\r\n        \"\",               \r\n        \"Genius\",        \r\n        \"Magnificent\",   \r\n        \"Impressive\",    \r\n        \"Splendid\",     \r\n        \"Great\",        \r\n        \"Phew\"          \r\n    ];\r\n\r\n    const {delay, setDelay} = useContext(KeyboardContext);\r\n    \r\n    useEffect(() => {\r\n        if (!winPage) {\r\n            setTimeout(function() {\r\n                setDelay(false);\r\n                }, 1000);\r\n        }\r\n    }, [winPage])\r\n\r\n    function handleAnimationStart() { //remove style after 400 ms of animation\r\n        setTimeout(() => {\r\n            setRemoveStyle(true);\r\n        }, 400)\r\n    }\r\n\r\n    const [clickedSettings, setClickedSettings] = useState(false);\r\n    const skipMount = useRef(false);\r\n    useEffect(() => { // remove flip animation, state variable\r\n        if (skipMount.current) {\r\n            setClickedSettings(true);\r\n        }\r\n        if (!skipMount.current) {\r\n            skipMount.current = true;\r\n        }\r\n    }, [settings, leaderBoard, profilePage, tutorial])\r\n    \r\n    useEffect(() => { //when guess made, let animation resume\r\n        setClickedSettings(false);\r\n    }, [doneHash])\r\n\r\n    const hardGreen = useRef(['', '', '', '', '']);\r\n    const hardYellow = useRef([]);\r\n\r\n    useEffect(() => {\r\n        if (hardMode && Object.keys(guessResults).length) {\r\n            // you need to use every letter, if green same position, if yellow any position, ignore gray\r\n            Object.entries(guessResults).map(([rowName, colorArr]) => {\r\n                if (colorArr.includes('green')) {\r\n                    colorArr.map((color, ind) => {\r\n                        if (color === 'green') {\r\n                            hardGreen.current[ind] = guesses[rowName][ind]\r\n                            if (hardYellow.current.includes(guesses[rowName][ind])) {\r\n                                hardYellow.current = hardYellow.current.filter(item => item !== guesses[rowName][ind]);\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                if (colorArr.includes('yellow')) {\r\n                    colorArr.map((color, ind) => {\r\n                        if (color === 'yellow' && !hardYellow.current.includes(guesses[rowName][ind]) && !hardGreen.current.includes(guesses[rowName][ind])) {\r\n                            hardYellow.current = [...hardYellow.current, guesses[rowName][ind]]\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            console.log(hardGreen.current)\r\n            console.log(hardYellow.current)\r\n        }\r\n        \r\n    }, [hardMode])\r\n\r\n  return (\r\n\r\n    <div className={`mx-auto w-[500px] opacity-100 mb-[110px] ${darkMode ? 'bg-[#121213] text-white' : 'bg-white text-black'} z-0`}>\r\n\r\n        {guestMode && <div className='absolute top-[60px] left-0 flex justify-center w-full'> <span className='text-green-600 text-2xl rounded-md p-1 font-bold tracking-widest'>Guest Mode</span> </div>}\r\n        {userMode && (!tutorial && !leaderBoard && !profilePage && !settings ) && <div className='absolute top-[60px] left-0 flex justify-center w-full z-0'> <button className={` ${darkMode ?'text-gray-200' : 'text-gray-500' } text-2xl rounded-md p-1 font-bold tracking-widest cursor-default`}>{userID.username}</button> </div>}\r\n        {winCompliment && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>{compliments[whichCompliment()] || ''}</span> </div>}\r\n        {notEnough && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className={`${darkMode ? 'bg-[#d7dadc] text-black' : 'bg-black text-white'} rounded-md  p-3 font-bold tracking-[0.5px]`}>Not enough letters</span> </div>}\r\n        {wrongWord && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Not in word list</span> </div>}\r\n        {clickDisabledLeaderBoard && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Login to access leaderboards</span> </div>}\r\n        {clickDisabledProfile && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Login to access profile</span> </div>}\r\n        {(winPage || delay )&& \r\n        <Zoom in={winPage} timeout={500}>\r\n            <div className='absolute top-[250px] w-[500px] h-fit rounded-md shadow-xl z-20' >\r\n                <Statistics /> \r\n            </div>\r\n        </Zoom>\r\n        }\r\n        {winPage && <div className={`absolute top-0 left-0 w-screen h-[930px] ${darkMode ? 'bg-black/50' : 'bg-white/50'}  z-10`}>\r\n            </div> }\r\n        {answer && <div className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>{correctWord}</span> </div>}\r\n\r\n        <div className='grid grid-cols-5 w-[340px] mx-auto gap-2'>\r\n        {clickedSettings \r\n            ?\r\n        Object.entries(doneHash).map(([key, value]) => { // this removes flip animation after clicking on settings\r\n            const firstDonetoFirst = key.split('Done')[0];\r\n            return ( \r\n                (guessesLoaded.current && value) ? // if past mount and this rows guess is done already\r\n                <>\r\n                    {guessResults[firstDonetoFirst] && guessResults[firstDonetoFirst].length > 0 \r\n                        ? // if there is a guess\r\n                        (guessResults[firstDonetoFirst].map((res, ind) => ( // map each letter to a gridbox\r\n                            \r\n                            <button className= { `border-2 cursor-default ${ // using buttons and cursor-default to make it unclickable and unhighlightable\r\n                                res == 'green' ? ( colorBlind ? 'CBgreen'  : 'green' ) :  \r\n                                res == 'yellow' ? ( colorBlind ? 'CByellow' : 'yellow' ) : \r\n                                ( darkMode ? 'DMgray' : 'gray' ) } \r\n                                flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold text-white` }>\r\n                                {guesses[firstDonetoFirst][ind] || ''}\r\n                            </button>\r\n                            \r\n                        )))  \r\n                        : [0,1,2,3,4].map((res) => ( // this prevents row from disappearing, im assuming that doneHash updates but guessResults hasn't so there is a missing row that won't be accounted for thus it would disappear for a split second causing Keys to shift up, this takes care of that scenario by keeping an empty row there until guessResults updates in which case it will show the guessed gridbox\r\n                            guesses[firstDonetoFirst][res] \r\n                            ? \r\n                            <button className='cursor-default border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold'> \r\n                                {guesses[firstDonetoFirst][res]} \r\n                            </button>\r\n                            : \r\n                            <button className='cursor-default border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold'>\r\n                            </button>\r\n                        \r\n                        ))\r\n                    }\r\n                </>\r\n                :\r\n                <>\r\n                    {[0,1,2,3,4].map((res) => (  // else for the remaining unguessed gridboxes, \r\n                        guesses[firstDonetoFirst][res] // if the user typed in letters but didn't enter the guess\r\n                        ?  //show letters in gridbox\r\n                        <div className='border-2 border-[#565758] flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold'>\r\n                            {guesses[firstDonetoFirst][res]}\r\n                        </div>\r\n                        : // else show nothing\r\n                        <div  className={`border-2 ${darkMode && 'border-[#3a3a3c]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold`}>\r\n                        </div>\r\n                    ))}\r\n                </>\r\n            )})\r\n\r\n            :\r\n\r\n            Object.entries(doneHash).map(([key, value]) => { // show flip animation\r\n\r\n                const lastTrueKey = Object.entries(doneHash).reduce((acc, [key, value]) => { // find the row with most recent guess\r\n                    return value ? key : acc;\r\n                }, 0);\r\n                const firstFalseKey = Object.entries(doneHash).find(([key, value]) => !value)?.[0]; // find first false key, this would be the current user input row\r\n                const firstDonetoFirst = key.split('Done')[0];\r\n                return ( \r\n\r\n                    // on mount here\r\n                    <div key={key}className='flex col-span-5 gap-2'>\r\n                    { \r\n                        ((value && !guessesLoaded.current) || (guessesLoaded.current && key === lastTrueKey)) ?  // on first refresh need animation, on user guess need row animation\r\n                            <>\r\n                                {guessResults[firstDonetoFirst] && guessResults[firstDonetoFirst].length > 0 ?\r\n                                    (guessResults[firstDonetoFirst].map((res, ind) => { \r\n                                        const delay = ind * 100;                //animation stuff\r\n                                        const style1 = {\r\n                                            animationDelay: `${delay}ms`,\r\n                                        };\r\n                                        const style2 = removeStyle ? {} : { backgroundColor: 'transparent', color: 'transparent', borderColor: (darkMode ? '#3a3a3c' : '#d1d5db')}\r\n                                        return (\r\n                                            <button style={{ ...style1 , ...style2}} onAnimationStart={handleAnimationStart} className= { `flip border-2 cursor-default ${ // guesses with animation\r\n                                                res == 'green' ? ( colorBlind ? 'CBgreen'  : 'green' ) :  \r\n                                                res == 'yellow' ? ( colorBlind ? 'CByellow' : 'yellow' ) : \r\n                                                ( darkMode ? 'DMgray' : 'gray' ) } \r\n                                                flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold text-white` }>\r\n                                                {guesses[firstDonetoFirst][ind] || ''}\r\n                                            </button>\r\n                                        )\r\n                                    }))  : [0,1,2,3,4].map((res) => ( // unguessed user input gridboxes\r\n                                        guesses[firstDonetoFirst][res]\r\n                                        ? \r\n                                        <button className='cursor-default border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold'>\r\n                                            {guesses[firstDonetoFirst][res]}\r\n                                        </button>\r\n                                        : \r\n                                        <button className='cursor-default border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold'>\r\n                                        </button>\r\n                                    \r\n                                    ))\r\n                                }\r\n                            </>\r\n                        :   // either on mount but not guessed or past mount and previous guesses\r\n                        (guessesLoaded.current && (key !== lastTrueKey) && value) ? // previous guesses, after they have been guessed they should have no animation unless refresh\r\n                            <>\r\n                                {guessResults[firstDonetoFirst] && guessResults[firstDonetoFirst].length > 0 ?\r\n                                    (guessResults[firstDonetoFirst].map((res, ind) => ( \r\n                                        \r\n                                        <button className= { `border-2 cursor-default ${\r\n                                            res == 'green' ? ( colorBlind ? 'CBgreen'  : 'green' ) :  \r\n                                            res == 'yellow' ? ( colorBlind ? 'CByellow' : 'yellow' ) : \r\n                                            ( darkMode ? 'DMgray' : 'gray' ) } \r\n                                            flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold text-white  `}>\r\n                                            {guesses[firstDonetoFirst][ind] || ''}\r\n                                        </button>\r\n                                        \r\n                                    )))  : [0,1,2,3,4].map((res) => (\r\n                                        guesses[firstDonetoFirst][res]\r\n                                        ? \r\n                                        <button className={` cursor-default border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold`}>\r\n                                            {guesses[firstDonetoFirst][res]}\r\n                                        </button>\r\n                                        : \r\n                                        <button className='cursor-default border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold'>\r\n                                        </button>\r\n                                    \r\n                                    ))\r\n                                }\r\n                            </>\r\n                        :\r\n                            <>\r\n                                {[0,1,2,3,4].map((res) => ( // creates empty rows, unguessed\r\n                                    guesses[firstDonetoFirst][res]\r\n                                    ? \r\n                                    <div className={` ${ (notEnough || wrongWord) && 'wiggle'} ${rightWiggle.length && key == rightWiggle && 'addNothingWiggle'} border-2 border-[#565758] flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold`}>\r\n                                        {guesses[firstDonetoFirst][res]}\r\n                                    </div>\r\n                                    :\r\n                                    <div  className={`border-2 ${darkMode && 'border-[#3a3a3c]'} ${key == firstFalseKey && (notEnough || wrongWord) && 'wiggle'} ${leftWiggle.length && key == leftWiggle && 'deleteNothingWiggle'} flex items-center justify-center w-[64px] h-[64px] uppercase text-3xl font-bold`}>\r\n                                    </div>\r\n                                ))}\r\n                            </>\r\n                        }\r\n                    </div>\r\n                )\r\n            })\r\n        }\r\n\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Grid"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}