{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\wordle-clone\\\\src\\\\components\\\\Grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport raw from '../assets/wordle-La.txt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  const [wordleList, setWordleList] = useState([]);\n  const [firstDone, setFirstDone] = useState(false);\n  const [secondDone, setSecondDone] = useState(false);\n  const [thirdDone, setThirdDone] = useState(false);\n  const [fourthDone, setFourthDone] = useState(false);\n  const [fifthDone, setFifthDone] = useState(false);\n  const [sixthDone, setSixthDone] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState({\n    first: '',\n    second: '',\n    third: '',\n    fourth: '',\n    fifth: '',\n    sixth: ''\n  });\n  const [dummyWords, setDummyWords] = useState({\n    first: '',\n    second: '',\n    third: '',\n    fourth: '',\n    fifth: '',\n    sixth: ''\n  });\n  useEffect(() => {\n    const fetchWords = async () => {\n      const response = await fetch(raw);\n      const text = await response.text();\n      const lines = text.split('\\n').slice(0, 2315);\n      setWordleList(lines);\n    };\n    fetchWords();\n  }, []);\n  useEffect(() => {\n    if (wordleList.length > 0) {\n      // setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\n      setCorrectWord(\"ELBOW\");\n      setLoading(false);\n    }\n  }, [wordleList]);\n  useEffect(() => {\n    setDummyWords({\n      first: correctWord,\n      second: correctWord,\n      third: correctWord,\n      fourth: correctWord,\n      fifth: correctWord,\n      sixth: correctWord\n    });\n  }, [correctWord]);\n\n  // const correctWord = \"FRAUD\".toUpperCase();\n  // console.log(correctWord);\n\n  // var copyCorrectWord = correctWord\n  // var copyCorrectWord2 = correctWord\n  // var copyCorrectWord3 = correctWord\n  // var copyCorrectWord4 = correctWord\n  // var copyCorrectWord5 = correctWord\n  // var copyCorrectWord6 = correctWord\n\n  const greenLetter = (dummyWord, key, guessedWord) => {\n    const greenIndex = compareString(correctWord, guessedWord);\n    var offset = 0;\n    for (let i = 0; i < greenIndex.length; i++) {\n      dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\n      setDummyWords(prevState => ({\n        ...prevState,\n        [key]: dummyWord\n      }));\n      offset++;\n      console.log(dummyWord);\n    }\n  };\n  const evalGuess = async (dummyWord, key, guessedWord, pos) => {\n    console.log(`where is ${guessedWord[pos]} found in ${dummyWord} ? `);\n    console.log('Guessed word', guessedWord[pos]);\n    return new Promise(resolve => {\n      if (guessedWord[pos] == correctWord[pos]) {\n        resolve('green');\n      } else if (dummyWord.includes(guessedWord[pos])) {\n        console.log(`OH, ${guessedWord[pos]} is found in the dummy word ${dummyWord}`);\n        // dummyWord = dummyWord.replace(guessedWord[pos], '')\n        dummyWord = dummyWord.slice(0, [parseInt(dummyWord.indexOf(guessedWord[pos]))]) + dummyWord.slice(dummyWord.indexOf(guessedWord[pos]) + 1);\n        setDummyWords(prevState => ({\n          ...prevState,\n          [key]: dummyWord\n        }));\n        console.log(\"Updated dummyword is \", dummyWord);\n        resolve('yellow');\n      } else {\n        resolve('gray');\n      }\n    }, 100);\n  };\n  const compareString = (str1, str2) => {\n    var indexMatch = '';\n    for (let i = 0; i < str1.length; i++) {\n      if (str1[i] == str2[i]) {\n        indexMatch += i;\n      }\n    }\n    return indexMatch;\n  };\n  useEffect(() => {\n    const onPress = event => {\n      if (event.key === 'Backspace') {\n        if (!firstDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first.slice(0, prevGuess.first.length - 1)\n          }));\n        } else if (!secondDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            second: prevGuess.second.slice(0, prevGuess.second.length - 1)\n          }));\n        } else if (!thirdDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            'third': prevGuess['third'] = prevStr => prevStr.slice(0, prevStr.length - 1)\n          }));\n        } else if (!fourthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            'fourth': prevGuess['fourth'] = prevStr => prevStr.slice(0, prevStr.length - 1)\n          }));\n        } else if (!fifthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            'fifth': prevGuess['fifth'] = prevStr => prevStr.slice(0, prevStr.length - 1)\n          }));\n        } else if (!sixthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            'sixth': prevGuess['sixth'] = prevStr => prevStr.slice(0, prevStr.length - 1)\n          }));\n        }\n      } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\n        if (!firstDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first + event.key.toUpperCase()\n          }));\n        } else if (!secondDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            second: prevGuess.second + event.key.toUpperCase()\n          }));\n        } else if (!thirdDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            third: prevGuess.third + event.key.toUpperCase()\n          }));\n        } else if (!fourthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fourth: prevGuess.fourth + event.key.toUpperCase()\n          }));\n        } else if (!fifthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fifth: prevGuess.fifth + event.key.toUpperCase()\n          }));\n        } else if (!sixthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            sixth: prevGuess.sixth + event.key.toUpperCase()\n          }));\n        }\n      }\n    };\n\n    // Attach event listener\n    document.addEventListener('keydown', onPress);\n\n    // Cleanup function to remove event listener\n    return () => {\n      document.removeEventListener('keydown', onPress);\n    };\n  }, [firstDone, secondDone, thirdDone, fourthDone, fifthDone]); // Depend only on the completion status\n\n  useEffect(() => {\n    if (guesses.first.length == 5 && !firstDone) {\n      setFirstDone(true);\n    } else if (guesses['second'].length == 5 && !secondDone) {\n      setSecondDone(true);\n    } else if (guesses['third'].length == 5 && !thirdDone) {\n      setThirdDone(true);\n    } else if (guesses['fourth'].length == 5 && !fourthDone) {\n      setFourthDone(true);\n    } else if (guesses['fifth'].length == 5 && !fifthDone) {\n      setFifthDone(true);\n    } else if (guesses['sixth'].length == 5 && !sixthDone) {\n      setSixthDone(true);\n    }\n  }, [guesses]);\n  const [guessResults, setGuessResults] = useState({\n    first: [],\n    second: [],\n    third: [],\n    fourth: [],\n    fifth: [],\n    sixth: []\n  });\n  useEffect(() => {\n    if (firstDone) {\n      const evaluateGuesses = async () => {\n        const guess0 = await evalGuess(dummyWords.first, 'first', guesses.first, 0);\n        console.log(`The word should be EBOW and is ${dummyWords.first}`);\n        const guess1 = await evalGuess(dummyWords.first, 'first', guesses.first, 1);\n        const guess2 = await evalGuess(dummyWords.first, 'first', guesses.first, 2);\n        const guess3 = await evalGuess(dummyWords.first, 'first', guesses.first, 3);\n        const guess4 = await evalGuess(dummyWords.first, 'first', guesses.first, 4);\n        setGuessResults(prevResults => ({\n          ...prevResults,\n          first: [guess0, guess1, guess2, guess3, guess4]\n        }));\n      };\n      evaluateGuesses();\n    }\n    // Repeat this pattern for the remaining guesses (third, fourth, etc.)\n  }, [dummyWords]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 16\n    }, this); // Show a loading indicator while data is being fetched\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mx-auto w-[500px]\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-5 w-[340px] mx-auto gap-2\",\n      children: firstDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [greenLetter(dummyWords.first, 'first', guesses.first), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${guessResults.first[0] == 'green' ? 'bg-green-200' : guessResults.first[0] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][0] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${guessResults.first[1] == 'green' ? 'bg-green-200' : guessResults.first[1] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][1] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${guessResults.first[2] == 'green' ? 'bg-green-200' : guessResults.first[2] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][2] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${guessResults.first[3] == 'green' ? 'bg-green-200' : guessResults.first[3] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][3] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${guessResults.first[4] == 'green' ? 'bg-green-200' : guessResults.first[4] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][4] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][0] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][1] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][2] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][3] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][4] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"4dD3RmJi3aDJ7FecCFTOsVR7PI4=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useEffect","useState","raw","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","_s","wordleList","setWordleList","firstDone","setFirstDone","secondDone","setSecondDone","thirdDone","setThirdDone","fourthDone","setFourthDone","fifthDone","setFifthDone","sixthDone","setSixthDone","loading","setLoading","correctWord","setCorrectWord","guesses","setGuesses","first","second","third","fourth","fifth","sixth","dummyWords","setDummyWords","fetchWords","response","fetch","text","lines","split","slice","length","greenLetter","dummyWord","key","guessedWord","greenIndex","compareString","offset","i","parseInt","prevState","console","log","evalGuess","pos","Promise","resolve","includes","indexOf","str1","str2","indexMatch","onPress","event","prevGuess","prevStr","match","toUpperCase","document","addEventListener","removeEventListener","guessResults","setGuessResults","evaluateGuesses","guess0","guess1","guess2","guess3","guess4","prevResults","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/david/wordle-clone/src/components/Grid.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport raw from '../assets/wordle-La.txt'\r\n\r\nconst Grid = () => {\r\n\r\n    const [wordleList, setWordleList] = useState([]);\r\n    const [firstDone, setFirstDone] = useState(false);\r\n    const [secondDone, setSecondDone] = useState(false);\r\n    const [thirdDone, setThirdDone] = useState(false);\r\n    const [fourthDone, setFourthDone] = useState(false);\r\n    const [fifthDone, setFifthDone] = useState(false);\r\n    const [sixthDone, setSixthDone] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [correctWord, setCorrectWord] = useState('');\r\n\r\n    const[guesses, setGuesses] = useState({first: '', second: '', third: '', fourth: '', fifth: '', sixth: ''});\r\n    const [dummyWords, setDummyWords] = useState({first: '', second: '', third: '', fourth: '', fifth: '', sixth: ''});\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchWords = async () => { \r\n            const response = await fetch(raw);\r\n            const text = await response.text();\r\n            const lines = text.split('\\n').slice(0, 2315);\r\n            setWordleList(lines)\r\n        };\r\n        fetchWords();\r\n\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        if (wordleList.length > 0) {\r\n        // setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\r\n        setCorrectWord(\"ELBOW\")\r\n        setLoading(false);\r\n        }\r\n    }, [wordleList])\r\n\r\n    useEffect(() => {\r\n        setDummyWords({first: correctWord, second: correctWord, third: correctWord, fourth: correctWord, fifth: correctWord, sixth: correctWord})\r\n    }, [correctWord])\r\n\r\n\r\n    // const correctWord = \"FRAUD\".toUpperCase();\r\n    // console.log(correctWord);\r\n\r\n    // var copyCorrectWord = correctWord\r\n    // var copyCorrectWord2 = correctWord\r\n    // var copyCorrectWord3 = correctWord\r\n    // var copyCorrectWord4 = correctWord\r\n    // var copyCorrectWord5 = correctWord\r\n    // var copyCorrectWord6 = correctWord\r\n\r\n    const greenLetter = (dummyWord, key, guessedWord) => {\r\n        const greenIndex = compareString(correctWord, guessedWord);\r\n        var offset = 0;\r\n        for (let i = 0; i < greenIndex.length; i++) {\r\n\r\n            dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\r\n            setDummyWords(prevState => ({\r\n                ...prevState, \r\n                [key]: dummyWord\r\n            }));\r\n            offset++;\r\n            console.log(dummyWord);\r\n        \r\n        }\r\n    }\r\n\r\n    const evalGuess = async (dummyWord, key, guessedWord, pos) => {\r\n        console.log(`where is ${guessedWord[pos]} found in ${dummyWord} ? `)\r\n        console.log('Guessed word', guessedWord[pos])\r\n        return new Promise ((resolve) => {\r\n            if (guessedWord[pos] == correctWord[pos]) {\r\n                resolve('green');\r\n            } else if (dummyWord.includes(guessedWord[pos])) {\r\n                console.log(`OH, ${guessedWord[pos]} is found in the dummy word ${dummyWord}`)\r\n                // dummyWord = dummyWord.replace(guessedWord[pos], '')\r\n                dummyWord = dummyWord.slice(0, [parseInt(dummyWord.indexOf(guessedWord[pos]))]) + dummyWord.slice(dummyWord.indexOf(guessedWord[pos])+1);\r\n                setDummyWords(prevState => ({\r\n                    ...prevState, \r\n                    [key]: dummyWord\r\n                }));\r\n                console.log(\"Updated dummyword is \", dummyWord)\r\n                resolve('yellow');\r\n            } else {\r\n                resolve('gray');\r\n            }\r\n        }, 100);\r\n       \r\n        \r\n        \r\n    };\r\n\r\n    const compareString = (str1, str2) => {\r\n        var indexMatch = '';\r\n        for (let i = 0; i < str1.length; i++) {\r\n            if (str1[i] == str2[i]) {\r\n                indexMatch += i;\r\n            }\r\n        } return indexMatch;\r\n    }\r\n\r\n    \r\n        \r\n    useEffect(() => {\r\n        const onPress = (event) => {\r\n          if (event.key === 'Backspace') {\r\n            if (!firstDone) {\r\n              setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first.slice(0, prevGuess.first.length - 1))}))\r\n            } else if (!secondDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, second: (prevGuess.second.slice(0, prevGuess.second.length - 1))}))\r\n            } else if (!thirdDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, 'third': prevGuess['third'] = (prevStr) => prevStr.slice(0, prevStr.length - 1)}))\r\n            } else if (!fourthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, 'fourth': prevGuess['fourth'] = (prevStr) => prevStr.slice(0, prevStr.length - 1)}))\r\n            } else if (!fifthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, 'fifth': prevGuess['fifth'] = (prevStr) => prevStr.slice(0, prevStr.length - 1)}))\r\n            } else if (!sixthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, 'sixth': prevGuess['sixth'] = (prevStr) => prevStr.slice(0, prevStr.length - 1)}))\r\n            }\r\n          } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\r\n            if (!firstDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first  + event.key.toUpperCase())}))\r\n            } else if (!secondDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, second: (prevGuess.second  + event.key.toUpperCase())}))\r\n            } else if (!thirdDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, third: (prevGuess.third  + event.key.toUpperCase())}))\r\n            } else if (!fourthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, fourth: (prevGuess.fourth  + event.key.toUpperCase())}))\r\n            } else if (!fifthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, fifth: (prevGuess.fifth  + event.key.toUpperCase())}))\r\n            } else if (!sixthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, sixth: (prevGuess.sixth  + event.key.toUpperCase())}))\r\n                \r\n            }\r\n          }\r\n        };\r\n    \r\n        // Attach event listener\r\n        document.addEventListener('keydown', onPress);\r\n    \r\n        // Cleanup function to remove event listener\r\n        return () => {\r\n          document.removeEventListener('keydown', onPress);\r\n        };\r\n      }, [firstDone, secondDone, thirdDone, fourthDone, fifthDone]); // Depend only on the completion status\r\n\r\n    useEffect(() => {\r\n        if (guesses.first.length == 5 && !firstDone) {\r\n            setFirstDone(true);\r\n        } else if (guesses['second'].length == 5 && !secondDone) {\r\n            setSecondDone(true);\r\n        } else if (guesses['third'].length == 5 && !thirdDone) {\r\n            setThirdDone(true);\r\n        } else if (guesses['fourth'].length == 5 && !fourthDone) {\r\n            setFourthDone(true);\r\n        } else if (guesses['fifth'].length == 5 && !fifthDone) {\r\n            setFifthDone(true);\r\n        } else if (guesses['sixth'].length == 5 && !sixthDone) {\r\n            setSixthDone(true);\r\n        }\r\n    }, [guesses])\r\n\r\n    \r\n    const [guessResults, setGuessResults] = useState({first: [], second: [], third: [], fourth: [], fifth: [], sixth: []})\r\n\r\n\r\n    useEffect(() => {\r\n        if (firstDone) {\r\n\r\n            const evaluateGuesses = async () => {\r\n                const guess0 = await evalGuess(dummyWords.first, 'first', guesses.first, 0)\r\n                console.log(`The word should be EBOW and is ${dummyWords.first}`)\r\n                const guess1 = await evalGuess(dummyWords.first, 'first', guesses.first, 1)\r\n                const guess2 = await evalGuess(dummyWords.first, 'first', guesses.first, 2)\r\n                const guess3 = await evalGuess(dummyWords.first, 'first', guesses.first, 3)\r\n                const guess4 = await evalGuess(dummyWords.first, 'first', guesses.first, 4)\r\n            \r\n\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                first: [ guess0, guess1, guess2, guess3, guess4 ]\r\n            }));\r\n        }\r\n            evaluateGuesses();\r\n        }\r\n        // Repeat this pattern for the remaining guesses (third, fourth, etc.)\r\n    }, [ dummyWords]);\r\n\r\n    \r\n\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>; // Show a loading indicator while data is being fetched\r\n    } \r\n\r\n  return (\r\n    <div className='mx-auto w-[500px]'>\r\n        <div className='grid grid-cols-5 w-[340px] mx-auto gap-2'>\r\n\r\n            { firstDone ? \r\n            <>\r\n                {greenLetter(dummyWords.first, 'first', guesses.first)}\r\n                \r\n                <div className= { `border-2  ${guessResults.first[0] == 'green' ? 'bg-green-200' :  guessResults.first[0] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['first'][0] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResults.first[1] == 'green' ? 'bg-green-200' :  guessResults.first[1] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['first'][1] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResults.first[2] == 'green' ? 'bg-green-200' :  guessResults.first[2] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['first'][2] || ''}\r\n                </div>   \r\n                <div className= { `border-2  ${guessResults.first[3] == 'green' ? 'bg-green-200' :  guessResults.first[3] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['first'][3] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResults.first[4] == 'green' ? 'bg-green-200' :  guessResults.first[4] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['first'][4] || ''}\r\n                </div>   \r\n            </>\r\n            :   \r\n            <>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['first'][0] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['first'][1] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['first'][2] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['first'][3] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['first'][4] || ''}\r\n                </div>\r\n                \r\n            </>\r\n            }\r\n\r\n            \r\n            {/* { firstDone && secondDone ?  \r\n            <>\r\n                {greenLetter(copyCorrectWord2, guesses.second)}\r\n                <div className= { `border-2  ${guessResult.second[0] == 'green' ? 'bg-green-200' :  guessResult.second[0] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'}  flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['second'][0] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResult.second[1] == 'green' ? 'bg-green-200' :  guessResult.second[1] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['second'][1] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResult.second[2] == 'green' ? 'bg-green-200' :  guessResult.second[2] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['second'][2] || ''}\r\n                </div>  \r\n                <div className= { `border-2  ${guessResult.second[3] == 'green' ? 'bg-green-200' :  guessResult.second[3] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['second'][3] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResult.second[4] == 'green' ? 'bg-green-200' :  guessResult.second[4] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['second'][4] || ''}\r\n                </div>   \r\n            </>\r\n            :   \r\n            <>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['second'][0] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['second'][1] || ''}\r\n                    \r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['second'][2] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['second'][3] || ''}\r\n                    \r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['second'][4] || ''}\r\n                </div>\r\n            </>\r\n            }\r\n\r\n            \r\n\r\n            { firstDone && secondDone && thirdDone ?  \r\n            <>\r\n                {greenLetter(copyCorrectWord3, guesses.third)}\r\n                <div className= { `border-2  ${guessResult.third[0] == 'green' ? 'bg-green-200' :  guessResult.third[0] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['third'][0] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResult.third[1] == 'green' ? 'bg-green-200' :  guessResult.third[1] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['third'][1] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResult.third[2] == 'green' ? 'bg-green-200' :  guessResult.third[2] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['third'][2] || ''}\r\n                </div>   \r\n                <div className= { `border-2  ${guessResult.third[3] == 'green' ? 'bg-green-200' :  guessResult.third[3] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['third'][3] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResult.third[4] == 'green' ? 'bg-green-200' :  guessResult.third[4] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['third'][4] || ''}\r\n                </div>  \r\n            </>\r\n            :   \r\n            <>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['third'][0] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['third'][1] || ''}\r\n                    \r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['third'][2] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['third'][3] || ''}\r\n                    \r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['third'][4] || ''}\r\n                </div>\r\n            </>\r\n            }\r\n\r\n            { firstDone && secondDone && thirdDone && fourthDone ?  \r\n            <>\r\n                {greenLetter(copyCorrectWord4, guesses.fourth)}\r\n                {guessResult.fourth.map((pos) => {\r\n\r\n                <div className= { `border-2  ${ pos == 'green' ? 'bg-green-200' :  pos == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                {guesses.fourth[0] || ''}\r\n                </div>\r\n\r\n\r\n                })}\r\n\r\n\r\n            </>\r\n            :   \r\n            <>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['fourth'][0] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['fourth'][1] || ''}\r\n                    \r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['fourth'][2] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['fourth'][3] || ''}\r\n                    \r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['fourth'][4] || ''}\r\n                </div>\r\n            </>\r\n            }\r\n            \r\n            { firstDone && secondDone && thirdDone && fourthDone && fifthDone?  \r\n            <>\r\n                {greenLetter(copyCorrectWord5, guesses.fifth)}\r\n                <div className= { `border-2  ${evalGuess(copyCorrectWord5, guesses.fifth, 0) == 'green' ? 'bg-green-200' :  evalGuess(copyCorrectWord5, guesses.fifth, 0) == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['fifth'][0] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${evalGuess(copyCorrectWord5, guesses.fifth, 1) == 'green' ? 'bg-green-200' :  evalGuess(copyCorrectWord5, guesses.fifth, 1) == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['fifth'][1] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${evalGuess(copyCorrectWord5, guesses.fifth, 2) == 'green' ? 'bg-green-200' :  evalGuess(copyCorrectWord5, guesses.fifth, 2) == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['fifth'][2] || ''}\r\n                </div>   \r\n                <div className= { `border-2  ${evalGuess(copyCorrectWord5, guesses.fifth, 3) == 'green' ? 'bg-green-200' :  evalGuess(copyCorrectWord5, guesses.fifth, 3) == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['fifth'][3] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${evalGuess(copyCorrectWord5, guesses.fifth, 4) == 'green' ? 'bg-green-200' :  evalGuess(copyCorrectWord5, guesses.fifth, 4) == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['fifth'][4] || ''}\r\n                </div>  \r\n            </>\r\n            :   \r\n            <>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['fifth'][0] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['fifth'][1] || ''}\r\n                    \r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['fifth'][2] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['fifth'][3] || ''}\r\n                    \r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['fifth'][4] || ''}\r\n                </div>\r\n            </>\r\n            }\r\n\r\n            { firstDone && secondDone && thirdDone && fourthDone && fifthDone && sixthDone ?  \r\n            <>\r\n                {greenLetter(copyCorrectWord6, guesses.sixth)}\r\n                <div className= { `border-2  ${evalGuess(copyCorrectWord6, guesses.sixth, 0) == 'green' ? 'bg-green-200' :  evalGuess(copyCorrectWord6, guesses.sixth, 0) == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['sixth'][0] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${evalGuess(copyCorrectWord6, guesses.sixth, 1) == 'green' ? 'bg-green-200' :  evalGuess(copyCorrectWord6, guesses.sixth, 1) == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['sixth'][1] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${evalGuess(copyCorrectWord6, guesses.sixth, 2) == 'green' ? 'bg-green-200' :  evalGuess(copyCorrectWord6, guesses.sixth, 2) == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['sixth'][2] || ''}\r\n                </div>   \r\n                <div className= { `border-2  ${evalGuess(copyCorrectWord6, guesses.sixth, 3) == 'green' ? 'bg-green-200' :  evalGuess(copyCorrectWord6, guesses.sixth, 3) == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['sixth'][3] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${evalGuess(copyCorrectWord6, guesses.sixth, 4) == 'green' ? 'bg-green-200' :  evalGuess(copyCorrectWord6, guesses.sixth, 4) == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} + ' flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['sixth'][4] || ''}\r\n                </div>  \r\n            </>\r\n            :   \r\n            <>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['sixth'][0] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['sixth'][1] || ''}\r\n                    \r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['sixth'][2] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['sixth'][3] || ''}\r\n                    \r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['sixth'][4] || ''}\r\n                </div>\r\n            </>\r\n            } */}\r\n        </div>\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Grid"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}