{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\wordle-clone\\\\src\\\\components\\\\Grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport raw from '../assets/wordle-La.txt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  const [wordleList, setWordleList] = useState([]);\n  const [firstDone, setFirstDone] = useState(false);\n  const [secondDone, setSecondDone] = useState(false);\n  const [thirdDone, setThirdDone] = useState(false);\n  const [fourthDone, setFourthDone] = useState(false);\n  const [fifthDone, setFifthDone] = useState(false);\n  const [sixthDone, setSixthDone] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState({\n    first: '',\n    second: '',\n    third: '',\n    fourth: '',\n    fifth: '',\n    sixth: ''\n  });\n  const [dummyWords, setDummyWords] = useState({\n    first: '',\n    second: '',\n    third: '',\n    fourth: '',\n    fifth: '',\n    sixth: ''\n  });\n  useEffect(() => {\n    const fetchWords = async () => {\n      const response = await fetch(raw);\n      const text = await response.text();\n      const lines = text.split('\\n').slice(0, 2315);\n      setWordleList(lines);\n    };\n    fetchWords();\n  }, []);\n  useEffect(() => {\n    if (wordleList.length > 0) {\n      setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\n      // setCorrectWord(\"ELBOW\")\n      setLoading(false);\n    }\n  }, [wordleList]);\n  useEffect(() => {\n    setDummyWords({\n      first: correctWord\n    });\n    console.log(correctWord);\n  }, [correctWord]);\n  var guessLength = 0;\n  useEffect(() => {\n    const onPress = event => {\n      if (event.key === 'Backspace') {\n        if (!firstDone && guessLength > 0) {\n          guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first.slice(0, prevGuess.first.length - 1)\n          }));\n        } else if (!secondDone && guessLength > 0) {\n          guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            second: prevGuess.second.slice(0, prevGuess.second.length - 1)\n          }));\n        } else if (!thirdDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            third: prevGuess.third.slice(0, prevGuess.third.length - 1)\n          }));\n        } else if (!fourthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fourth: prevGuess.fourth.slice(0, prevGuess.fourth.length - 1)\n          }));\n        } else if (!fifthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fifth: prevGuess.fifth.slice(0, prevGuess.fifth.length - 1)\n          }));\n        } else if (!sixthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            sixth: prevGuess.sixth.slice(0, prevGuess.sixth.length - 1)\n          }));\n        }\n      } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\n        if (!firstDone && guessLength < 5) {\n          guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first + event.key.toUpperCase()\n          }));\n        } else if (firstDone && !secondDone && guessLength < 5) {\n          guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            second: prevGuess.second + event.key.toUpperCase()\n          }));\n        } else if (firstDone && secondDone && !thirdDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            third: prevGuess.third + event.key.toUpperCase()\n          }));\n        } else if (firstDone && secondDone && thirdDone && !fourthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fourth: prevGuess.fourth + event.key.toUpperCase()\n          }));\n        } else if (firstDone && secondDone && thirdDone && fourthDone && !fifthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fifth: prevGuess.fifth + event.key.toUpperCase()\n          }));\n        } else if (firstDone && secondDone && thirdDone && fourthDone && fifthDone && !sixthDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            sixth: prevGuess.sixth + event.key.toUpperCase()\n          }));\n        }\n      }\n    };\n\n    // Attach event listener\n    document.addEventListener('keydown', onPress);\n\n    // Cleanup function to remove event listener\n    return () => {\n      document.removeEventListener('keydown', onPress);\n    };\n  }, [firstDone, secondDone, thirdDone, fourthDone, fifthDone, sixthDone]); // Depend only on the completion status\n\n  const [firstCanEnter, setFirstCanEnter] = useState(false);\n  const [secondCanEnter, setSecondCanEnter] = useState(false);\n  const [thirdCanEnter, setThirdCanEnter] = useState(false);\n  const [fourthCanEnter, setFourthCanEnter] = useState(false);\n  const [fifthCanEnter, setFifthCanEnter] = useState(false);\n  const [sixthCanEnter, setSixthCanEnter] = useState(false);\n  useEffect(() => {\n    const onPress = event => {\n      if (event.key === 'Enter') {\n        if (!firstDone && firstCanEnter) {\n          setFirstDone(true);\n        } else alert(\"NOt enough letters\");\n      }\n    };\n    document.addEventListener('keydown', onPress);\n    return () => {\n      document.removeEventListener('keydown', onPress);\n    };\n  }, [firstCanEnter]);\n  const compareString = (str1, str2) => {\n    var indexMatch = '';\n    for (let i = 0; i < str1.length; i++) {\n      if (str1[i] == str2[i]) {\n        indexMatch += i;\n      }\n    }\n    return indexMatch;\n  };\n  useEffect(() => {\n    if (guesses.first.length == 5 && !firstDone) {\n      console.log(\"HWEUIHGUI\");\n      setFirstCanEnter(true);\n    }\n    if (guesses.second.length == 5 && !secondDone) {\n      setSecondCanEnter(true);\n    }\n    if (guesses.third.length == 5 && !thirdDone) {\n      setThirdCanEnter(true);\n    }\n    if (guesses.fourth.length == 5 && !fourthDone) {\n      setFourthCanEnter(true);\n    }\n    if (guesses.fifth.length == 5 && !fifthDone) {\n      setFifthCanEnter(true);\n    }\n    if (guesses.sixth.length == 5 && !sixthDone) {\n      setSixthCanEnter(true);\n    }\n  }, [guesses]);\n  const greenLetter = (dummyWord, guessedWord) => {\n    const greenIndex = compareString(correctWord, guessedWord);\n    var offset = 0;\n    for (let i = 0; i < greenIndex.length; i++) {\n      dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\n      console.log(dummyWord);\n      offset++;\n    }\n    return dummyWord;\n  };\n  const evalGuess = (dummyWord, letter, pos) => {\n    if (letter == correctWord[pos]) {\n      return 'green';\n    } else if (dummyWord.includes(letter)) {\n      return 'yellow';\n    } else {\n      return 'gray';\n    }\n  };\n  const [guessResults, setGuessResults] = useState({\n    first: [],\n    second: [],\n    third: [],\n    fourth: [],\n    fifth: [],\n    sixth: []\n  });\n  const firstRef = useRef(false);\n  const secondRef = useRef(false);\n  const thirdRef = useRef(false);\n  const fourthRef = useRef(false);\n  const fifthRef = useRef(false);\n  const sixthRef = useRef(false);\n  var cheatVar;\n  const evaluteGuess = (res, ind) => {\n    if (guessResults.first) {\n      const newCheatVar = cheatVar;\n      cheatVar = cheatVar.replace(res, '');\n      return evalGuess(newCheatVar, res, ind); //check for green, yellow and gray\n    }\n  };\n  useEffect(() => {\n    if (firstDone && !firstRef.current) {\n      //player has made first guess\n      cheatVar = greenLetter(correctWord, guesses.first);\n      const colorGuess = guesses.first.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        first: [...prevResults.first, ...colorGuess]\n      }));\n      firstRef.current = true;\n    }\n    if (secondDone && !secondRef.current) {\n      //player has made first guess\n      cheatVar = greenLetter(correctWord, guesses.second);\n      const colorGuess = guesses.second.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        second: [...prevResults.second, ...colorGuess]\n      }));\n      secondRef.current = true;\n    }\n    if (thirdDone && !thirdRef.current) {\n      //player has made first guess\n      cheatVar = greenLetter(correctWord, guesses.third);\n      const colorGuess = guesses.third.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        third: [...prevResults.third, ...colorGuess]\n      }));\n      thirdRef.current = true;\n    }\n    if (fourthDone && !fourthRef.current) {\n      //player has made first guess\n      cheatVar = greenLetter(correctWord, guesses.fourth);\n      const colorGuess = guesses.fourth.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        fourth: [...prevResults.fourth, ...colorGuess]\n      }));\n      fourthRef.current = true;\n    }\n    if (fifthDone && !fifthRef.current) {\n      //player has made first guess\n      cheatVar = greenLetter(correctWord, guesses.fifth);\n      const colorGuess = guesses.fifth.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        fifth: [...prevResults.fifth, ...colorGuess]\n      }));\n      fifthRef.current = true;\n    }\n    if (sixthDone && !sixthRef.current) {\n      //player has made first guess\n      cheatVar = greenLetter(correctWord, guesses.sixth);\n      const colorGuess = guesses.sixth.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        sixth: [...prevResults.sixth, ...colorGuess]\n      }));\n      sixthRef.current = true;\n    }\n    // Repeat this pattern for the remaining guesses (third, fourth, etc.)\n  }, [firstDone, secondDone, thirdDone, fourthDone, fifthDone, sixthDone]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 16\n    }, this); // Show a loading indicator while data is being fetched\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mx-auto w-[500px]\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-5 w-[340px] mx-auto gap-2\",\n      children: [firstDone && firstRef.current ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.first.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['first'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this)\n\n        // <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\n        //     {guesses['first'][res] || ''}\n        // </div>\n        )\n      }, void 0, false), secondDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.second.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['second'][ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['second'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['second'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), thirdDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.third.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses.third[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['third'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['third'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), fourthDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.fourth.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses.fourth[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['fourth'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['fourth'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), fifthDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.fifth.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses.fifth[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['fifth'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['fifth'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), sixthDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.sixth.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-green-200' : res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses.sixth[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['sixth'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['sixth'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 21\n        }, this))\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 280,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"ISy0Ox3Fy5DFQe9vSlAKdcS+LTE=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useEffect","useState","useRef","raw","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","_s","wordleList","setWordleList","firstDone","setFirstDone","secondDone","setSecondDone","thirdDone","setThirdDone","fourthDone","setFourthDone","fifthDone","setFifthDone","sixthDone","setSixthDone","loading","setLoading","correctWord","setCorrectWord","guesses","setGuesses","first","second","third","fourth","fifth","sixth","dummyWords","setDummyWords","fetchWords","response","fetch","text","lines","split","slice","length","Math","floor","random","toUpperCase","console","log","guessLength","onPress","event","key","prevGuess","match","document","addEventListener","removeEventListener","firstCanEnter","setFirstCanEnter","secondCanEnter","setSecondCanEnter","thirdCanEnter","setThirdCanEnter","fourthCanEnter","setFourthCanEnter","fifthCanEnter","setFifthCanEnter","sixthCanEnter","setSixthCanEnter","alert","compareString","str1","str2","indexMatch","i","greenLetter","dummyWord","guessedWord","greenIndex","offset","parseInt","evalGuess","letter","pos","includes","guessResults","setGuessResults","firstRef","secondRef","thirdRef","fourthRef","fifthRef","sixthRef","cheatVar","evaluteGuess","res","ind","newCheatVar","replace","current","colorGuess","map","prevResults","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/david/wordle-clone/src/components/Grid.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport raw from '../assets/wordle-La.txt'\r\n\r\nconst Grid = () => {\r\n\r\n    const [wordleList, setWordleList] = useState([]);\r\n    const [firstDone, setFirstDone] = useState(false);\r\n    const [secondDone, setSecondDone] = useState(false);\r\n    const [thirdDone, setThirdDone] = useState(false);\r\n    const [fourthDone, setFourthDone] = useState(false);\r\n    const [fifthDone, setFifthDone] = useState(false);\r\n    const [sixthDone, setSixthDone] = useState(false);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [correctWord, setCorrectWord] = useState('');\r\n\r\n    const[guesses, setGuesses] = useState({first: '', second: '', third: '', fourth: '', fifth: '', sixth: ''});\r\n    const [dummyWords, setDummyWords] = useState({first: '', second: '', third: '', fourth: '', fifth: '', sixth: ''});\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchWords = async () => { \r\n            const response = await fetch(raw);\r\n            const text = await response.text();\r\n            const lines = text.split('\\n').slice(0, 2315);\r\n            setWordleList(lines)\r\n        };\r\n        fetchWords();\r\n\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        if (wordleList.length > 0) {\r\n        setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\r\n        // setCorrectWord(\"ELBOW\")\r\n        setLoading(false);\r\n        }\r\n    }, [wordleList])\r\n\r\n    useEffect(() => {\r\n        setDummyWords({first: correctWord})\r\n        console.log(correctWord)\r\n    }, [correctWord])\r\n\r\n\r\n    var guessLength = 0;\r\n\r\n    useEffect(() => {\r\n        const onPress = (event) => {\r\n          if (event.key === 'Backspace') {\r\n            if (!firstDone && guessLength > 0) {\r\n                guessLength -= 1;\r\n              setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first.slice(0, prevGuess.first.length - 1))}))\r\n            } \r\n            else if (!secondDone && guessLength > 0) {\r\n                guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, second: (prevGuess.second.slice(0, prevGuess.second.length - 1))}))\r\n            } \r\n            else if (!thirdDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, third: (prevGuess.third.slice(0, prevGuess.third.length - 1))}))\r\n            } \r\n            else if (!fourthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, fourth: (prevGuess.fourth.slice(0, prevGuess.fourth.length - 1))}))\r\n            } \r\n            else if (!fifthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, fifth: (prevGuess.fifth.slice(0, prevGuess.fifth.length - 1))}))\r\n            } \r\n            else if (!sixthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, sixth: (prevGuess.sixth.slice(0, prevGuess.sixth.length - 1))}))\r\n            } \r\n          } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\r\n            if (!firstDone && guessLength < 5) {\r\n                guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first + event.key.toUpperCase())}))\r\n            }\r\n            else if (firstDone && !secondDone && guessLength < 5) {\r\n                guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, second: (prevGuess.second + event.key.toUpperCase())}))\r\n            } \r\n            else if (firstDone && secondDone && !thirdDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, third: (prevGuess.third + event.key.toUpperCase())}))\r\n            } \r\n            else if (firstDone && secondDone && thirdDone && !fourthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, fourth: (prevGuess.fourth + event.key.toUpperCase())}))\r\n            } \r\n            else if (firstDone && secondDone && thirdDone && fourthDone && !fifthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, fifth: (prevGuess.fifth + event.key.toUpperCase())}))\r\n            } \r\n            else if (firstDone && secondDone && thirdDone && fourthDone && fifthDone && !sixthDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, sixth: (prevGuess.sixth + event.key.toUpperCase())}))\r\n            }\r\n          } \r\n        };\r\n    \r\n        // Attach event listener\r\n        document.addEventListener('keydown', onPress);\r\n    \r\n        // Cleanup function to remove event listener\r\n        return () => {\r\n          document.removeEventListener('keydown', onPress);\r\n        };\r\n      }, [firstDone, secondDone, thirdDone, fourthDone, fifthDone, sixthDone]); // Depend only on the completion status\r\n\r\n      const [firstCanEnter, setFirstCanEnter] = useState(false);\r\n    const [secondCanEnter, setSecondCanEnter] = useState(false);\r\n    const [thirdCanEnter, setThirdCanEnter] = useState(false);\r\n    const [fourthCanEnter, setFourthCanEnter] = useState(false);\r\n    const [fifthCanEnter, setFifthCanEnter] = useState(false);\r\n    const [sixthCanEnter, setSixthCanEnter] = useState(false);\r\n\r\n      useEffect(() => {\r\n        const onPress = (event) => {\r\n            if (event.key === 'Enter') {\r\n                if (!firstDone && firstCanEnter) {\r\n                    setFirstDone(true);\r\n                } else alert(\"NOt enough letters\");\r\n            }\r\n        }\r\n        document.addEventListener('keydown', onPress);\r\n        return () => {\r\n          document.removeEventListener('keydown', onPress);\r\n        };\r\n    },[firstCanEnter])\r\n    \r\n\r\n    const compareString = (str1, str2) => {\r\n        var indexMatch = '';\r\n        for (let i = 0; i < str1.length; i++) {\r\n            if (str1[i] == str2[i]) {\r\n                indexMatch += i;\r\n            }\r\n        } return indexMatch;\r\n    }\r\n    \r\n\r\n\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        if (guesses.first.length == 5 && !firstDone) {\r\n            console.log(\"HWEUIHGUI\")\r\n            setFirstCanEnter(true);\r\n        }\r\n        if (guesses.second.length == 5 && !secondDone) {\r\n            setSecondCanEnter(true);\r\n        }\r\n        if (guesses.third.length == 5 && !thirdDone) {\r\n            setThirdCanEnter(true);\r\n        }\r\n        if (guesses.fourth.length == 5 && !fourthDone) {\r\n            setFourthCanEnter(true);\r\n        }\r\n        if (guesses.fifth.length == 5 && !fifthDone) {\r\n            setFifthCanEnter(true);\r\n        }\r\n        if (guesses.sixth.length == 5 && !sixthDone) {\r\n            setSixthCanEnter(true);\r\n        }\r\n    }, [guesses])\r\n\r\n    const greenLetter = (dummyWord, guessedWord) => {\r\n        const greenIndex = compareString(correctWord, guessedWord);\r\n        var offset = 0;\r\n        for (let i = 0; i < greenIndex.length; i++) {\r\n            dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\r\n            console.log(dummyWord)\r\n            offset++;\r\n        }\r\n        return dummyWord;\r\n    }\r\n\r\n    const evalGuess = (dummyWord, letter, pos) => {\r\n        if (letter == correctWord[pos]) {\r\n            return 'green';\r\n        } else if (dummyWord.includes(letter)) {\r\n            return 'yellow';\r\n        } else {\r\n            return 'gray';\r\n        }\r\n    }\r\n    \r\n    const [guessResults, setGuessResults] = useState({first: [], second: [], third: [], fourth: [], fifth: [], sixth: []})\r\n    const firstRef = useRef(false);\r\n    const secondRef = useRef(false);\r\n    const thirdRef = useRef(false);\r\n    const fourthRef = useRef(false);\r\n    const fifthRef = useRef(false);\r\n    const sixthRef = useRef(false);\r\n\r\n    var cheatVar;\r\n\r\n    const evaluteGuess = (res, ind) => {\r\n        if (guessResults.first) {\r\n            \r\n            const newCheatVar = cheatVar;\r\n            cheatVar = cheatVar.replace(res, '')\r\n            return evalGuess(newCheatVar, res, ind) //check for green, yellow and gray\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (firstDone && !firstRef.current) { //player has made first guess\r\n            cheatVar = greenLetter(correctWord, guesses.first)\r\n            const colorGuess = guesses.first.split('').map((res, ind) => (\r\n                \r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                first: [...prevResults.first, ...colorGuess]\r\n            }));\r\n            firstRef.current = true;\r\n        }\r\n        if (secondDone && !secondRef.current) { //player has made first guess\r\n            cheatVar = greenLetter(correctWord, guesses.second)\r\n            const colorGuess = guesses.second.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                second: [...prevResults.second, ...colorGuess]\r\n            }));\r\n            secondRef.current = true;\r\n        }\r\n        if (thirdDone && !thirdRef.current) { //player has made first guess\r\n            cheatVar = greenLetter(correctWord, guesses.third)\r\n            const colorGuess = guesses.third.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                third: [...prevResults.third, ...colorGuess]\r\n            }));\r\n            thirdRef.current = true;\r\n        }\r\n        if (fourthDone && !fourthRef.current) { //player has made first guess\r\n            cheatVar = greenLetter(correctWord, guesses.fourth)\r\n            const colorGuess = guesses.fourth.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                fourth: [...prevResults.fourth, ...colorGuess]\r\n            }));\r\n            fourthRef.current = true;\r\n        }\r\n        if (fifthDone && !fifthRef.current) { //player has made first guess\r\n            cheatVar = greenLetter(correctWord, guesses.fifth)\r\n            const colorGuess = guesses.fifth.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                fifth: [...prevResults.fifth, ...colorGuess]\r\n            }));\r\n            fifthRef.current = true;\r\n        }\r\n        if (sixthDone && !sixthRef.current) { //player has made first guess\r\n            cheatVar = greenLetter(correctWord, guesses.sixth)\r\n            const colorGuess = guesses.sixth.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                sixth: [...prevResults.sixth, ...colorGuess]\r\n            }));\r\n            sixthRef.current = true;\r\n        }\r\n        // Repeat this pattern for the remaining guesses (third, fourth, etc.)\r\n    }, [firstDone, secondDone, thirdDone, fourthDone, fifthDone, sixthDone]);\r\n\r\n\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>; // Show a loading indicator while data is being fetched\r\n    } \r\n  return (\r\n    <div className='mx-auto w-[500px]'>\r\n        <div className='grid grid-cols-5 w-[340px] mx-auto gap-2'>\r\n\r\n            { (firstDone && firstRef.current) ? \r\n            <>\r\n                {guessResults.first.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses['first'][ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['first'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['first'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                    \r\n                    // <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    //     {guesses['first'][res] || ''}\r\n                    // </div>\r\n                ))}\r\n            </>\r\n            }\r\n\r\n            { secondDone ? \r\n            <>\r\n                {guessResults.second.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses['second'][ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['second'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['second'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n\r\n            { thirdDone ? \r\n            <>\r\n                {guessResults.third.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses.third[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['third'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['third'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n            { fourthDone ? \r\n            <>\r\n                {guessResults.fourth.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses.fourth[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['fourth'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['fourth'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n            { fifthDone ? \r\n            <>\r\n                {guessResults.fifth.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses.fifth[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['fifth'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['fifth'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n            { sixthDone ? \r\n            <>\r\n                {guessResults.sixth.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-green-200' :  res == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                        {guesses.sixth[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['sixth'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['sixth'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n        </div>\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Grid"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,GAAG,MAAM,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEf,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAK,CAAC2B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC;IAAC6B,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC;EAC3G,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGpC,QAAQ,CAAC;IAAC6B,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC;EAGlHnC,SAAS,CAAC,MAAM;IAEZ,MAAMsC,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACrC,GAAG,CAAC;MACjC,MAAMsC,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;MAC7CjC,aAAa,CAAC+B,KAAK,CAAC;IACxB,CAAC;IACDJ,UAAU,CAAC,CAAC;EAEhB,CAAC,EAAE,EAAE,CAAC;EAENtC,SAAS,CAAC,MAAM;IACZ,IAAIU,UAAU,CAACmC,MAAM,GAAG,CAAC,EAAE;MAC3BlB,cAAc,CAACjB,UAAU,CAACoC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;MAC1E;MACAxB,UAAU,CAAC,KAAK,CAAC;IACjB;EACJ,CAAC,EAAE,CAACf,UAAU,CAAC,CAAC;EAEhBV,SAAS,CAAC,MAAM;IACZqC,aAAa,CAAC;MAACP,KAAK,EAAEJ;IAAW,CAAC,CAAC;IACnCwB,OAAO,CAACC,GAAG,CAACzB,WAAW,CAAC;EAC5B,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAGjB,IAAI0B,WAAW,GAAG,CAAC;EAEnBpD,SAAS,CAAC,MAAM;IACZ,MAAMqD,OAAO,GAAIC,KAAK,IAAK;MACzB,IAAIA,KAAK,CAACC,GAAG,KAAK,WAAW,EAAE;QAC7B,IAAI,CAAC3C,SAAS,IAAIwC,WAAW,GAAG,CAAC,EAAE;UAC/BA,WAAW,IAAI,CAAC;UAClBvB,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE1B,KAAK,EAAG0B,SAAS,CAAC1B,KAAK,CAACc,KAAK,CAAC,CAAC,EAAEY,SAAS,CAAC1B,KAAK,CAACe,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QAC5G,CAAC,MACI,IAAI,CAAC/B,UAAU,IAAIsC,WAAW,GAAG,CAAC,EAAE;UACrCA,WAAW,IAAI,CAAC;UAChBvB,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAEzB,MAAM,EAAGyB,SAAS,CAACzB,MAAM,CAACa,KAAK,CAAC,CAAC,EAAEY,SAAS,CAACzB,MAAM,CAACc,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QACjH,CAAC,MACI,IAAI,CAAC7B,SAAS,EAAE;UACjBa,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAExB,KAAK,EAAGwB,SAAS,CAACxB,KAAK,CAACY,KAAK,CAAC,CAAC,EAAEY,SAAS,CAACxB,KAAK,CAACa,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QAC9G,CAAC,MACI,IAAI,CAAC3B,UAAU,EAAE;UAClBW,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAEvB,MAAM,EAAGuB,SAAS,CAACvB,MAAM,CAACW,KAAK,CAAC,CAAC,EAAEY,SAAS,CAACvB,MAAM,CAACY,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QACjH,CAAC,MACI,IAAI,CAACzB,SAAS,EAAE;UACjBS,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAEtB,KAAK,EAAGsB,SAAS,CAACtB,KAAK,CAACU,KAAK,CAAC,CAAC,EAAEY,SAAS,CAACtB,KAAK,CAACW,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QAC9G,CAAC,MACI,IAAI,CAACvB,SAAS,EAAE;UACjBO,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAErB,KAAK,EAAGqB,SAAS,CAACrB,KAAK,CAACS,KAAK,CAAC,CAAC,EAAEY,SAAS,CAACrB,KAAK,CAACU,MAAM,GAAG,CAAC;UAAE,CAAC,CAAC,CAAC;QAC9G;MACF,CAAC,MAAM,IAAIS,KAAK,CAACC,GAAG,CAACE,KAAK,CAAC,UAAU,CAAC,IAAIH,KAAK,CAACC,GAAG,CAACV,MAAM,KAAK,CAAC,EAAE;QAChE,IAAI,CAACjC,SAAS,IAAIwC,WAAW,GAAG,CAAC,EAAE;UAC/BA,WAAW,IAAI,CAAC;UAChBvB,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAE1B,KAAK,EAAG0B,SAAS,CAAC1B,KAAK,GAAGwB,KAAK,CAACC,GAAG,CAACN,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACnG,CAAC,MACI,IAAIrC,SAAS,IAAI,CAACE,UAAU,IAAIsC,WAAW,GAAG,CAAC,EAAE;UAClDA,WAAW,IAAI,CAAC;UAChBvB,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAEzB,MAAM,EAAGyB,SAAS,CAACzB,MAAM,GAAGuB,KAAK,CAACC,GAAG,CAACN,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACrG,CAAC,MACI,IAAIrC,SAAS,IAAIE,UAAU,IAAI,CAACE,SAAS,EAAE;UAC5Ca,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAExB,KAAK,EAAGwB,SAAS,CAACxB,KAAK,GAAGsB,KAAK,CAACC,GAAG,CAACN,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACnG,CAAC,MACI,IAAIrC,SAAS,IAAIE,UAAU,IAAIE,SAAS,IAAI,CAACE,UAAU,EAAE;UAC1DW,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAEvB,MAAM,EAAGuB,SAAS,CAACvB,MAAM,GAAGqB,KAAK,CAACC,GAAG,CAACN,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACrG,CAAC,MACI,IAAIrC,SAAS,IAAIE,UAAU,IAAIE,SAAS,IAAIE,UAAU,IAAI,CAACE,SAAS,EAAE;UACvES,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAEtB,KAAK,EAAGsB,SAAS,CAACtB,KAAK,GAAGoB,KAAK,CAACC,GAAG,CAACN,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACnG,CAAC,MACI,IAAIrC,SAAS,IAAIE,UAAU,IAAIE,SAAS,IAAIE,UAAU,IAAIE,SAAS,IAAI,CAACE,SAAS,EAAE;UACpFO,UAAU,CAAE2B,SAAS,KAAK;YAAE,GAAGA,SAAS;YAAErB,KAAK,EAAGqB,SAAS,CAACrB,KAAK,GAAGmB,KAAK,CAACC,GAAG,CAACN,WAAW,CAAC;UAAE,CAAC,CAAC,CAAC;QACnG;MACF;IACF,CAAC;;IAED;IACAS,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEN,OAAO,CAAC;;IAE7C;IACA,OAAO,MAAM;MACXK,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEP,OAAO,CAAC;IAClD,CAAC;EACH,CAAC,EAAE,CAACzC,SAAS,EAAEE,UAAU,EAAEE,SAAS,EAAEE,UAAU,EAAEE,SAAS,EAAEE,SAAS,CAAC,CAAC,CAAC,CAAC;;EAE1E,MAAM,CAACuC,aAAa,EAAEC,gBAAgB,CAAC,GAAG7D,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC8D,cAAc,EAAEC,iBAAiB,CAAC,GAAG/D,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACgE,aAAa,EAAEC,gBAAgB,CAAC,GAAGjE,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACkE,cAAc,EAAEC,iBAAiB,CAAC,GAAGnE,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACoE,aAAa,EAAEC,gBAAgB,CAAC,GAAGrE,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACsE,aAAa,EAAEC,gBAAgB,CAAC,GAAGvE,QAAQ,CAAC,KAAK,CAAC;EAEvDD,SAAS,CAAC,MAAM;IACd,MAAMqD,OAAO,GAAIC,KAAK,IAAK;MACvB,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;QACvB,IAAI,CAAC3C,SAAS,IAAIiD,aAAa,EAAE;UAC7BhD,YAAY,CAAC,IAAI,CAAC;QACtB,CAAC,MAAM4D,KAAK,CAAC,oBAAoB,CAAC;MACtC;IACJ,CAAC;IACDf,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEN,OAAO,CAAC;IAC7C,OAAO,MAAM;MACXK,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEP,OAAO,CAAC;IAClD,CAAC;EACL,CAAC,EAAC,CAACQ,aAAa,CAAC,CAAC;EAGlB,MAAMa,aAAa,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;IAClC,IAAIC,UAAU,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAAC9B,MAAM,EAAEiC,CAAC,EAAE,EAAE;MAClC,IAAIH,IAAI,CAACG,CAAC,CAAC,IAAIF,IAAI,CAACE,CAAC,CAAC,EAAE;QACpBD,UAAU,IAAIC,CAAC;MACnB;IACJ;IAAE,OAAOD,UAAU;EACvB,CAAC;EAOD7E,SAAS,CAAC,MAAM;IACZ,IAAI4B,OAAO,CAACE,KAAK,CAACe,MAAM,IAAI,CAAC,IAAI,CAACjC,SAAS,EAAE;MACzCsC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MACxBW,gBAAgB,CAAC,IAAI,CAAC;IAC1B;IACA,IAAIlC,OAAO,CAACG,MAAM,CAACc,MAAM,IAAI,CAAC,IAAI,CAAC/B,UAAU,EAAE;MAC3CkD,iBAAiB,CAAC,IAAI,CAAC;IAC3B;IACA,IAAIpC,OAAO,CAACI,KAAK,CAACa,MAAM,IAAI,CAAC,IAAI,CAAC7B,SAAS,EAAE;MACzCkD,gBAAgB,CAAC,IAAI,CAAC;IAC1B;IACA,IAAItC,OAAO,CAACK,MAAM,CAACY,MAAM,IAAI,CAAC,IAAI,CAAC3B,UAAU,EAAE;MAC3CkD,iBAAiB,CAAC,IAAI,CAAC;IAC3B;IACA,IAAIxC,OAAO,CAACM,KAAK,CAACW,MAAM,IAAI,CAAC,IAAI,CAACzB,SAAS,EAAE;MACzCkD,gBAAgB,CAAC,IAAI,CAAC;IAC1B;IACA,IAAI1C,OAAO,CAACO,KAAK,CAACU,MAAM,IAAI,CAAC,IAAI,CAACvB,SAAS,EAAE;MACzCkD,gBAAgB,CAAC,IAAI,CAAC;IAC1B;EACJ,CAAC,EAAE,CAAC5C,OAAO,CAAC,CAAC;EAEb,MAAMmD,WAAW,GAAGA,CAACC,SAAS,EAAEC,WAAW,KAAK;IAC5C,MAAMC,UAAU,GAAGR,aAAa,CAAChD,WAAW,EAAEuD,WAAW,CAAC;IAC1D,IAAIE,MAAM,GAAG,CAAC;IACd,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,UAAU,CAACrC,MAAM,EAAEiC,CAAC,EAAE,EAAE;MACxCE,SAAS,GAAGA,SAAS,CAACpC,KAAK,CAAC,CAAC,EAAE,CAACwC,QAAQ,CAACF,UAAU,CAACJ,CAAC,CAAC,CAAC,GAAGK,MAAM,CAAC,CAAC,GAAGH,SAAS,CAACpC,KAAK,CAACwC,QAAQ,CAACF,UAAU,CAACJ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGK,MAAM,CAAC;MAC1HjC,OAAO,CAACC,GAAG,CAAC6B,SAAS,CAAC;MACtBG,MAAM,EAAE;IACZ;IACA,OAAOH,SAAS;EACpB,CAAC;EAED,MAAMK,SAAS,GAAGA,CAACL,SAAS,EAAEM,MAAM,EAAEC,GAAG,KAAK;IAC1C,IAAID,MAAM,IAAI5D,WAAW,CAAC6D,GAAG,CAAC,EAAE;MAC5B,OAAO,OAAO;IAClB,CAAC,MAAM,IAAIP,SAAS,CAACQ,QAAQ,CAACF,MAAM,CAAC,EAAE;MACnC,OAAO,QAAQ;IACnB,CAAC,MAAM;MACH,OAAO,MAAM;IACjB;EACJ,CAAC;EAED,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAGzF,QAAQ,CAAC;IAAC6B,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAE,CAAC,CAAC;EACtH,MAAMwD,QAAQ,GAAGzF,MAAM,CAAC,KAAK,CAAC;EAC9B,MAAM0F,SAAS,GAAG1F,MAAM,CAAC,KAAK,CAAC;EAC/B,MAAM2F,QAAQ,GAAG3F,MAAM,CAAC,KAAK,CAAC;EAC9B,MAAM4F,SAAS,GAAG5F,MAAM,CAAC,KAAK,CAAC;EAC/B,MAAM6F,QAAQ,GAAG7F,MAAM,CAAC,KAAK,CAAC;EAC9B,MAAM8F,QAAQ,GAAG9F,MAAM,CAAC,KAAK,CAAC;EAE9B,IAAI+F,QAAQ;EAEZ,MAAMC,YAAY,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAC/B,IAAIX,YAAY,CAAC3D,KAAK,EAAE;MAEpB,MAAMuE,WAAW,GAAGJ,QAAQ;MAC5BA,QAAQ,GAAGA,QAAQ,CAACK,OAAO,CAACH,GAAG,EAAE,EAAE,CAAC;MACpC,OAAOd,SAAS,CAACgB,WAAW,EAAEF,GAAG,EAAEC,GAAG,CAAC,EAAC;IAC5C;EACJ,CAAC;EAEDpG,SAAS,CAAC,MAAM;IACZ,IAAIY,SAAS,IAAI,CAAC+E,QAAQ,CAACY,OAAO,EAAE;MAAE;MAClCN,QAAQ,GAAGlB,WAAW,CAACrD,WAAW,EAAEE,OAAO,CAACE,KAAK,CAAC;MAClD,MAAM0E,UAAU,GAAG5E,OAAO,CAACE,KAAK,CAACa,KAAK,CAAC,EAAE,CAAC,CAAC8D,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,KAEpDF,YAAY,CAACC,GAAG,EAAEC,GAAG,CACxB,CAAC;MACFV,eAAe,CAACgB,WAAW,KAAK;QAC5B,GAAGA,WAAW;QACd5E,KAAK,EAAE,CAAC,GAAG4E,WAAW,CAAC5E,KAAK,EAAE,GAAG0E,UAAU;MAC/C,CAAC,CAAC,CAAC;MACHb,QAAQ,CAACY,OAAO,GAAG,IAAI;IAC3B;IACA,IAAIzF,UAAU,IAAI,CAAC8E,SAAS,CAACW,OAAO,EAAE;MAAE;MACpCN,QAAQ,GAAGlB,WAAW,CAACrD,WAAW,EAAEE,OAAO,CAACG,MAAM,CAAC;MACnD,MAAMyE,UAAU,GAAG5E,OAAO,CAACG,MAAM,CAACY,KAAK,CAAC,EAAE,CAAC,CAAC8D,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,KACrDF,YAAY,CAACC,GAAG,EAAEC,GAAG,CACxB,CAAC;MACFV,eAAe,CAACgB,WAAW,KAAK;QAC5B,GAAGA,WAAW;QACd3E,MAAM,EAAE,CAAC,GAAG2E,WAAW,CAAC3E,MAAM,EAAE,GAAGyE,UAAU;MACjD,CAAC,CAAC,CAAC;MACHZ,SAAS,CAACW,OAAO,GAAG,IAAI;IAC5B;IACA,IAAIvF,SAAS,IAAI,CAAC6E,QAAQ,CAACU,OAAO,EAAE;MAAE;MAClCN,QAAQ,GAAGlB,WAAW,CAACrD,WAAW,EAAEE,OAAO,CAACI,KAAK,CAAC;MAClD,MAAMwE,UAAU,GAAG5E,OAAO,CAACI,KAAK,CAACW,KAAK,CAAC,EAAE,CAAC,CAAC8D,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,KACpDF,YAAY,CAACC,GAAG,EAAEC,GAAG,CACxB,CAAC;MACFV,eAAe,CAACgB,WAAW,KAAK;QAC5B,GAAGA,WAAW;QACd1E,KAAK,EAAE,CAAC,GAAG0E,WAAW,CAAC1E,KAAK,EAAE,GAAGwE,UAAU;MAC/C,CAAC,CAAC,CAAC;MACHX,QAAQ,CAACU,OAAO,GAAG,IAAI;IAC3B;IACA,IAAIrF,UAAU,IAAI,CAAC4E,SAAS,CAACS,OAAO,EAAE;MAAE;MACpCN,QAAQ,GAAGlB,WAAW,CAACrD,WAAW,EAAEE,OAAO,CAACK,MAAM,CAAC;MACnD,MAAMuE,UAAU,GAAG5E,OAAO,CAACK,MAAM,CAACU,KAAK,CAAC,EAAE,CAAC,CAAC8D,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,KACrDF,YAAY,CAACC,GAAG,EAAEC,GAAG,CACxB,CAAC;MACFV,eAAe,CAACgB,WAAW,KAAK;QAC5B,GAAGA,WAAW;QACdzE,MAAM,EAAE,CAAC,GAAGyE,WAAW,CAACzE,MAAM,EAAE,GAAGuE,UAAU;MACjD,CAAC,CAAC,CAAC;MACHV,SAAS,CAACS,OAAO,GAAG,IAAI;IAC5B;IACA,IAAInF,SAAS,IAAI,CAAC2E,QAAQ,CAACQ,OAAO,EAAE;MAAE;MAClCN,QAAQ,GAAGlB,WAAW,CAACrD,WAAW,EAAEE,OAAO,CAACM,KAAK,CAAC;MAClD,MAAMsE,UAAU,GAAG5E,OAAO,CAACM,KAAK,CAACS,KAAK,CAAC,EAAE,CAAC,CAAC8D,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,KACpDF,YAAY,CAACC,GAAG,EAAEC,GAAG,CACxB,CAAC;MACFV,eAAe,CAACgB,WAAW,KAAK;QAC5B,GAAGA,WAAW;QACdxE,KAAK,EAAE,CAAC,GAAGwE,WAAW,CAACxE,KAAK,EAAE,GAAGsE,UAAU;MAC/C,CAAC,CAAC,CAAC;MACHT,QAAQ,CAACQ,OAAO,GAAG,IAAI;IAC3B;IACA,IAAIjF,SAAS,IAAI,CAAC0E,QAAQ,CAACO,OAAO,EAAE;MAAE;MAClCN,QAAQ,GAAGlB,WAAW,CAACrD,WAAW,EAAEE,OAAO,CAACO,KAAK,CAAC;MAClD,MAAMqE,UAAU,GAAG5E,OAAO,CAACO,KAAK,CAACQ,KAAK,CAAC,EAAE,CAAC,CAAC8D,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,KACpDF,YAAY,CAACC,GAAG,EAAEC,GAAG,CACxB,CAAC;MACFV,eAAe,CAACgB,WAAW,KAAK;QAC5B,GAAGA,WAAW;QACdvE,KAAK,EAAE,CAAC,GAAGuE,WAAW,CAACvE,KAAK,EAAE,GAAGqE,UAAU;MAC/C,CAAC,CAAC,CAAC;MACHR,QAAQ,CAACO,OAAO,GAAG,IAAI;IAC3B;IACA;EACJ,CAAC,EAAE,CAAC3F,SAAS,EAAEE,UAAU,EAAEE,SAAS,EAAEE,UAAU,EAAEE,SAAS,EAAEE,SAAS,CAAC,CAAC;EAIxE,IAAIE,OAAO,EAAE;IACT,oBAAOnB,OAAA;MAAAsG,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EAClC;EACF,oBACE1G,OAAA;IAAK2G,SAAS,EAAC,mBAAmB;IAAAL,QAAA,eAC9BtG,OAAA;MAAK2G,SAAS,EAAC,0CAA0C;MAAAL,QAAA,GAElD/F,SAAS,IAAI+E,QAAQ,CAACY,OAAO,gBAChClG,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACKlB,YAAY,CAAC3D,KAAK,CAAC2E,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,kBAC7B/F,OAAA;UAAK2G,SAAS,EAAI,aAAab,GAAG,IAAI,OAAO,GAAG,cAAc,GAAIA,GAAG,IAAI,QAAQ,GAAG,eAAe,GAAG,aAAa,kFAAoF;UAAAQ,QAAA,EAClM/E,OAAO,CAAC,OAAO,CAAC,CAACwE,GAAG,CAAC,IAAI;QAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CACR;MAAC,gBACJ,CAAC,gBAEH1G,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACK,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAACF,GAAG,CAAEN,GAAG,IACjBvE,OAAO,CAAC,OAAO,CAAC,CAACuE,GAAG,CAAC,gBAErB9F,OAAA;UAAK2G,SAAS,EAAC,0GAA0G;UAAAL,QAAA,EACpH/E,OAAO,CAAC,OAAO,CAAC,CAACuE,GAAG;QAAC;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,gBAEN1G,OAAA;UAAK2G,SAAS,EAAC;QAA0G;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpH;;QAEL;QACA;QACA;QACH;MAAC,gBACJ,CAAC,EAGDjG,UAAU,gBACZT,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACKlB,YAAY,CAAC1D,MAAM,CAAC0E,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,kBAC9B/F,OAAA;UAAK2G,SAAS,EAAI,aAAab,GAAG,IAAI,OAAO,GAAG,cAAc,GAAIA,GAAG,IAAI,QAAQ,GAAG,eAAe,GAAG,aAAa,kFAAoF;UAAAQ,QAAA,EAClM/E,OAAO,CAAC,QAAQ,CAAC,CAACwE,GAAG,CAAC,IAAI;QAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CACR;MAAC,gBACJ,CAAC,gBAEH1G,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACK,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAACF,GAAG,CAAEN,GAAG,IACjBvE,OAAO,CAAC,QAAQ,CAAC,CAACuE,GAAG,CAAC,gBAEtB9F,OAAA;UAAK2G,SAAS,EAAC,0GAA0G;UAAAL,QAAA,EACpH/E,OAAO,CAAC,QAAQ,CAAC,CAACuE,GAAG;QAAC;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB,CAAC,gBAEN1G,OAAA;UAAK2G,SAAS,EAAC;QAA0G;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpH,CACR;MAAC,gBACJ,CAAC,EAGD/F,SAAS,gBACXX,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACKlB,YAAY,CAACzD,KAAK,CAACyE,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,kBAC7B/F,OAAA;UAAK2G,SAAS,EAAI,aAAab,GAAG,IAAI,OAAO,GAAG,cAAc,GAAIA,GAAG,IAAI,QAAQ,GAAG,eAAe,GAAG,aAAa,kFAAoF;UAAAQ,QAAA,EAClM/E,OAAO,CAACI,KAAK,CAACoE,GAAG,CAAC,IAAI;QAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CACR;MAAC,gBACJ,CAAC,gBAEH1G,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACK,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAACF,GAAG,CAAEN,GAAG,IACjBvE,OAAO,CAAC,OAAO,CAAC,CAACuE,GAAG,CAAC,gBAErB9F,OAAA;UAAK2G,SAAS,EAAC,0GAA0G;UAAAL,QAAA,EACpH/E,OAAO,CAAC,OAAO,CAAC,CAACuE,GAAG;QAAC;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,gBAEN1G,OAAA;UAAK2G,SAAS,EAAC;QAA0G;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpH,CACR;MAAC,gBACJ,CAAC,EAED7F,UAAU,gBACZb,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACKlB,YAAY,CAACxD,MAAM,CAACwE,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,kBAC9B/F,OAAA;UAAK2G,SAAS,EAAI,aAAab,GAAG,IAAI,OAAO,GAAG,cAAc,GAAIA,GAAG,IAAI,QAAQ,GAAG,eAAe,GAAG,aAAa,kFAAoF;UAAAQ,QAAA,EAClM/E,OAAO,CAACK,MAAM,CAACmE,GAAG,CAAC,IAAI;QAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB,CACR;MAAC,gBACJ,CAAC,gBAEH1G,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACK,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAACF,GAAG,CAAEN,GAAG,IACjBvE,OAAO,CAAC,QAAQ,CAAC,CAACuE,GAAG,CAAC,gBAEtB9F,OAAA;UAAK2G,SAAS,EAAC,0GAA0G;UAAAL,QAAA,EACpH/E,OAAO,CAAC,QAAQ,CAAC,CAACuE,GAAG;QAAC;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB,CAAC,gBAEN1G,OAAA;UAAK2G,SAAS,EAAC;QAA0G;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpH,CACR;MAAC,gBACJ,CAAC,EAED3F,SAAS,gBACXf,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACKlB,YAAY,CAACvD,KAAK,CAACuE,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,kBAC7B/F,OAAA;UAAK2G,SAAS,EAAI,aAAab,GAAG,IAAI,OAAO,GAAG,cAAc,GAAIA,GAAG,IAAI,QAAQ,GAAG,eAAe,GAAG,aAAa,kFAAoF;UAAAQ,QAAA,EAClM/E,OAAO,CAACM,KAAK,CAACkE,GAAG,CAAC,IAAI;QAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CACR;MAAC,gBACJ,CAAC,gBAEH1G,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACK,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAACF,GAAG,CAAEN,GAAG,IACjBvE,OAAO,CAAC,OAAO,CAAC,CAACuE,GAAG,CAAC,gBAErB9F,OAAA;UAAK2G,SAAS,EAAC,0GAA0G;UAAAL,QAAA,EACpH/E,OAAO,CAAC,OAAO,CAAC,CAACuE,GAAG;QAAC;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,gBAEN1G,OAAA;UAAK2G,SAAS,EAAC;QAA0G;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpH,CACR;MAAC,gBACJ,CAAC,EAEDzF,SAAS,gBACXjB,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACKlB,YAAY,CAACtD,KAAK,CAACsE,GAAG,CAAC,CAACN,GAAG,EAAEC,GAAG,kBAC7B/F,OAAA;UAAK2G,SAAS,EAAI,aAAab,GAAG,IAAI,OAAO,GAAG,cAAc,GAAIA,GAAG,IAAI,QAAQ,GAAG,eAAe,GAAG,aAAa,kFAAoF;UAAAQ,QAAA,EAClM/E,OAAO,CAACO,KAAK,CAACiE,GAAG,CAAC,IAAI;QAAE;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB,CACR;MAAC,gBACJ,CAAC,gBAEH1G,OAAA,CAAAE,SAAA;QAAAoG,QAAA,EACK,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAACF,GAAG,CAAEN,GAAG,IACjBvE,OAAO,CAAC,OAAO,CAAC,CAACuE,GAAG,CAAC,gBAErB9F,OAAA;UAAK2G,SAAS,EAAC,0GAA0G;UAAAL,QAAA,EACpH/E,OAAO,CAAC,OAAO,CAAC,CAACuE,GAAG;QAAC;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,gBAEN1G,OAAA;UAAK2G,SAAS,EAAC;QAA0G;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpH,CACR;MAAC,gBACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAEV,CAAC;AAAAtG,EAAA,CAraKD,IAAI;AAAAyG,EAAA,GAAJzG,IAAI;AAuaV,eAAeA,IAAI;AAAA,IAAAyG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}