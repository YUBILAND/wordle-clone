{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\wordle-clone\\\\Client\\\\src\\\\components\\\\Keys.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Keyboard from 'react-simple-keyboard';\nimport \"react-simple-keyboard/build/css/index.css\";\nimport './Keys.css';\nimport BackspaceOutlinedIcon from '@mui/icons-material/BackspaceOutlined';\nimport inputMask from \"simple-keyboard-input-mask\";\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Keys = () => {\n  _s();\n  const {\n    darkMode,\n    setDarkMode\n  } = useContext(KeyboardContext);\n  const [green, setGreen] = useState(() => {\n    const existingGreen = JSON.parse(localStorage.getItem('green'));\n    return existingGreen || [];\n  });\n  const [yellow, setYellow] = useState(() => {\n    const existingYellow = JSON.parse(localStorage.getItem('yellow'));\n    return existingYellow || [];\n  });\n  const [gray, setGray] = useState(() => {\n    const existingGray = JSON.parse(localStorage.getItem('gray'));\n    return existingGray || [];\n  });\n  const buttonTheme = useRef([{\n    class: `${darkMode ? 'DMbuttons' : 'buttons'}`,\n    buttons: 'q w e r t y u i o p a s d f g h j k l ENTER z x c v b n m DEL'\n  }]);\n  const {\n    kbColor\n  } = useContext(KeyboardContext);\n  const {\n    colorBlind,\n    setColorBlind\n  } = useContext(KeyboardContext);\n  useEffect(() => {\n    // break down guess into their color states by letter\n\n    // console.log(kbColor)\n    if (kbColor.length) {\n      console.log(kbColor);\n      // kbColor.map((guess) => (\n      Object.entries(kbColor.at(-1)).forEach(([letter, color]) => {\n        color == \"green\" ? setGreen(prevKey => [...prevKey, letter.toLowerCase()]) : color == 'yellow' ? setYellow(prevKey => [...prevKey, letter.toLowerCase()]) : setGray(prevKey => [...prevKey, letter.toLowerCase()]);\n      });\n      // console.log(res)\n      // ))\n    }\n  }, [kbColor]);\n  const [greenString, setGreenString] = useState('');\n  const [yellowString, setYellowString] = useState('');\n  const [grayString, setGrayString] = useState('');\n  const [update, setUpdate] = useState(false);\n  useEffect(() => {\n    //overwrites previous inaccurate guess with updated color, ex. word is blimp, first guess is pupil, l is yellow, second guess plane, l is green , overwrite with green\n\n    // console.log(`green is ${[...new Set(green)]}`)\n    // console.log(`yellow is ${[...new Set(yellow)]}`)\n    // console.log(`gray is ${[...new Set(gray)]}`)\n\n    // whitespace is for the react keyboard readability\n    // console.log('green is ', green)\n    // console.log('yellow is ', yellow)\n    // console.log('gray is ', new Set(gray))\n\n    //green\n    const existingGreen = JSON.parse(localStorage.getItem('green')) || [];\n    if (JSON.stringify(existingGreen) !== JSON.stringify(green)) localStorage.setItem('green', JSON.stringify(Array.from(new Set(green))));\n    const existingYellow = JSON.parse(localStorage.getItem('yellow')) || [];\n    if (JSON.stringify(existingYellow) !== JSON.stringify(yellow)) localStorage.setItem('yellow', JSON.stringify(Array.from(new Set(yellow))));\n    const existingGray = JSON.parse(localStorage.getItem('gray')) || [];\n    if (JSON.stringify(existingGray) !== JSON.stringify(gray)) localStorage.setItem('gray', JSON.stringify(Array.from(new Set(gray))));\n    green && setGreenString(green.join(' ')); //green always should be displayed\n\n    const removeGreenfromYellow = yellow.filter(color => !green.includes(color));\n    const removeGreenfromGray = gray.filter(color => !green.includes(color));\n    const removeYellowfromGray = removeGreenfromGray.filter(color => !removeGreenfromYellow.includes(color));\n    setYellowString(removeGreenfromYellow.join(' '));\n    setGrayString(removeYellowfromGray.join(' '));\n  }, [green, yellow, gray]);\n\n  // useEffect(() => { // switches already guessed color of button theme based on color blind mode\n  //     if (colorBlind) {\n  //         buttonTheme.current = buttonTheme.current.map(item => {\n  //             if (item.class === 'KBgreen') {\n  //                 return {\n  //                     ...item,\n  //                     class : 'KBCBgreen'\n  //                 }\n  //             } else if (item.class === 'KByellow') {\n  //                 return {\n  //                     ...item,\n  //                     class : 'KBCByellow'\n  //                 }\n  //             } else {\n  //                 return item;\n  //             }\n  //         }) \n  //     } else {\n\n  //         buttonTheme.current = buttonTheme.current.map(item => {\n  //             if (item.class === 'KBCBgreen') {\n  //                 return {\n  //                     ...item,\n  //                     class : 'KBgreen'\n  //                 }\n  //             } else if (item.class === 'KBCByellow') {\n  //                 return {\n  //                     ...item,\n  //                     class : 'KByellow'\n  //                 }\n  //             } else {\n  //                 return item;\n  //             }\n  //         }) \n  //     }\n  // }, [colorBlind])\n\n  // useEffect(() => {\n  //     if (darkMode) {\n  //         buttonTheme.current = buttonTheme.current.map(item => {\n  //             if (item.class === 'buttons') {\n  //                 return {\n  //                     ...item,\n  //                     class : 'DMbuttons'\n  //                 }\n  //             } else if (item.class === 'KBgray') {\n  //                 return {\n  //                     ...item,\n  //                     class : 'KBDMgray'\n  //                 }\n  //             }\n  //             else {\n  //                 return item;\n  //             }\n  //         })\n  //     } else {\n  //         buttonTheme.current = buttonTheme.current.map(item => {\n  //             if (item.class === 'DMbuttons') {\n  //                 return {\n  //                     ...item,\n  //                     class : 'buttons'\n  //                 }\n  //             } else if (item.class === 'KBDMgray') {\n  //                 return {\n  //                     ...item,\n  //                     class : 'KBgray'\n  //                 }\n  //             }\n  //             else {\n  //                 return item;\n  //             }\n  //         })\n  //     }\n  // }, [darkMode])\n\n  const {\n    settings,\n    showSettings\n  } = useContext(KeyboardContext);\n  const [clickedSettings, setClickedSettings] = useState(false);\n  const skipMount = useRef(false);\n  useEffect(() => {\n    if (!skipMount.current) {\n      //skip mount\n      skipMount.current = true;\n      return;\n    }\n    if (skipMount.current) {\n      setClickedSettings(true);\n    }\n  }, [settings]);\n  const {\n    doneHash,\n    setDoneHash\n  } = useContext(KeyboardContext);\n  useEffect(() => {\n    setClickedSettings(false);\n  }, [doneHash]);\n  useEffect(() => {\n    //sets keyboard color on each guess rerender, new guesses as well as initial mount\n    buttonTheme.current = [{\n      class: `${darkMode ? 'DMbuttons' : 'buttons'}`,\n      buttons: 'q w e r t y u i o p a s d f g h j k l ENTER z x c v b n m DEL'\n    }];\n    if (clickedSettings) {\n      // if (greenString.length + yellowString.length + grayString.length > 0) {\n      //     buttonTheme.current = [\n      //         {\n      //             class: `${ colorBlind ? 'KBCBgreen': 'KBgreen' }`,\n      //             buttons: greenString || ' '\n      //         },\n      //         {\n      //             class: `${ colorBlind ? 'KBCByellow': 'KByellow' }`,\n      //             buttons: yellowString  || ' '\n      //         },\n      //         {\n      //             class: `${ darkMode ? 'KBDMgray': 'KBgray' }`,\n      //             buttons: grayString || ' '\n      //         },\n      //     ]\n      // }\n      if (darkMode && colorBlind) {\n        greenString.length && greenString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.add('KBCBgreen');\n        });\n        yellowString.length && yellowString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.add('KBCByellow');\n        });\n        grayString.length && grayString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.add('KBDMgray');\n        });\n      } else if (darkMode) {\n        greenString.length && greenString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.add('KBgreen');\n        });\n        yellowString.length && yellowString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.add('KByellow');\n        });\n        grayString.length && grayString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.add('KBDMgray');\n        });\n      } else if (colorBlind) {\n        greenString.length && greenString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.add('KBCBgreen');\n        });\n        yellowString.length && yellowString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.add('KBCByellow');\n        });\n        grayString.length && grayString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.add('KBgray');\n        });\n      } else {\n        greenString.length && greenString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.remove('KBCBgreen');\n          button.classList.add('KBgreen');\n        });\n        yellowString.length && yellowString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.remove('KBCBgreen');\n          button.classList.add('KByellow');\n        });\n        grayString.length && grayString.split(' ').map((res, ind) => {\n          const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n          button.classList.remove('KBDMgray');\n          button.classList.add('KBgray');\n        });\n      }\n    } else {\n      setTimeout(() => {\n        // if (greenString.length + yellowString.length + grayString.length > 0) {\n        //     buttonTheme.current = [\n        //         {\n        //             class: `${ colorBlind ? 'KBCBgreen': 'KBgreen' }`,\n        //             buttons: greenString || ' '\n        //         },\n        //         {\n        //             class: `${ colorBlind ? 'KBCByellow': 'KByellow' }`,\n        //             buttons: yellowString  || ' '\n        //         },\n        //         {\n        //             class: `${ darkMode ? 'KBDMgray': 'KBgray' }`,\n        //             buttons: grayString || ' '\n        //         },\n        //     ]\n        // }\n        if (darkMode && colorBlind) {\n          greenString.length && greenString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.add('KBCBgreen');\n          });\n          yellowString.length && yellowString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.add('KBCByellow');\n          });\n          grayString.length && grayString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.add('KBDMgray');\n          });\n        } else if (darkMode) {\n          greenString.length && greenString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.add('KBgreen');\n          });\n          yellowString.length && yellowString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.add('KByellow');\n          });\n          grayString.length && grayString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.add('KBDMgray');\n          });\n        } else if (colorBlind) {\n          greenString.length && greenString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.add('KBCBgreen');\n          });\n          yellowString.length && yellowString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.add('KBCByellow');\n          });\n          grayString.length && grayString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.add('KBgray');\n          });\n        } else {\n          greenString.length && greenString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.remove('KBCBgreen');\n            button.classList.add('KBgreen');\n          });\n          yellowString.length && yellowString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.remove('KBCBgreen');\n            button.classList.add('KByellow');\n          });\n          grayString.length && grayString.split(' ').map((res, ind) => {\n            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\n            button.classList.remove('KBDMgray');\n            button.classList.add('KBgray');\n          });\n        }\n      }, 1000);\n    }\n  }, [greenString, yellowString, grayString, darkMode, colorBlind, settings]);\n  const kbChange = input => {\n    // if (input.slice(-1) == \"L\") {\n\n    // } else {\n\n    // }\n  };\n  const {\n    guesses,\n    setGuesses\n  } = useContext(KeyboardContext);\n  const {\n    guessLength,\n    setGuessLength\n  } = useContext(KeyboardContext);\n  const {\n    canEnterHash,\n    setCanEnterHash\n  } = useContext(KeyboardContext);\n  const {\n    notEnough,\n    setNotEnough\n  } = useContext(KeyboardContext);\n  const {\n    wrongWord,\n    setWrongWord\n  } = useContext(KeyboardContext);\n  const {\n    wordleList,\n    setWordleList\n  } = useContext(KeyboardContext);\n  const {\n    enterPressed,\n    setEnterPressed\n  } = useContext(KeyboardContext);\n  const {\n    removeStyle,\n    setRemoveStyle\n  } = useContext(KeyboardContext);\n  const onKeyPress = button => {\n    // console.log(\"Button pressed\", button);\n\n    Object.entries(doneHash).some(([key, value]) => {\n      const doneKey = key.replace('Done', '');\n      const canEnterKey = doneKey + 'CanEnter';\n      if (!value) {\n        if (button == \"DEL\" && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            [doneKey]: prevGuess[doneKey].slice(0, prevGuess[doneKey].length - 1)\n          }));\n        } else if (button == \"ENTER\") {\n          if (canEnterHash[canEnterKey]) {\n            if (wordleList.includes(guesses[doneKey].toLowerCase())) {\n              setEnterPressed(true);\n              setRemoveStyle(false);\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                [key]: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else if (button != \"DEL\" && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            [doneKey]: prevGuess[doneKey] + button.toUpperCase()\n          }));\n        }\n        return true;\n      }\n      return false;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mx-auto w-[500px] h-[198px]\",\n    children: /*#__PURE__*/_jsxDEV(Keyboard, {\n      className: \"kibord w-full p-0\",\n      onChange: kbChange,\n      onKeyPress: onKeyPress,\n      modules: [inputMask],\n      inputMask: {\n        default: {\n          mask: '12345',\n          regex: /^[a-zA-Z0-9_-]*$/\n        }\n      },\n      layout: {\n        default: ['q w e r t y u i o p', 'a s d f g h j k l', 'ENTER z x c v b n m DEL']\n      },\n      buttonTheme: buttonTheme.current,\n      theme: \"hg-theme-default board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 9\n  }, this);\n};\n_s(Keys, \"05u7W6SS6OEnytTYbcEUd2u1ars=\");\n_c = Keys;\nexport default Keys;\nvar _c;\n$RefreshReg$(_c, \"Keys\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useRef","Keyboard","BackspaceOutlinedIcon","inputMask","KeyboardContext","jsxDEV","_jsxDEV","Keys","_s","darkMode","setDarkMode","green","setGreen","existingGreen","JSON","parse","localStorage","getItem","yellow","setYellow","existingYellow","gray","setGray","existingGray","buttonTheme","class","buttons","kbColor","colorBlind","setColorBlind","length","console","log","Object","entries","at","forEach","letter","color","prevKey","toLowerCase","greenString","setGreenString","yellowString","setYellowString","grayString","setGrayString","update","setUpdate","stringify","setItem","Array","from","Set","join","removeGreenfromYellow","filter","includes","removeGreenfromGray","removeYellowfromGray","settings","showSettings","clickedSettings","setClickedSettings","skipMount","current","doneHash","setDoneHash","split","map","res","ind","button","document","querySelector","classList","add","remove","setTimeout","kbChange","input","guesses","setGuesses","guessLength","setGuessLength","canEnterHash","setCanEnterHash","notEnough","setNotEnough","wrongWord","setWrongWord","wordleList","setWordleList","enterPressed","setEnterPressed","removeStyle","setRemoveStyle","onKeyPress","some","key","value","doneKey","replace","canEnterKey","prevGuessLen","prevGuess","slice","prevDone","toUpperCase","className","children","onChange","modules","default","mask","regex","layout","theme","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/david/wordle-clone/Client/src/components/Keys.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react'\r\nimport Keyboard from 'react-simple-keyboard';\r\nimport \"react-simple-keyboard/build/css/index.css\";\r\nimport './Keys.css'\r\nimport BackspaceOutlinedIcon from '@mui/icons-material/BackspaceOutlined';\r\nimport inputMask from \"simple-keyboard-input-mask\";\r\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\r\n\r\nconst Keys = () => {\r\n\r\n    const {darkMode, setDarkMode} = useContext(KeyboardContext);\r\n    const [green, setGreen] = useState(() => {\r\n        const existingGreen = JSON.parse(localStorage.getItem('green'));\r\n        return existingGreen || [];\r\n    });\r\n    const [yellow, setYellow] = useState(() => {\r\n        const existingYellow = JSON.parse(localStorage.getItem('yellow'));\r\n        return existingYellow || [];\r\n    });\r\n    const [gray, setGray] = useState(() => {\r\n        const existingGray = JSON.parse(localStorage.getItem('gray'));\r\n        return existingGray || [];\r\n    });\r\n    const buttonTheme = useRef([{class: `${ darkMode ? 'DMbuttons' : 'buttons' }`,\r\n        buttons: 'q w e r t y u i o p a s d f g h j k l ENTER z x c v b n m DEL'}])\r\n\r\n    const {kbColor} = useContext(KeyboardContext);\r\n    const {colorBlind, setColorBlind} = useContext(KeyboardContext);\r\n\r\n\r\n    useEffect(() => { // break down guess into their color states by letter\r\n\r\n        // console.log(kbColor)\r\n        if (kbColor.length) {\r\n            console.log(kbColor)\r\n            // kbColor.map((guess) => (\r\n                Object.entries(kbColor.at(-1)).forEach(([letter, color]) => {\r\n                    color == \"green\" \r\n                    ?\r\n                    setGreen(prevKey => ([\r\n                        ...prevKey,\r\n                        letter.toLowerCase()\r\n                    ]))\r\n                    :\r\n                    color == 'yellow'\r\n                    ?\r\n                    setYellow(prevKey => ([\r\n                        ...prevKey,\r\n                        letter.toLowerCase()\r\n                    ]))\r\n                    :\r\n                    setGray(prevKey => ([\r\n                        ...prevKey,\r\n                        letter.toLowerCase()\r\n                    ]))\r\n                })\r\n                // console.log(res)\r\n            // ))\r\n        }\r\n    }, [kbColor])\r\n\r\n    const [greenString, setGreenString] = useState('');\r\n    const [yellowString, setYellowString] = useState('');\r\n    const [grayString, setGrayString] = useState('');\r\n\r\n    const [update, setUpdate] = useState(false)\r\n\r\n    useEffect(() => { //overwrites previous inaccurate guess with updated color, ex. word is blimp, first guess is pupil, l is yellow, second guess plane, l is green , overwrite with green\r\n        \r\n        // console.log(`green is ${[...new Set(green)]}`)\r\n        // console.log(`yellow is ${[...new Set(yellow)]}`)\r\n        // console.log(`gray is ${[...new Set(gray)]}`)\r\n\r\n        // whitespace is for the react keyboard readability\r\n        // console.log('green is ', green)\r\n        // console.log('yellow is ', yellow)\r\n        // console.log('gray is ', new Set(gray))\r\n\r\n        //green\r\n        const existingGreen = JSON.parse(localStorage.getItem('green')) || [];\r\n        if (JSON.stringify(existingGreen) !== JSON.stringify(green)) localStorage.setItem('green', JSON.stringify(Array.from(new Set(green))));\r\n\r\n        const existingYellow = JSON.parse(localStorage.getItem('yellow')) || [];\r\n        if (JSON.stringify(existingYellow) !== JSON.stringify(yellow)) localStorage.setItem('yellow', JSON.stringify(Array.from(new Set(yellow))));\r\n\r\n        const existingGray = JSON.parse(localStorage.getItem('gray')) || [];\r\n        if (JSON.stringify(existingGray) !== JSON.stringify(gray)) localStorage.setItem('gray', JSON.stringify(Array.from((new Set(gray)))));\r\n\r\n\r\n\r\n        green && setGreenString(green.join(' ')) //green always should be displayed\r\n\r\n        const removeGreenfromYellow = yellow.filter((color) => !green.includes(color));\r\n        const removeGreenfromGray = gray.filter((color) => !green.includes(color));\r\n\r\n        const removeYellowfromGray = removeGreenfromGray.filter((color) => !removeGreenfromYellow.includes(color));\r\n\r\n        setYellowString(removeGreenfromYellow.join(' '));\r\n        setGrayString(removeYellowfromGray.join(' '));\r\n        \r\n    }, [green, yellow, gray])\r\n\r\n    // useEffect(() => { // switches already guessed color of button theme based on color blind mode\r\n    //     if (colorBlind) {\r\n    //         buttonTheme.current = buttonTheme.current.map(item => {\r\n    //             if (item.class === 'KBgreen') {\r\n    //                 return {\r\n    //                     ...item,\r\n    //                     class : 'KBCBgreen'\r\n    //                 }\r\n    //             } else if (item.class === 'KByellow') {\r\n    //                 return {\r\n    //                     ...item,\r\n    //                     class : 'KBCByellow'\r\n    //                 }\r\n    //             } else {\r\n    //                 return item;\r\n    //             }\r\n    //         }) \r\n    //     } else {\r\n\r\n    //         buttonTheme.current = buttonTheme.current.map(item => {\r\n    //             if (item.class === 'KBCBgreen') {\r\n    //                 return {\r\n    //                     ...item,\r\n    //                     class : 'KBgreen'\r\n    //                 }\r\n    //             } else if (item.class === 'KBCByellow') {\r\n    //                 return {\r\n    //                     ...item,\r\n    //                     class : 'KByellow'\r\n    //                 }\r\n    //             } else {\r\n    //                 return item;\r\n    //             }\r\n    //         }) \r\n    //     }\r\n    // }, [colorBlind])\r\n\r\n    // useEffect(() => {\r\n    //     if (darkMode) {\r\n    //         buttonTheme.current = buttonTheme.current.map(item => {\r\n    //             if (item.class === 'buttons') {\r\n    //                 return {\r\n    //                     ...item,\r\n    //                     class : 'DMbuttons'\r\n    //                 }\r\n    //             } else if (item.class === 'KBgray') {\r\n    //                 return {\r\n    //                     ...item,\r\n    //                     class : 'KBDMgray'\r\n    //                 }\r\n    //             }\r\n    //             else {\r\n    //                 return item;\r\n    //             }\r\n    //         })\r\n    //     } else {\r\n    //         buttonTheme.current = buttonTheme.current.map(item => {\r\n    //             if (item.class === 'DMbuttons') {\r\n    //                 return {\r\n    //                     ...item,\r\n    //                     class : 'buttons'\r\n    //                 }\r\n    //             } else if (item.class === 'KBDMgray') {\r\n    //                 return {\r\n    //                     ...item,\r\n    //                     class : 'KBgray'\r\n    //                 }\r\n    //             }\r\n    //             else {\r\n    //                 return item;\r\n    //             }\r\n    //         })\r\n    //     }\r\n    // }, [darkMode])\r\n\r\n    const {settings, showSettings} = useContext(KeyboardContext);\r\n\r\n    const [clickedSettings, setClickedSettings] = useState(false);\r\n    const skipMount = useRef(false);\r\n    useEffect(() => {\r\n\r\n        if (!skipMount.current) { //skip mount\r\n            skipMount.current = true;\r\n            return;\r\n        }\r\n        \r\n        if (skipMount.current) {\r\n            setClickedSettings(true);\r\n        }\r\n\r\n    }, [settings])\r\n\r\n    const {doneHash, setDoneHash} = useContext(KeyboardContext);\r\n\r\n    useEffect(() => {\r\n        setClickedSettings(false);\r\n    }, [doneHash])\r\n    \r\n    useEffect(() => { //sets keyboard color on each guess rerender, new guesses as well as initial mount\r\n        buttonTheme.current = [\r\n            {\r\n                class: `${ darkMode ? 'DMbuttons' : 'buttons' }`,\r\n                buttons: 'q w e r t y u i o p a s d f g h j k l ENTER z x c v b n m DEL'\r\n            }\r\n        ]\r\n            if (clickedSettings) {\r\n                // if (greenString.length + yellowString.length + grayString.length > 0) {\r\n                //     buttonTheme.current = [\r\n                //         {\r\n                //             class: `${ colorBlind ? 'KBCBgreen': 'KBgreen' }`,\r\n                //             buttons: greenString || ' '\r\n                //         },\r\n                //         {\r\n                //             class: `${ colorBlind ? 'KBCByellow': 'KByellow' }`,\r\n                //             buttons: yellowString  || ' '\r\n                //         },\r\n                //         {\r\n                //             class: `${ darkMode ? 'KBDMgray': 'KBgray' }`,\r\n                //             buttons: grayString || ' '\r\n                //         },\r\n                //     ]\r\n                // }\r\n                if (darkMode && colorBlind) {\r\n                    greenString.length && greenString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.add('KBCBgreen');\r\n                    })\r\n\r\n                    yellowString.length && yellowString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.add('KBCByellow');\r\n                    })\r\n\r\n                    grayString.length && grayString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.add('KBDMgray');\r\n                    })\r\n                }\r\n                else if (darkMode) {\r\n                    greenString.length && greenString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.add('KBgreen');\r\n                    })\r\n\r\n                    yellowString.length && yellowString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.add('KByellow');\r\n                    })\r\n\r\n                    grayString.length && grayString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.add('KBDMgray');\r\n                    })\r\n                }\r\n                else if (colorBlind) {\r\n                    greenString.length && greenString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.add('KBCBgreen');\r\n                    })\r\n\r\n                    yellowString.length && yellowString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.add('KBCByellow');\r\n                    })\r\n\r\n                    grayString.length && grayString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.add('KBgray');\r\n                    })\r\n                }\r\n                else {\r\n                    greenString.length && greenString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.remove('KBCBgreen');\r\n                        button.classList.add('KBgreen');\r\n                    })\r\n\r\n                    yellowString.length && yellowString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.remove('KBCBgreen');\r\n                        button.classList.add('KByellow');\r\n                    })\r\n\r\n                    grayString.length && grayString.split(' ').map((res, ind) => {\r\n                        const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                        button.classList.remove('KBDMgray');\r\n                        button.classList.add('KBgray');\r\n                    })\r\n                }\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    // if (greenString.length + yellowString.length + grayString.length > 0) {\r\n                    //     buttonTheme.current = [\r\n                    //         {\r\n                    //             class: `${ colorBlind ? 'KBCBgreen': 'KBgreen' }`,\r\n                    //             buttons: greenString || ' '\r\n                    //         },\r\n                    //         {\r\n                    //             class: `${ colorBlind ? 'KBCByellow': 'KByellow' }`,\r\n                    //             buttons: yellowString  || ' '\r\n                    //         },\r\n                    //         {\r\n                    //             class: `${ darkMode ? 'KBDMgray': 'KBgray' }`,\r\n                    //             buttons: grayString || ' '\r\n                    //         },\r\n                    //     ]\r\n                    // }\r\n                    if (darkMode && colorBlind) {\r\n                        greenString.length && greenString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.add('KBCBgreen');\r\n                        })\r\n        \r\n                        yellowString.length && yellowString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.add('KBCByellow');\r\n                        })\r\n        \r\n                        grayString.length && grayString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.add('KBDMgray');\r\n                        })\r\n                    }\r\n                    else if (darkMode) {\r\n                        greenString.length && greenString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.add('KBgreen');\r\n                        })\r\n        \r\n                        yellowString.length && yellowString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.add('KByellow');\r\n                        })\r\n        \r\n                        grayString.length && grayString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.add('KBDMgray');\r\n                        })\r\n                    }\r\n                    else if (colorBlind) {\r\n                        greenString.length && greenString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.add('KBCBgreen');\r\n                        })\r\n        \r\n                        yellowString.length && yellowString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.add('KBCByellow');\r\n                        })\r\n        \r\n                        grayString.length && grayString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.add('KBgray');\r\n                        })\r\n                    }\r\n                    else {\r\n                        greenString.length && greenString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.remove('KBCBgreen');\r\n                            button.classList.add('KBgreen');\r\n                        })\r\n        \r\n                        yellowString.length && yellowString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.remove('KBCBgreen');\r\n                            button.classList.add('KByellow');\r\n                        })\r\n        \r\n                        grayString.length && grayString.split(' ').map((res, ind) => {\r\n                            const button = document.querySelector(`[data-skbtn=\"${res}\"]`);\r\n                            button.classList.remove('KBDMgray');\r\n                            button.classList.add('KBgray');\r\n                        })\r\n                    }\r\n                }, 1000)\r\n            }\r\n    },[greenString, yellowString, grayString, darkMode, colorBlind, settings])\r\n\r\n    const kbChange = (input) => {\r\n        // if (input.slice(-1) == \"L\") {\r\n            \r\n        // } else {\r\n            \r\n        // }\r\n    }\r\n    \r\n    const{guesses, setGuesses} = useContext(KeyboardContext);\r\n    const {guessLength, setGuessLength} = useContext(KeyboardContext);\r\n    const {canEnterHash, setCanEnterHash} = useContext(KeyboardContext);\r\n    const {notEnough, setNotEnough} = useContext(KeyboardContext);\r\n    const {wrongWord, setWrongWord} = useContext(KeyboardContext);\r\n    const {wordleList, setWordleList} = useContext(KeyboardContext);\r\n    const {enterPressed, setEnterPressed} = useContext(KeyboardContext);\r\n    const {removeStyle, setRemoveStyle} = useContext(KeyboardContext);\r\n\r\n    const onKeyPress = button => {\r\n        // console.log(\"Button pressed\", button);\r\n        \r\n\r\n\r\n\r\n        Object.entries(doneHash).some(([key, value]) => {\r\n            const doneKey = key.replace('Done', '')\r\n            const canEnterKey = doneKey + 'CanEnter';\r\n            \r\n            if (!value) {\r\n                if (button == \"DEL\" && guessLength > 0) {\r\n                    setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                    setGuesses( prevGuess => ({ ...prevGuess, [doneKey] : (prevGuess[doneKey].slice(0, prevGuess[doneKey].length - 1))}))\r\n                } else if (button == \"ENTER\") {\r\n                    if (canEnterHash[canEnterKey]) {\r\n                        if (wordleList.includes(guesses[doneKey].toLowerCase())) {\r\n                            setEnterPressed(true);\r\n                            setRemoveStyle(false);\r\n                            setDoneHash(prevDone => ({ ...prevDone, [key]: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                } else if (button != \"DEL\" && guessLength < 5){\r\n                    setGuessLength(prevGuessLen => prevGuessLen + 1)\r\n                    setGuesses( prevGuess => ({ ...prevGuess, [doneKey]: (prevGuess[doneKey] + button.toUpperCase())}))\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        })    \r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='mx-auto w-[500px] h-[198px]'>\r\n\r\n        <Keyboard \r\n        className=\"kibord w-full p-0\"\r\n        onChange={kbChange}\r\n        onKeyPress={onKeyPress}\r\n        modules = {[inputMask]}\r\n        inputMask ={{\r\n            default: {\r\n            mask: '12345',\r\n            regex: /^[a-zA-Z0-9_-]*$/\r\n            }\r\n        }}\r\n        layout={{\r\n            default : [\r\n            'q w e r t y u i o p',\r\n            'a s d f g h j k l',\r\n            'ENTER z x c v b n m DEL'\r\n            ]\r\n        }}\r\n        buttonTheme={buttonTheme.current}\r\n        theme=\"hg-theme-default board\"\r\n        \r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Keys"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}