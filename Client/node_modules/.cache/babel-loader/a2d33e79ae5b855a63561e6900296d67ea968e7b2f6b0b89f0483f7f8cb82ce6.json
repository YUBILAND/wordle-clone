{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = deepmerge;\nexports.isPlainObject = isPlainObject;\n// https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\nfunction isPlainObject(item) {\n  if (typeof item !== 'object' || item === null) {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(item);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);\n}\nfunction deepClone(source) {\n  if (!isPlainObject(source)) {\n    return source;\n  }\n  const output = {};\n  Object.keys(source).forEach(key => {\n    output[key] = deepClone(source[key]);\n  });\n  return output;\n}\nfunction deepmerge(target, source, options = {\n  clone: true\n}) {\n  const output = options.clone ? {\n    ...target\n  } : target;\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key]) &&\n      // Avoid prototype pollution\n      Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else if (options.clone) {\n        output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n  return output;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","deepmerge","isPlainObject","item","prototype","getPrototypeOf","Symbol","toStringTag","iterator","deepClone","source","output","keys","forEach","key","target","options","clone","hasOwnProperty","call"],"sources":["C:/Users/david/wordle-clone/Client/node_modules/@mui/base/node_modules/@mui/utils/deepmerge/deepmerge.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = deepmerge;\nexports.isPlainObject = isPlainObject;\n// https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\nfunction isPlainObject(item) {\n  if (typeof item !== 'object' || item === null) {\n    return false;\n  }\n  const prototype = Object.getPrototypeOf(item);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);\n}\nfunction deepClone(source) {\n  if (!isPlainObject(source)) {\n    return source;\n  }\n  const output = {};\n  Object.keys(source).forEach(key => {\n    output[key] = deepClone(source[key]);\n  });\n  return output;\n}\nfunction deepmerge(target, source, options = {\n  clone: true\n}) {\n  const output = options.clone ? {\n    ...target\n  } : target;\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key]) &&\n      // Avoid prototype pollution\n      Object.prototype.hasOwnProperty.call(target, key) && isPlainObject(target[key])) {\n        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.\n        output[key] = deepmerge(target[key], source[key], options);\n      } else if (options.clone) {\n        output[key] = isPlainObject(source[key]) ? deepClone(source[key]) : source[key];\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n  return output;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,SAAS;AAC3BH,OAAO,CAACI,aAAa,GAAGA,aAAa;AACrC;AACA,SAASA,aAAaA,CAACC,IAAI,EAAE;EAC3B,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,EAAE;IAC7C,OAAO,KAAK;EACd;EACA,MAAMC,SAAS,GAAGR,MAAM,CAACS,cAAc,CAACF,IAAI,CAAC;EAC7C,OAAO,CAACC,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAKR,MAAM,CAACQ,SAAS,IAAIR,MAAM,CAACS,cAAc,CAACD,SAAS,CAAC,KAAK,IAAI,KAAK,EAAEE,MAAM,CAACC,WAAW,IAAIJ,IAAI,CAAC,IAAI,EAAEG,MAAM,CAACE,QAAQ,IAAIL,IAAI,CAAC;AAC3K;AACA,SAASM,SAASA,CAACC,MAAM,EAAE;EACzB,IAAI,CAACR,aAAa,CAACQ,MAAM,CAAC,EAAE;IAC1B,OAAOA,MAAM;EACf;EACA,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjBf,MAAM,CAACgB,IAAI,CAACF,MAAM,CAAC,CAACG,OAAO,CAACC,GAAG,IAAI;IACjCH,MAAM,CAACG,GAAG,CAAC,GAAGL,SAAS,CAACC,MAAM,CAACI,GAAG,CAAC,CAAC;EACtC,CAAC,CAAC;EACF,OAAOH,MAAM;AACf;AACA,SAASV,SAASA,CAACc,MAAM,EAAEL,MAAM,EAAEM,OAAO,GAAG;EAC3CC,KAAK,EAAE;AACT,CAAC,EAAE;EACD,MAAMN,MAAM,GAAGK,OAAO,CAACC,KAAK,GAAG;IAC7B,GAAGF;EACL,CAAC,GAAGA,MAAM;EACV,IAAIb,aAAa,CAACa,MAAM,CAAC,IAAIb,aAAa,CAACQ,MAAM,CAAC,EAAE;IAClDd,MAAM,CAACgB,IAAI,CAACF,MAAM,CAAC,CAACG,OAAO,CAACC,GAAG,IAAI;MACjC,IAAIZ,aAAa,CAACQ,MAAM,CAACI,GAAG,CAAC,CAAC;MAC9B;MACAlB,MAAM,CAACQ,SAAS,CAACc,cAAc,CAACC,IAAI,CAACJ,MAAM,EAAED,GAAG,CAAC,IAAIZ,aAAa,CAACa,MAAM,CAACD,GAAG,CAAC,CAAC,EAAE;QAC/E;QACAH,MAAM,CAACG,GAAG,CAAC,GAAGb,SAAS,CAACc,MAAM,CAACD,GAAG,CAAC,EAAEJ,MAAM,CAACI,GAAG,CAAC,EAAEE,OAAO,CAAC;MAC5D,CAAC,MAAM,IAAIA,OAAO,CAACC,KAAK,EAAE;QACxBN,MAAM,CAACG,GAAG,CAAC,GAAGZ,aAAa,CAACQ,MAAM,CAACI,GAAG,CAAC,CAAC,GAAGL,SAAS,CAACC,MAAM,CAACI,GAAG,CAAC,CAAC,GAAGJ,MAAM,CAACI,GAAG,CAAC;MACjF,CAAC,MAAM;QACLH,MAAM,CAACG,GAAG,CAAC,GAAGJ,MAAM,CAACI,GAAG,CAAC;MAC3B;IACF,CAAC,CAAC;EACJ;EACA,OAAOH,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}