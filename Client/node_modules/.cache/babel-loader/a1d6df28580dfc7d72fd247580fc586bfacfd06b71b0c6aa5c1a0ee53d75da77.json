{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\wordle-clone\\\\src\\\\components\\\\Grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport raw from '../assets/wordle-La.txt';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  const [wordleList, setWordleList] = useState([]);\n  const [firstDone, setFirstDone] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [correctWord, setCorrectWord] = useState('');\n  const [guesses, setGuesses] = useState({\n    first: '',\n    second: '',\n    third: '',\n    fourth: '',\n    fifth: '',\n    sixth: ''\n  });\n  const [dummyWords, setDummyWords] = useState({\n    first: '',\n    second: '',\n    third: '',\n    fourth: '',\n    fifth: '',\n    sixth: ''\n  });\n  useEffect(() => {\n    const fetchWords = async () => {\n      const response = await fetch(raw);\n      const text = await response.text();\n      const lines = text.split('\\n').slice(0, 2315);\n      setWordleList(lines);\n    };\n    fetchWords();\n  }, []);\n  useEffect(() => {\n    if (wordleList.length > 0) {\n      // setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\n      setCorrectWord(\"ELBOW\");\n      setLoading(false);\n    }\n  }, [wordleList]);\n  useEffect(() => {\n    setDummyWords({\n      first: correctWord\n    });\n  }, [correctWord]);\n  useEffect(() => {\n    const onPress = event => {\n      if (event.key === 'Backspace') {\n        if (!firstDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first.slice(0, prevGuess.first.length - 1)\n          }));\n        }\n      } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\n        if (!firstDone) {\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first + event.key.toUpperCase()\n          }));\n        }\n      }\n    };\n\n    // Attach event listener\n    document.addEventListener('keydown', onPress);\n\n    // Cleanup function to remove event listener\n    return () => {\n      document.removeEventListener('keydown', onPress);\n    };\n  }, [firstDone]); // Depend only on the completion status\n\n  const compareString = (str1, str2) => {\n    var indexMatch = '';\n    for (let i = 0; i < str1.length; i++) {\n      if (str1[i] == str2[i]) {\n        indexMatch += i;\n      }\n    }\n    return indexMatch;\n  };\n  useEffect(() => {\n    if (guesses.first.length == 5 && !firstDone) {\n      setFirstDone(true);\n    }\n  }, [guesses]);\n  const greenLetter = (dummyWord, key, guessedWord) => {\n    const greenIndex = compareString(correctWord, guessedWord);\n    var offset = 0;\n    for (let i = 0; i < greenIndex.length; i++) {\n      dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\n      setDummyWords(prevState => ({\n        ...prevState,\n        [key]: dummyWord\n      }));\n      offset++;\n    }\n  };\n  const evalGuess = (dummyWord, key, guessedWord, pos) => {\n    console.log(`dummyword is ${dummyWord}`);\n    if (guessedWord[pos] == correctWord[pos]) {\n      return 'green';\n    } else if (dummyWord.includes(guessedWord[pos] && !(guessedWord[pos] == correctWord[pos]))) {\n      // dummyWord = dummyWord.replace(guessedWord[pos], '')\n      dummyWord = dummyWord.slice(0, [parseInt(dummyWord.indexOf(guessedWord[pos]))]) + dummyWord.slice(dummyWord.indexOf(guessedWord[pos]) + 1);\n      setDummyWords(prevState => ({\n        ...prevState,\n        [key]: dummyWord\n      }));\n      return 'yellow';\n    } else {\n      return 'gray';\n    }\n  };\n  const [guessResults, setGuessResults] = useState({\n    first: []\n  });\n  const firstRef = useRef(false);\n  useEffect(() => {\n    if (firstDone) {\n      //player has made first guess\n\n      greenLetter(dummyWords.first, 'first', guesses.first); //check for right letters\n\n      const guess0 = evalGuess(dummyWords.first, 'first', guesses.first, 0); //check for green, yellow and gray\n\n      const guess1 = evalGuess(dummyWords.first, 'first', guesses.first, 1);\n      const guess2 = evalGuess(dummyWords.first.slice(1), 'first', guesses.first, 2);\n      const guess3 = evalGuess(dummyWords.first.slice(2), 'first', guesses.first, 3);\n      const guess4 = evalGuess(dummyWords.first.slice(3), 'first', guesses.first, 4);\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        first: [...prevResults.first, guess0, guess1, guess2, guess3, guess4]\n      }));\n      firstRef.current = true;\n    }\n    // Repeat this pattern for the remaining guesses (third, fourth, etc.)\n  }, [firstDone]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 16\n    }, this); // Show a loading indicator while data is being fetched\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mx-auto w-[500px]\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-5 w-[340px] mx-auto gap-2\",\n      children: firstDone && firstRef.current ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${guessResults.first[0] == 'green' ? 'bg-green-200' : guessResults.first[0] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][0] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${guessResults.first[1] == 'green' ? 'bg-green-200' : guessResults.first[1] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][1] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${guessResults.first[2] == 'green' ? 'bg-green-200' : guessResults.first[2] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][2] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${guessResults.first[3] == 'green' ? 'bg-green-200' : guessResults.first[3] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][3] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${guessResults.first[4] == 'green' ? 'bg-green-200' : guessResults.first[4] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold`,\n          children: guesses['first'][4] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][0] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][1] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][2] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][3] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][4] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"2LcFr/FnILXoipli51UdFJTxeRA=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useEffect","useState","useRef","raw","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","_s","wordleList","setWordleList","firstDone","setFirstDone","loading","setLoading","correctWord","setCorrectWord","guesses","setGuesses","first","second","third","fourth","fifth","sixth","dummyWords","setDummyWords","fetchWords","response","fetch","text","lines","split","slice","length","onPress","event","key","prevGuess","match","toUpperCase","document","addEventListener","removeEventListener","compareString","str1","str2","indexMatch","i","greenLetter","dummyWord","guessedWord","greenIndex","offset","parseInt","prevState","evalGuess","pos","console","log","includes","indexOf","guessResults","setGuessResults","firstRef","guess0","guess1","guess2","guess3","guess4","prevResults","current","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/david/wordle-clone/src/components/Grid.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport raw from '../assets/wordle-La.txt'\r\n\r\nconst Grid = () => {\r\n\r\n    const [wordleList, setWordleList] = useState([]);\r\n    const [firstDone, setFirstDone] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [correctWord, setCorrectWord] = useState('');\r\n\r\n    const[guesses, setGuesses] = useState({first: '', second: '', third: '', fourth: '', fifth: '', sixth: ''});\r\n    const [dummyWords, setDummyWords] = useState({first: '', second: '', third: '', fourth: '', fifth: '', sixth: ''});\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchWords = async () => { \r\n            const response = await fetch(raw);\r\n            const text = await response.text();\r\n            const lines = text.split('\\n').slice(0, 2315);\r\n            setWordleList(lines)\r\n        };\r\n        fetchWords();\r\n\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        if (wordleList.length > 0) {\r\n        // setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\r\n        setCorrectWord(\"ELBOW\")\r\n        setLoading(false);\r\n        }\r\n    }, [wordleList])\r\n\r\n    useEffect(() => {\r\n        setDummyWords({first: correctWord})\r\n    }, [correctWord])\r\n\r\n\r\n    useEffect(() => {\r\n        const onPress = (event) => {\r\n          if (event.key === 'Backspace') {\r\n            if (!firstDone) {\r\n              setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first.slice(0, prevGuess.first.length - 1))}))\r\n            } \r\n          } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\r\n            if (!firstDone) {\r\n                setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first  + event.key.toUpperCase())}))\r\n            } \r\n          }\r\n        };\r\n    \r\n        // Attach event listener\r\n        document.addEventListener('keydown', onPress);\r\n    \r\n        // Cleanup function to remove event listener\r\n        return () => {\r\n          document.removeEventListener('keydown', onPress);\r\n        };\r\n      }, [firstDone]); // Depend only on the completion status\r\n\r\n    \r\n\r\n    const compareString = (str1, str2) => {\r\n        var indexMatch = '';\r\n        for (let i = 0; i < str1.length; i++) {\r\n            if (str1[i] == str2[i]) {\r\n                indexMatch += i;\r\n            }\r\n        } return indexMatch;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (guesses.first.length == 5 && !firstDone) {\r\n            setFirstDone(true);\r\n        }\r\n    }, [guesses])\r\n\r\n\r\n    const greenLetter = (dummyWord, key, guessedWord) => {\r\n        const greenIndex = compareString(correctWord, guessedWord);\r\n        var offset = 0;\r\n        for (let i = 0; i < greenIndex.length; i++) {\r\n            dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\r\n            setDummyWords(prevState => ({\r\n                ...prevState, \r\n                [key]: dummyWord\r\n            }));\r\n            offset++;\r\n        }\r\n    }\r\n\r\n    const evalGuess = (dummyWord, key, guessedWord, pos) => {\r\n        console.log(`dummyword is ${dummyWord}`)\r\n            if (guessedWord[pos] == correctWord[pos]) {\r\n                return 'green';\r\n            } else if (dummyWord.includes(guessedWord[pos] && !(guessedWord[pos] == correctWord[pos]) )) {\r\n                // dummyWord = dummyWord.replace(guessedWord[pos], '')\r\n                dummyWord = dummyWord.slice(0, [parseInt(dummyWord.indexOf(guessedWord[pos]))]) + dummyWord.slice(dummyWord.indexOf(guessedWord[pos])+1);\r\n                setDummyWords(prevState => ({\r\n                    ...prevState, \r\n                    [key]: dummyWord\r\n                }));\r\n                return 'yellow';\r\n            } else {\r\n                return 'gray';\r\n            }\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    const [guessResults, setGuessResults] = useState({first: []})\r\n   const firstRef = useRef(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (firstDone) { //player has made first guess\r\n\r\n            greenLetter(dummyWords.first, 'first', guesses.first)//check for right letters\r\n\r\n            const guess0 =  evalGuess(dummyWords.first, 'first', guesses.first, 0) //check for green, yellow and gray\r\n\r\n\r\n\r\n            const guess1 =  evalGuess(dummyWords.first, 'first', guesses.first, 1)\r\n            const guess2 =  evalGuess(dummyWords.first.slice(1), 'first', guesses.first, 2)\r\n            const guess3 =  evalGuess(dummyWords.first.slice(2), 'first', guesses.first, 3)\r\n            const guess4 =  evalGuess(dummyWords.first.slice(3), 'first', guesses.first, 4)\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                first: [...prevResults.first, guess0, guess1, guess2, guess3, guess4]\r\n            }));\r\n            firstRef.current = true;\r\n    }\r\n        // Repeat this pattern for the remaining guesses (third, fourth, etc.)\r\n    }, [firstDone]);\r\n\r\n\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>; // Show a loading indicator while data is being fetched\r\n    } \r\n\r\n  return (\r\n    <div className='mx-auto w-[500px]'>\r\n        <div className='grid grid-cols-5 w-[340px] mx-auto gap-2'>\r\n\r\n            { firstDone && firstRef.current ? \r\n            <>\r\n                <div className= { `border-2  ${guessResults.first[0] == 'green' ? 'bg-green-200' :  guessResults.first[0] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['first'][0] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResults.first[1] == 'green' ? 'bg-green-200' :  guessResults.first[1] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['first'][1] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResults.first[2] == 'green' ? 'bg-green-200' :  guessResults.first[2] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['first'][2] || ''}\r\n                </div>   \r\n                <div className= { `border-2  ${guessResults.first[3] == 'green' ? 'bg-green-200' :  guessResults.first[3] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['first'][3] || ''}\r\n                </div>\r\n                <div className= { `border-2  ${guessResults.first[4] == 'green' ? 'bg-green-200' :  guessResults.first[4] == 'yellow' ? 'bg-yellow-200' : 'bg-gray-400'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold` }>\r\n                    {guesses['first'][4] || ''}\r\n                </div>   \r\n            </>\r\n            :   \r\n            <>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['first'][0] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['first'][1] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['first'][2] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['first'][3] || ''}\r\n                </div>\r\n                <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    {guesses['first'][4] || ''}\r\n                </div>\r\n                \r\n            </>\r\n            }\r\n\r\n        </div>\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Grid"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}