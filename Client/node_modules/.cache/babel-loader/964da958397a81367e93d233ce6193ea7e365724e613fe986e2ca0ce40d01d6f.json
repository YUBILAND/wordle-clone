{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david\\\\wordle-clone\\\\Client\\\\src\\\\components\\\\Grid.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, useContext } from 'react';\nimport raw from '../assets/wordle-La.txt';\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\nimport CloseIcon from '@mui/icons-material/Close';\nimport ReplayIcon from '@mui/icons-material/Replay';\nimport ShareIcon from '@mui/icons-material/Share';\nimport './Grid.css';\nimport Statistics from './Statistics';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Grid = () => {\n  _s();\n  // const [kbColor, setKbColor] = useState({});\n  const {\n    darkMode\n  } = useContext(KeyboardContext);\n  const {\n    userID,\n    setUserID\n  } = useContext(KeyboardContext);\n  const {\n    setKbColor\n  } = useContext(KeyboardContext);\n  const {\n    winPage,\n    setWinPage\n  } = useContext(KeyboardContext);\n  const {\n    guessWon,\n    setGuessWon\n  } = useContext(KeyboardContext);\n  const [winCompliment, setWinCompliment] = useState(false);\n  const {\n    win,\n    setWin\n  } = useContext(KeyboardContext);\n  const [answer, showAnswer] = useState(false);\n  const [notEnough, setNotEnough] = useState(false);\n  const [wrongWord, setWrongWord] = useState(false);\n  const [wordleList, setWordleList] = useState([]);\n  const {\n    doneHash,\n    setDoneHash\n  } = useContext(KeyboardContext);\n\n  // const [firstDone, setFirstDone] = useState(false);\n  // const [secondDone, setSecondDone] = useState(false);\n  // const [thirdDone, setThirdDone] = useState(false);\n  // const [fourthDone, setFourthDone] = useState(false);\n  // const [fifthDone, setFifthDone] = useState(false);\n  // const [sixthDone, setSixthDone] = useState(false);\n\n  const {\n    canEnterHash,\n    setCanEnterHash\n  } = useContext(KeyboardContext);\n  const [firstCanEnter, setFirstCanEnter] = useState(false);\n  const [secondCanEnter, setSecondCanEnter] = useState(false);\n  const [thirdCanEnter, setThirdCanEnter] = useState(false);\n  const [fourthCanEnter, setFourthCanEnter] = useState(false);\n  const [fifthCanEnter, setFifthCanEnter] = useState(false);\n  const [sixthCanEnter, setSixthCanEnter] = useState(false);\n  const [guessResults, setGuessResults] = useState({\n    first: [],\n    second: [],\n    third: [],\n    fourth: [],\n    fifth: [],\n    sixth: []\n  });\n  const firstRef = useRef(false);\n  const secondRef = useRef(false);\n  const thirdRef = useRef(false);\n  const fourthRef = useRef(false);\n  const fifthRef = useRef(false);\n  const sixthRef = useRef(false);\n  const [loading, setLoading] = useState(true);\n  const [correctWord, setCorrectWord] = useState('');\n\n  // const[guesses, setGuesses] = useState({first: '', second: '', third: '', fourth: '', fifth: '', sixth: ''});\n  const {\n    guesses,\n    setGuesses\n  } = useContext(KeyboardContext);\n  const [dummyWords, setDummyWords] = useState({\n    first: '',\n    second: '',\n    third: '',\n    fourth: '',\n    fifth: '',\n    sixth: ''\n  });\n  useEffect(() => {\n    const fetchWords = async () => {\n      const response = await fetch(raw);\n      const text = await response.text();\n      const lines = text.split('\\r\\n').slice(0, 2315);\n      setWordleList(lines);\n    };\n    fetchWords();\n  }, []);\n  useEffect(() => {\n    if (wordleList.length > 0) {\n      setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\n      console.log(wordleList);\n      setLoading(false);\n    }\n  }, [wordleList]);\n  useEffect(() => {\n    setDummyWords({\n      first: correctWord\n    });\n    if (correctWord) console.log(correctWord);\n  }, [correctWord]);\n  const {\n    guessLength,\n    setGuessLength\n  } = useContext(KeyboardContext);\n\n  // var guessLength = 0;\n\n  useEffect(() => {\n    const onPress = event => {\n      if (event.key === 'Backspace') {\n        if (!doneHash.firstDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first.slice(0, prevGuess.first.length - 1)\n          }));\n        } else if (!doneHash.secondDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            second: prevGuess.second.slice(0, prevGuess.second.length - 1)\n          }));\n        } else if (!doneHash.thirdDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            third: prevGuess.third.slice(0, prevGuess.third.length - 1)\n          }));\n        } else if (!doneHash.fourthDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fourth: prevGuess.fourth.slice(0, prevGuess.fourth.length - 1)\n          }));\n        } else if (!doneHash.fifthDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fifth: prevGuess.fifth.slice(0, prevGuess.fifth.length - 1)\n          }));\n        } else if (!doneHash.sixthDone && guessLength > 0) {\n          setGuessLength(prevGuessLen => prevGuessLen - 1);\n          // guessLength -= 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            sixth: prevGuess.sixth.slice(0, prevGuess.sixth.length - 1)\n          }));\n        }\n      } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\n        if (!doneHash.firstDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          // console.log(guessLength);\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            first: prevGuess.first + event.key.toUpperCase()\n          }));\n        } else if (!doneHash.secondDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            second: prevGuess.second + event.key.toUpperCase()\n          }));\n        } else if (!doneHash.thirdDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            third: prevGuess.third + event.key.toUpperCase()\n          }));\n        } else if (!doneHash.fourthDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fourth: prevGuess.fourth + event.key.toUpperCase()\n          }));\n        } else if (!doneHash.fifthDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            fifth: prevGuess.fifth + event.key.toUpperCase()\n          }));\n        } else if (!doneHash.sixthDone && guessLength < 5) {\n          setGuessLength(prevGuessLen => prevGuessLen + 1);\n          // guessLength += 1;\n          setGuesses(prevGuess => ({\n            ...prevGuess,\n            sixth: prevGuess.sixth + event.key.toUpperCase()\n          }));\n        }\n      }\n    };\n    if (!win) {\n      // Attach event listener\n      document.addEventListener('keydown', onPress);\n\n      // Cleanup function to remove event listener\n      return () => {\n        document.removeEventListener('keydown', onPress);\n      };\n    }\n  }, [win, guessLength, doneHash]); // Depend only on the completion status\n\n  useEffect(() => {\n    const onPress = event => {\n      if (event.key === 'Enter') {\n        if (!doneHash.firstDone) {\n          if (canEnterHash.firstCanEnter) {\n            if (wordleList.includes(guesses.first.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                firstDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else if (!doneHash.secondDone) {\n          if (canEnterHash.secondCanEnter) {\n            if (wordleList.includes(guesses.second.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                secondDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else if (!doneHash.thirdDone) {\n          if (canEnterHash.thirdCanEnter) {\n            if (wordleList.includes(guesses.third.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                thirdDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else if (!doneHash.fourthDone) {\n          if (canEnterHash.fourthCanEnter) {\n            if (wordleList.includes(guesses.fourth.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                fourthDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else if (!doneHash.fifthDone) {\n          if (canEnterHash.fifthCanEnter) {\n            if (wordleList.includes(guesses.fifth.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                fifthDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        } else if (!doneHash.sixthDone) {\n          if (canEnterHash.sixthCanEnter) {\n            if (wordleList.includes(guesses.sixth.toLowerCase())) {\n              setDoneHash(prevDone => ({\n                ...prevDone,\n                sixthDone: true\n              }));\n              setGuessLength(0);\n            } else setWrongWord(true);\n          } else setNotEnough(true);\n        }\n      }\n    };\n    if (!win) {\n      document.addEventListener('keydown', onPress);\n      return () => {\n        document.removeEventListener('keydown', onPress);\n      };\n    }\n  }, [win, doneHash, canEnterHash]);\n  const compareString = (str1, str2) => {\n    var indexMatch = '';\n    for (let i = 0; i < str1.length; i++) {\n      if (str1[i] == str2[i]) {\n        indexMatch += i;\n      }\n    }\n    return indexMatch;\n  };\n  useEffect(() => {\n    if (!doneHash.firstDone) {\n      if (guesses.first.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        firstCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        firstCanEnter: false\n      }));\n    } else if (!doneHash.secondDone) {\n      if (guesses.second.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        secondCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        secondCanEnter: false\n      }));\n    } else if (!doneHash.thirdDone) {\n      if (guesses.third.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        thirdCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        thirdCanEnter: false\n      }));\n    } else if (!doneHash.fourthDone) {\n      if (guesses.fourth.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        fourthCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        fourthCanEnter: false\n      }));\n    } else if (!doneHash.fifthDone) {\n      if (guesses.fifth.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        fifthCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        fifthCanEnter: false\n      }));\n    } else if (!doneHash.sixthDone) {\n      if (guesses.sixth.length == 5) setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        sixthCanEnter: true\n      }));else setCanEnterHash(prevCanEnter => ({\n        ...prevCanEnter,\n        sixthCanEnter: false\n      }));\n    }\n  }, [guesses]);\n  const greenLetter = (dummyWord, guessedWord) => {\n    const greenIndex = compareString(correctWord, guessedWord);\n    var offset = 0;\n    for (let i = 0; i < greenIndex.length; i++) {\n      dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\n      console.log(dummyWord);\n      offset++;\n    }\n    return dummyWord;\n  };\n  const evalGuess = (dummyWord, letter, pos) => {\n    if (letter == correctWord[pos]) {\n      return 'green';\n    } else if (dummyWord.includes(letter)) {\n      return 'yellow';\n    } else {\n      return 'gray';\n    }\n  };\n  var cheatVar;\n  const evaluteGuess = (res, ind) => {\n    if (guessResults.first) {\n      const newCheatVar = cheatVar;\n      cheatVar = cheatVar.replace(res, '');\n      return evalGuess(newCheatVar, res, ind); //check for green, yellow and gray\n    }\n  };\n  useEffect(() => {\n    if (doneHash.firstDone && !firstRef.current) {\n      //player has made first guess\n      cheatVar = greenLetter(correctWord, guesses.first);\n      const colorGuess = guesses.first.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        first: [...prevResults.first, ...colorGuess]\n      }));\n      let newKbColor = guesses.first.split('').reduce((acc, res, ind) => {\n        acc[res] = colorGuess[ind];\n        return acc;\n      }, {});\n      setKbColor(prevResults => [...prevResults, {\n        ...newKbColor\n      }]);\n      const set = new Set(Object.values(newKbColor));\n      const first = [...set][0];\n      if (set.size == 1 && first == 'green') {\n        setWin(true);\n        setGuessWon('guess1');\n      }\n      firstRef.current = true;\n    }\n    if (doneHash.secondDone && !secondRef.current) {\n      //player has made second guess\n      cheatVar = greenLetter(correctWord, guesses.second);\n      const colorGuess = guesses.second.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        second: [...prevResults.second, ...colorGuess]\n      }));\n      let newKbColor = guesses.second.split('').reduce((acc, res, ind) => {\n        acc[res] = colorGuess[ind];\n        return acc;\n      }, {});\n      setKbColor(prevResults => [...prevResults, {\n        ...newKbColor\n      }]);\n      const set = new Set(Object.values(newKbColor));\n      const first = [...set][0];\n      if (set.size == 1 && first == 'green') {\n        setWin(true);\n        setGuessWon('guess2');\n      }\n      secondRef.current = true;\n    }\n    if (doneHash.thirdDone && !thirdRef.current) {\n      //player has made first guess\n      cheatVar = greenLetter(correctWord, guesses.third);\n      const colorGuess = guesses.third.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        third: [...prevResults.third, ...colorGuess]\n      }));\n      let newKbColor = guesses.third.split('').reduce((acc, res, ind) => {\n        acc[res] = colorGuess[ind];\n        return acc;\n      }, {});\n      setKbColor(prevResults => [...prevResults, {\n        ...newKbColor\n      }]);\n      const set = new Set(Object.values(newKbColor));\n      const first = [...set][0];\n      if (set.size == 1 && first == 'green') {\n        setWin(true);\n        setGuessWon('guess3');\n      }\n      thirdRef.current = true;\n    }\n    if (doneHash.fourthDone && !fourthRef.current) {\n      //player has made first guess\n      cheatVar = greenLetter(correctWord, guesses.fourth);\n      const colorGuess = guesses.fourth.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        fourth: [...prevResults.fourth, ...colorGuess]\n      }));\n      let newKbColor = guesses.fourth.split('').reduce((acc, res, ind) => {\n        acc[res] = colorGuess[ind];\n        return acc;\n      }, {});\n      setKbColor(prevResults => [...prevResults, {\n        ...newKbColor\n      }]);\n      const set = new Set(Object.values(newKbColor));\n      const first = [...set][0];\n      if (set.size == 1 && first == 'green') {\n        setWin(true);\n        setGuessWon('guess4');\n      }\n      fourthRef.current = true;\n    }\n    if (doneHash.fifthDone && !fifthRef.current) {\n      //player has made first guess\n      cheatVar = greenLetter(correctWord, guesses.fifth);\n      const colorGuess = guesses.fifth.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        fifth: [...prevResults.fifth, ...colorGuess]\n      }));\n      let newKbColor = guesses.fifth.split('').reduce((acc, res, ind) => {\n        acc[res] = colorGuess[ind];\n        return acc;\n      }, {});\n      setKbColor(prevResults => [...prevResults, {\n        ...newKbColor\n      }]);\n      const set = new Set(Object.values(newKbColor));\n      const first = [...set][0];\n      if (set.size == 1 && first == 'green') {\n        setWin(true);\n        setGuessWon('guess5');\n      }\n      fifthRef.current = true;\n    }\n    if (doneHash.sixthDone && !sixthRef.current) {\n      //player has made final guess\n      cheatVar = greenLetter(correctWord, guesses.sixth);\n      const colorGuess = guesses.sixth.split('').map((res, ind) => evaluteGuess(res, ind));\n      setGuessResults(prevResults => ({\n        ...prevResults,\n        sixth: [...prevResults.sixth, ...colorGuess]\n      }));\n      let newKbColor = guesses.sixth.split('').reduce((acc, res, ind) => {\n        acc[res] = colorGuess[ind];\n        return acc;\n      }, {});\n      setKbColor(prevResults => [...prevResults, {\n        ...newKbColor\n      }]);\n      const set = new Set(Object.values(newKbColor));\n      const first = [...set][0];\n      if (set.size == 1 && first == 'green') {\n        setWin(true);\n        setGuessWon('guess6');\n      } else {\n        showAnswer(true);\n      }\n      sixthRef.current = true;\n    }\n    // Repeat this pattern for the remaining guesses (third, fourth, etc.)\n  }, [doneHash]);\n  useEffect(() => {\n    if (win ^ answer) {\n      console.log(userID.id);\n      axios.post('http://localhost:8081/updateStats', {\n        ...userID,\n        win: win,\n        guessWon: guessWon\n      }).then(res => {\n        console.log(res.data.message);\n      }).catch(err => console.log(err));\n    }\n  }, [win, answer]);\n  useEffect(() => {\n    if (win) {\n      setWinCompliment(true);\n      setTimeout(() => {\n        /* Code to run after 4 seconds */\n        // alert('wow you have brain')\n        setWinPage(true);\n        // const allExceptDiv = document.querySelectorAll(\"body > *:not(#stats):not(#stats *)\");\n        // allExceptDiv.forEach(el => el.classList.add(\"unfocus\"))\n      }, 1000);\n    }\n  }, [win]);\n  if (winCompliment) {\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setWinCompliment(false);\n    }, 5000);\n  }\n  if (notEnough) {\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setNotEnough(false);\n    }, 5000);\n  }\n  if (wrongWord) {\n    setTimeout(function () {\n      document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\n      setWrongWord(false);\n    }, 5000);\n  }\n  if (answer) {\n    setTimeout(function () {\n      setWinPage(true);\n    }, 1000);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `mx-auto w-[500px] opacity-100 mb-[110px] ${darkMode ? 'bg-[#121213] text-white' : 'bg-white text-black'}`,\n    children: [winCompliment && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Magnificent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 113\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 27\n    }, this), notEnough && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Not enough letters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 109\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 23\n    }, this), wrongWord && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"hidePls\",\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: \"Not in word list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 109\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 23\n    }, this), winPage && /*#__PURE__*/_jsxDEV(Statistics, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 21\n    }, this), answer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-[120px] left-0 flex justify-center w-full\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]\",\n        children: correctWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 93\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-5 w-[340px] mx-auto gap-2 \",\n      children: [doneHash.firstDone && firstRef.current ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.first.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-[#6aaa64]' : res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white`,\n          children: guesses['first'][ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['first'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['first'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 21\n        }, this)\n\n        // <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\n        //     {guesses['first'][res] || ''}\n        // </div>\n        )\n      }, void 0, false), doneHash.secondDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.second.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-[#6aaa64]' : res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white`,\n          children: guesses['second'][ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['second'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['second'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), doneHash.thirdDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.third.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-[#6aaa64]' : res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white`,\n          children: guesses.third[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['third'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['third'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), doneHash.fourthDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.fourth.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-[#6aaa64]' : res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white`,\n          children: guesses.fourth[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['fourth'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['fourth'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), doneHash.fifthDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.fifth.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-[#6aaa64]' : res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white`,\n          children: guesses.fifth[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['fifth'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['fifth'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 21\n        }, this))\n      }, void 0, false), doneHash.sixthDone ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: guessResults.sixth.map((res, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `border-2  ${res == 'green' ? 'bg-[#6aaa64]' : res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white`,\n          children: guesses.sixth[ind] || ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 21\n        }, this))\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [0, 1, 2, 3, 4].map(res => guesses['sixth'][res] ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\",\n          children: guesses['sixth'][res]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 21\n        }, this))\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 527,\n    columnNumber: 5\n  }, this);\n};\n_s(Grid, \"Eq24wV8ObvwhwQucnD+VEMzoF9s=\");\n_c = Grid;\nexport default Grid;\nvar _c;\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useContext","raw","KeyboardContext","CloseIcon","ReplayIcon","ShareIcon","Statistics","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Grid","_s","darkMode","userID","setUserID","setKbColor","winPage","setWinPage","guessWon","setGuessWon","winCompliment","setWinCompliment","win","setWin","answer","showAnswer","notEnough","setNotEnough","wrongWord","setWrongWord","wordleList","setWordleList","doneHash","setDoneHash","canEnterHash","setCanEnterHash","firstCanEnter","setFirstCanEnter","secondCanEnter","setSecondCanEnter","thirdCanEnter","setThirdCanEnter","fourthCanEnter","setFourthCanEnter","fifthCanEnter","setFifthCanEnter","sixthCanEnter","setSixthCanEnter","guessResults","setGuessResults","first","second","third","fourth","fifth","sixth","firstRef","secondRef","thirdRef","fourthRef","fifthRef","sixthRef","loading","setLoading","correctWord","setCorrectWord","guesses","setGuesses","dummyWords","setDummyWords","fetchWords","response","fetch","text","lines","split","slice","length","Math","floor","random","toUpperCase","console","log","guessLength","setGuessLength","onPress","event","key","firstDone","prevGuessLen","prevGuess","secondDone","thirdDone","fourthDone","fifthDone","sixthDone","match","document","addEventListener","removeEventListener","includes","toLowerCase","prevDone","compareString","str1","str2","indexMatch","i","prevCanEnter","greenLetter","dummyWord","guessedWord","greenIndex","offset","parseInt","evalGuess","letter","pos","cheatVar","evaluteGuess","res","ind","newCheatVar","replace","current","colorGuess","map","prevResults","newKbColor","reduce","acc","set","Set","Object","values","size","id","post","then","data","message","catch","err","setTimeout","getElementById","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/david/wordle-clone/Client/src/components/Grid.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useContext } from 'react'\r\nimport raw from '../assets/wordle-La.txt'\r\nimport { KeyboardContext } from '../Contexts/KeyboardContext';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport ReplayIcon from '@mui/icons-material/Replay';\r\nimport ShareIcon from '@mui/icons-material/Share';\r\nimport './Grid.css'\r\nimport Statistics from './Statistics';\r\nimport axios from 'axios';\r\n\r\nconst Grid = () => {\r\n\r\n    \r\n    // const [kbColor, setKbColor] = useState({});\r\n    const {darkMode} = useContext(KeyboardContext);\r\n\r\n    const {userID, setUserID} = useContext(KeyboardContext);\r\n\r\n\r\n    const {setKbColor} = useContext(KeyboardContext);\r\n    const {winPage, setWinPage} = useContext(KeyboardContext);\r\n\r\n    const {guessWon, setGuessWon} = useContext(KeyboardContext);\r\n\r\n    const [winCompliment, setWinCompliment] = useState(false);\r\n    const {win, setWin} = useContext(KeyboardContext);\r\n    const [answer, showAnswer] = useState(false);\r\n\r\n    const [notEnough, setNotEnough] = useState(false);\r\n\r\n    const [wrongWord, setWrongWord] = useState(false);\r\n\r\n    const [wordleList, setWordleList] = useState([]);\r\n\r\n    const {doneHash, setDoneHash} = useContext(KeyboardContext);\r\n\r\n\r\n    // const [firstDone, setFirstDone] = useState(false);\r\n    // const [secondDone, setSecondDone] = useState(false);\r\n    // const [thirdDone, setThirdDone] = useState(false);\r\n    // const [fourthDone, setFourthDone] = useState(false);\r\n    // const [fifthDone, setFifthDone] = useState(false);\r\n    // const [sixthDone, setSixthDone] = useState(false);\r\n\r\n    const {canEnterHash, setCanEnterHash} = useContext(KeyboardContext);\r\n\r\n    const [firstCanEnter, setFirstCanEnter] = useState(false);\r\n    const [secondCanEnter, setSecondCanEnter] = useState(false);\r\n    const [thirdCanEnter, setThirdCanEnter] = useState(false);\r\n    const [fourthCanEnter, setFourthCanEnter] = useState(false);\r\n    const [fifthCanEnter, setFifthCanEnter] = useState(false);\r\n    const [sixthCanEnter, setSixthCanEnter] = useState(false);\r\n\r\n    const [guessResults, setGuessResults] = useState({first: [], second: [], third: [], fourth: [], fifth: [], sixth: []})\r\n    const firstRef = useRef(false);\r\n    const secondRef = useRef(false);\r\n    const thirdRef = useRef(false);\r\n    const fourthRef = useRef(false);\r\n    const fifthRef = useRef(false);\r\n    const sixthRef = useRef(false);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [correctWord, setCorrectWord] = useState('');\r\n\r\n    // const[guesses, setGuesses] = useState({first: '', second: '', third: '', fourth: '', fifth: '', sixth: ''});\r\n    const{guesses, setGuesses} = useContext(KeyboardContext);\r\n\r\n    const [dummyWords, setDummyWords] = useState({first: '', second: '', third: '', fourth: '', fifth: '', sixth: ''});\r\n\r\n    useEffect(() => {\r\n        const fetchWords = async () => { \r\n            const response = await fetch(raw);\r\n            const text = await response.text();\r\n            const lines = text.split('\\r\\n').slice(0, 2315);\r\n            setWordleList(lines)\r\n        };\r\n        fetchWords();\r\n    }, []);\r\n    \r\n    useEffect(() => {\r\n        if (wordleList.length > 0) {\r\n        setCorrectWord(wordleList[Math.floor(Math.random() * 2315)].toUpperCase());\r\n        console.log(wordleList);\r\n        setLoading(false);\r\n        }\r\n    }, [wordleList])\r\n\r\n    useEffect(() => {\r\n        setDummyWords({first: correctWord})\r\n        if( correctWord )\r\n            console.log(correctWord)\r\n    }, [correctWord])\r\n\r\n    const {guessLength, setGuessLength} = useContext(KeyboardContext);\r\n\r\n    // var guessLength = 0;\r\n\r\n    useEffect(() => {\r\n        const onPress = (event) => {\r\n            if (event.key === 'Backspace') {\r\n            if (!doneHash.firstDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first.slice(0, prevGuess.first.length - 1))}))\r\n            } \r\n            else if (!doneHash.secondDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, second: (prevGuess.second.slice(0, prevGuess.second.length - 1))}))\r\n            } \r\n            else if (!doneHash.thirdDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, third: (prevGuess.third.slice(0, prevGuess.third.length - 1))}))\r\n            } \r\n            else if (!doneHash.fourthDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, fourth: (prevGuess.fourth.slice(0, prevGuess.fourth.length - 1))}))\r\n            } \r\n            else if (!doneHash.fifthDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, fifth: (prevGuess.fifth.slice(0, prevGuess.fifth.length - 1))}))\r\n            } \r\n            else if (!doneHash.sixthDone && guessLength > 0) {\r\n                setGuessLength(prevGuessLen => prevGuessLen - 1);\r\n                // guessLength -= 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, sixth: (prevGuess.sixth.slice(0, prevGuess.sixth.length - 1))}))\r\n            } \r\n            } else if (event.key.match(/[a-zA-Z]/) && event.key.length === 1) {\r\n            if (!doneHash.firstDone && guessLength < 5) {\r\n\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                // console.log(guessLength);\r\n                setGuesses( prevGuess => ({ ...prevGuess, first: (prevGuess.first + event.key.toUpperCase())}))\r\n            }\r\n            else if (!doneHash.secondDone && guessLength < 5) {\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, second: (prevGuess.second + event.key.toUpperCase())}))\r\n            } \r\n            else if (!doneHash.thirdDone && guessLength < 5) {\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, third: (prevGuess.third + event.key.toUpperCase())}))\r\n            } \r\n            else if (!doneHash.fourthDone && guessLength < 5) {\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, fourth: (prevGuess.fourth + event.key.toUpperCase())}))\r\n            } \r\n            else if (!doneHash.fifthDone && guessLength < 5) {\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, fifth: (prevGuess.fifth + event.key.toUpperCase())}))\r\n            } \r\n            else if (!doneHash.sixthDone && guessLength < 5) {\r\n                setGuessLength(prevGuessLen => prevGuessLen + 1);\r\n                // guessLength += 1;\r\n                setGuesses( prevGuess => ({ ...prevGuess, sixth: (prevGuess.sixth + event.key.toUpperCase())}))\r\n            }\r\n            } \r\n        };\r\n        if(!win) {\r\n            // Attach event listener\r\n            document.addEventListener('keydown', onPress);\r\n        \r\n            // Cleanup function to remove event listener\r\n            return () => {\r\n            document.removeEventListener('keydown', onPress);\r\n            };\r\n        }\r\n    }, [win, guessLength, doneHash]); // Depend only on the completion status\r\n\r\n\r\n    useEffect(() => {\r\n        const onPress = (event) => {\r\n            if (event.key === 'Enter') {\r\n                if (!doneHash.firstDone) {\r\n                    if (canEnterHash.firstCanEnter) {\r\n                        if (wordleList.includes(guesses.first.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, firstDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n                else if (!doneHash.secondDone) {\r\n                    if (canEnterHash.secondCanEnter) {\r\n                        if (wordleList.includes(guesses.second.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, secondDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n                else if (!doneHash.thirdDone) {\r\n                    if (canEnterHash.thirdCanEnter) {\r\n                        if (wordleList.includes(guesses.third.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, thirdDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n                else if (!doneHash.fourthDone) {\r\n                    if (canEnterHash.fourthCanEnter) {\r\n                        if (wordleList.includes(guesses.fourth.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, fourthDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n                else if (!doneHash.fifthDone) {\r\n                    if (canEnterHash.fifthCanEnter) {\r\n                        if (wordleList.includes(guesses.fifth.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, fifthDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n                else if (!doneHash.sixthDone) {\r\n                    if (canEnterHash.sixthCanEnter) {\r\n                        if (wordleList.includes(guesses.sixth.toLowerCase())) {\r\n                            setDoneHash(prevDone => ({ ...prevDone, sixthDone: true}));\r\n                            setGuessLength(0);\r\n                        } else setWrongWord(true);\r\n                    } else setNotEnough(true);\r\n                }\r\n            }\r\n        }\r\n        if (!win) {\r\n            document.addEventListener('keydown', onPress);\r\n            return () => {\r\n            document.removeEventListener('keydown', onPress);\r\n            };\r\n        }\r\n    },[ win, doneHash, canEnterHash])\r\n    \r\n    const compareString = (str1, str2) => {\r\n        var indexMatch = '';\r\n        for (let i = 0; i < str1.length; i++) {\r\n            if (str1[i] == str2[i]) {\r\n                indexMatch += i;\r\n            }\r\n        } return indexMatch;\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if (!doneHash.firstDone) {\r\n            if (guesses.first.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, firstCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, firstCanEnter: false}));\r\n        }\r\n        else if (!doneHash.secondDone) {\r\n            if (guesses.second.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, secondCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, secondCanEnter: false}));\r\n        }\r\n        else if (!doneHash.thirdDone) {\r\n            if (guesses.third.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, thirdCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, thirdCanEnter: false}));\r\n        }\r\n        else if (!doneHash.fourthDone) {\r\n            if (guesses.fourth.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, fourthCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, fourthCanEnter: false}));\r\n        }\r\n        else if (!doneHash.fifthDone) {\r\n            if (guesses.fifth.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, fifthCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, fifthCanEnter: false}));\r\n        }\r\n        else if (!doneHash.sixthDone) {\r\n            if (guesses.sixth.length == 5) setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, sixthCanEnter: true}));\r\n            else setCanEnterHash(prevCanEnter => ({ ...prevCanEnter, sixthCanEnter: false}));\r\n        }\r\n    }, [guesses])\r\n\r\n    const greenLetter = (dummyWord, guessedWord) => {\r\n        const greenIndex = compareString(correctWord, guessedWord);\r\n        var offset = 0;\r\n        for (let i = 0; i < greenIndex.length; i++) {\r\n            dummyWord = dummyWord.slice(0, [parseInt(greenIndex[i]) - offset]) + dummyWord.slice(parseInt(greenIndex[i]) + 1 - offset);\r\n            console.log(dummyWord)\r\n            offset++;\r\n        }\r\n        return dummyWord;\r\n    }\r\n\r\n    const evalGuess = (dummyWord, letter, pos) => {\r\n        if (letter == correctWord[pos]) {\r\n            return 'green';\r\n        } else if (dummyWord.includes(letter)) {\r\n            return 'yellow';\r\n        } else {\r\n            return 'gray';\r\n        }\r\n    }\r\n\r\n    var cheatVar;\r\n\r\n    const evaluteGuess = (res, ind) => {\r\n        if (guessResults.first) {\r\n            \r\n            const newCheatVar = cheatVar;\r\n            cheatVar = cheatVar.replace(res, '')\r\n            return evalGuess(newCheatVar, res, ind) //check for green, yellow and gray\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (doneHash.firstDone && !firstRef.current) { //player has made first guess\r\n            cheatVar = greenLetter(correctWord, guesses.first)\r\n            const colorGuess = guesses.first.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                first: [...prevResults.first, ...colorGuess]\r\n            }));\r\n            let newKbColor = guesses.first.split('').reduce((acc, res, ind) => {\r\n                acc[res] = colorGuess[ind];\r\n                return acc;\r\n            }, {});\r\n            setKbColor(prevResults => [\r\n                ...prevResults,\r\n                { ...newKbColor }\r\n            ])\r\n            const set = new Set(Object.values(newKbColor))\r\n            const first = [...set][0]\r\n            if (set.size == 1 && first == 'green') {\r\n                setWin(true);\r\n                setGuessWon('guess1');\r\n            }\r\n            firstRef.current = true;\r\n        }\r\n        if (doneHash.secondDone && !secondRef.current) { //player has made second guess\r\n            cheatVar = greenLetter(correctWord, guesses.second)\r\n            const colorGuess = guesses.second.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                second: [...prevResults.second, ...colorGuess]\r\n            }));\r\n            let newKbColor = guesses.second.split('').reduce((acc, res, ind) => {\r\n                acc[res] = colorGuess[ind];\r\n                return acc;\r\n            }, {});\r\n            setKbColor(prevResults => [\r\n                ...prevResults,\r\n                { ...newKbColor }\r\n            ])\r\n            const set = new Set(Object.values(newKbColor))\r\n            const first = [...set][0]\r\n            if (set.size == 1 && first == 'green') {\r\n                setWin(true);\r\n                setGuessWon('guess2');\r\n            }\r\n            secondRef.current = true;\r\n        }\r\n        if (doneHash.thirdDone && !thirdRef.current) { //player has made first guess\r\n            cheatVar = greenLetter(correctWord, guesses.third)\r\n            const colorGuess = guesses.third.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                third: [...prevResults.third, ...colorGuess]\r\n            }));\r\n            let newKbColor = guesses.third.split('').reduce((acc, res, ind) => {\r\n                acc[res] = colorGuess[ind];\r\n                return acc;\r\n            }, {});\r\n            setKbColor(prevResults => [\r\n                ...prevResults,\r\n                { ...newKbColor }\r\n            ])\r\n            const set = new Set(Object.values(newKbColor))\r\n            const first = [...set][0]\r\n            if (set.size == 1 && first == 'green') {\r\n                setWin(true);\r\n                setGuessWon('guess3');\r\n            }\r\n            thirdRef.current = true;\r\n        }\r\n        if (doneHash.fourthDone && !fourthRef.current) { //player has made first guess\r\n            cheatVar = greenLetter(correctWord, guesses.fourth)\r\n            const colorGuess = guesses.fourth.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                fourth: [...prevResults.fourth, ...colorGuess]\r\n            }));\r\n            let newKbColor = guesses.fourth.split('').reduce((acc, res, ind) => {\r\n                acc[res] = colorGuess[ind];\r\n                return acc;\r\n            }, {});\r\n            setKbColor(prevResults => [\r\n                ...prevResults,\r\n                { ...newKbColor }\r\n            ])\r\n            const set = new Set(Object.values(newKbColor))\r\n            const first = [...set][0]\r\n            if (set.size == 1 && first == 'green') {\r\n                setWin(true);\r\n                setGuessWon('guess4');\r\n            }\r\n            fourthRef.current = true;\r\n        }\r\n        if (doneHash.fifthDone && !fifthRef.current) { //player has made first guess\r\n            cheatVar = greenLetter(correctWord, guesses.fifth)\r\n            const colorGuess = guesses.fifth.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                fifth: [...prevResults.fifth, ...colorGuess]\r\n            }));\r\n\r\n            let newKbColor = guesses.fifth.split('').reduce((acc, res, ind) => {\r\n                acc[res] = colorGuess[ind];\r\n                return acc;\r\n                \r\n            }, {});\r\n\r\n            setKbColor(prevResults => [\r\n                ...prevResults,\r\n                { ...newKbColor }\r\n            ])\r\n            const set = new Set(Object.values(newKbColor))\r\n            const first = [...set][0]\r\n            if (set.size == 1 && first == 'green') {\r\n                setWin(true);\r\n                setGuessWon('guess5');\r\n            }\r\n            fifthRef.current = true;\r\n        }\r\n        if (doneHash.sixthDone && !sixthRef.current) { //player has made final guess\r\n            cheatVar = greenLetter(correctWord, guesses.sixth)\r\n            const colorGuess = guesses.sixth.split('').map((res, ind) => (\r\n                evaluteGuess(res, ind)\r\n            ))\r\n            setGuessResults(prevResults => ({\r\n                ...prevResults,\r\n                sixth: [...prevResults.sixth, ...colorGuess]\r\n            }));\r\n            let newKbColor = guesses.sixth.split('').reduce((acc, res, ind) => {\r\n                acc[res] = colorGuess[ind];\r\n                return acc;\r\n            }, {});\r\n            setKbColor(prevResults => [\r\n                ...prevResults,\r\n                { ...newKbColor }\r\n            ])\r\n            const set = new Set(Object.values(newKbColor))\r\n            const first = [...set][0]\r\n            if (set.size == 1 && first == 'green') {\r\n                setWin(true);\r\n                setGuessWon('guess6');\r\n\r\n            } else {\r\n                showAnswer(true);\r\n            }\r\n            sixthRef.current = true;\r\n        }\r\n        // Repeat this pattern for the remaining guesses (third, fourth, etc.)\r\n    }, [doneHash]);\r\n\r\n    useEffect(() => {\r\n        if (win ^ answer) {\r\n            console.log(userID.id)\r\n            \r\n            axios.post('http://localhost:8081/updateStats', {...userID, win: win, guessWon: guessWon})\r\n            .then(res => {\r\n                console.log(res.data.message)\r\n            })\r\n            .catch(err => console.log(err));\r\n        }\r\n    }, [win, answer])\r\n\r\n    useEffect(() => {\r\n\r\n        if (win) {\r\n            setWinCompliment(true);\r\n            setTimeout(() => {\r\n                /* Code to run after 4 seconds */\r\n                // alert('wow you have brain')\r\n                setWinPage(true);\r\n                // const allExceptDiv = document.querySelectorAll(\"body > *:not(#stats):not(#stats *)\");\r\n                // allExceptDiv.forEach(el => el.classList.add(\"unfocus\"))\r\n\r\n            }, 1000)\r\n            \r\n        }\r\n\r\n    }, [win])\r\n\r\n    if(winCompliment) {\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setWinCompliment(false);\r\n            }, 5000);\r\n    }\r\n\r\n    if(notEnough) {\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setNotEnough(false);\r\n\r\n            }, 5000);\r\n\r\n    }\r\n\r\n    if (wrongWord) {\r\n        setTimeout(function() {\r\n            document.getElementById('hidePls') && (document.getElementById('hidePls').id = 'waa');\r\n            setWrongWord(false);\r\n\r\n            }, 5000);\r\n    }\r\n\r\n    if (answer) {\r\n        setTimeout(function() {\r\n            setWinPage(true);\r\n        }, 1000);\r\n    }\r\n\r\n  return (\r\n    <div className={`mx-auto w-[500px] opacity-100 mb-[110px] ${darkMode ? 'bg-[#121213] text-white' : 'bg-white text-black'}`}>\r\n\r\n        {winCompliment && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Magnificent</span> </div>}\r\n\r\n        {notEnough && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Not enough letters</span> </div>}\r\n\r\n        {wrongWord && <div id='hidePls' className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>Not in word list</span> </div>}\r\n\r\n        {winPage && <Statistics /> }\r\n\r\n        {answer && <div className='absolute top-[120px] left-0 flex justify-center w-full'> <span className='bg-black rounded-md text-white p-3 font-bold tracking-[0.5px]'>{correctWord}</span> </div>}\r\n\r\n        <div className='grid grid-cols-5 w-[340px] mx-auto gap-2 '>\r\n\r\n            { (doneHash.firstDone && firstRef.current) ? \r\n            <>\r\n                {guessResults.first.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-[#6aaa64]' :  res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white` }>\r\n                        {guesses['first'][ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['first'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['first'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                    \r\n                    // <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    //     {guesses['first'][res] || ''}\r\n                    // </div>\r\n                ))}\r\n            </>\r\n            }\r\n\r\n            { doneHash.secondDone ? \r\n            <>\r\n                {guessResults.second.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-[#6aaa64]' :  res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white` }>\r\n                        {guesses['second'][ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['second'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['second'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n\r\n            { doneHash.thirdDone ? \r\n            <>\r\n                {guessResults.third.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-[#6aaa64]' :  res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white` }>\r\n                        {guesses.third[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['third'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['third'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n            { doneHash.fourthDone ? \r\n            <>\r\n                {guessResults.fourth.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-[#6aaa64]' :  res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white` }>\r\n                        {guesses.fourth[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['fourth'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['fourth'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n            { doneHash.fifthDone ? \r\n            <>\r\n                {guessResults.fifth.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-[#6aaa64]' :  res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white` }>\r\n                        {guesses.fifth[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['fifth'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['fifth'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n            { doneHash.sixthDone ? \r\n            <>\r\n                {guessResults.sixth.map((res, ind) => (\r\n                    <div className= { `border-2  ${res == 'green' ? 'bg-[#6aaa64]' :  res == 'yellow' ? 'bg-[#c9b458]' : 'bg-[#787c7e]'} flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold text-white` }>\r\n                        {guesses.sixth[ind] || ''}\r\n                    </div>\r\n                ))}\r\n            </>\r\n            :   \r\n            <>\r\n                {[0,1,2,3,4].map((res) => (\r\n                    guesses['sixth'][res]\r\n                    ? \r\n                    <div className='border-2 border-gray-500 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                        {guesses['sixth'][res]}\r\n                    </div>\r\n                    : \r\n                    <div className='border-2 border-gray-300 flex items-center justify-center w-[64px] h-[64px] uppercase text-4xl font-bold'>\r\n                    </div>\r\n                ))}\r\n            </>\r\n            }\r\n        </div>\r\n         \r\n        \r\n\r\n        \r\n\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Grid"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}